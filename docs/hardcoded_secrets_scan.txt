/home/ubuntu/OjalaHealthcarePlatform/Ojala.Api/Services/Implementations/AIEngineClient.cs:            // TODO: Replace with secrets from Vault in production
/home/ubuntu/OjalaHealthcarePlatform/Ojala.Api/Program.cs:                var redisConnectionString = configuration["Redis:ConnectionString"] ?? "localhost:6379";
/home/ubuntu/OjalaHealthcarePlatform/Ojala.Api/Program.cs:                return ConnectionMultiplexer.Connect(redisConnectionString);
/home/ubuntu/OjalaHealthcarePlatform/Ojala.Services/Implementations/LaunchDarklyFeatureFlagService.cs:            // TODO: Replace with secrets from Vault in production
/home/ubuntu/OjalaHealthcarePlatform/cypress/cypress.config.js:    adminPassword: 'admin-password',
/home/ubuntu/OjalaHealthcarePlatform/cypress/cypress.config.js:    rnPassword: 'nurse-password',
/home/ubuntu/OjalaHealthcarePlatform/cypress/cypress.config.js:    mdPassword: 'doctor-password',
/home/ubuntu/OjalaHealthcarePlatform/cypress/cypress.config.js:    employerPassword: 'employer-password',
/home/ubuntu/OjalaHealthcarePlatform/cypress/cypress.config.js:    patientPassword: 'patient-password'
/home/ubuntu/OjalaHealthcarePlatform/cypress/support/commands.js:Cypress.Commands.add('login', (username, password) => {
/home/ubuntu/OjalaHealthcarePlatform/cypress/support/commands.js:  cy.get('[data-cy=password-input]').type(password);
/home/ubuntu/OjalaHealthcarePlatform/cypress/support/commands.js:  cy.login(Cypress.env('rnUsername'), Cypress.env('rnPassword'));
/home/ubuntu/OjalaHealthcarePlatform/cypress/support/commands.js:  cy.login(Cypress.env('mdUsername'), Cypress.env('mdPassword'));
/home/ubuntu/OjalaHealthcarePlatform/cypress/support/commands.js:  cy.login(Cypress.env('employerUsername'), Cypress.env('employerPassword'));
/home/ubuntu/OjalaHealthcarePlatform/cypress/support/commands.js:  cy.login(Cypress.env('patientUsername'), Cypress.env('patientPassword'));
/home/ubuntu/OjalaHealthcarePlatform/cypress/support/commands.js:      Authorization: `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/cypress/support/commands.js:      Authorization: `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/cypress/support/commands.js:      Authorization: `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:This document provides guidance on integrating HashiCorp Vault with the OjalaHealthcarePlatform for secure secrets management. Vault will be used to store and manage sensitive information such as database credentials, API keys, and JWT tokens.
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:5. After deployment, retrieve the initial root token and unseal keys from the `vault_init.json` file generated on the Terraform machine.
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:    "SecretPath": "database/connection"
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:    Task<string> GetSecret(string path);
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:    Task<Dictionary<string, object>> GetSecrets(string path);
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:            new TokenAuthMethodInfo(Environment.GetEnvironmentVariable("VAULT_TOKEN"))
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:    public async Task<string> GetSecret(string path)
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:        var secret = await _vaultClient.V1.Secrets.KeyValue.V2.ReadSecretAsync(
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:        return secret.Data.Data.FirstOrDefault().Value.ToString();
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:    public async Task<Dictionary<string, object>> GetSecrets(string path)
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:        var secret = await _vaultClient.V1.Secrets.KeyValue.V2.ReadSecretAsync(
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:        return secret.Data.Data;
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:5. Use the service to retrieve secrets:
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:    public async Task<string> GetConnectionString()
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:        return await _vaultService.GetSecret("database/connection");
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:        var config = await _vaultService.GetSecrets("web-config/frontend");
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:      'Authorization': `Bearer ${getToken()}`
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:1. **Token Management**: Never hardcode Vault tokens. Use environment variables or instance profiles.
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:3. **Token Renewal**: Implement token renewal logic to prevent expiration.
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:5. **Secrets Rotation**: Implement periodic rotation of secrets.
/home/ubuntu/OjalaHealthcarePlatform/docs/vault_integration_guide.md:2. **Authentication Failures**: Check token validity and permissions.
/home/ubuntu/OjalaHealthcarePlatform/docs/implementation_guide.md:### Secrets Management with HashiCorp Vault
/home/ubuntu/OjalaHealthcarePlatform/docs/implementation_guide.md:- Token validation and translation
/home/ubuntu/OjalaHealthcarePlatform/docs/implementation_guide.md:- Secrets configuration with Vault
/home/ubuntu/OjalaHealthcarePlatform/docs/security_guide.md:- Secure password policies and storage
/home/ubuntu/OjalaHealthcarePlatform/docs/security_guide.md:### Secrets Management
/home/ubuntu/OjalaHealthcarePlatform/docs/security_guide.md:- HashiCorp Vault for secure secrets storage
/home/ubuntu/OjalaHealthcarePlatform/docs/security_guide.md:- Audit logging for all secrets access
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:- **Authentication**: Endpoints for user authentication and token management
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:- **JWT Bearer Tokens**: Standard authentication for most API calls
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:- **Legacy Token Bridge**: Authentication for legacy system integration
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:### Obtaining a Token
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:  "password": "password123"
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:### Using a Token
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Include the token in the Authorization header for all authenticated requests:
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:### Legacy Token Validation
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:POST /api/v1/authbridge/validate-legacy-token
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:  "legacyToken": "legacy-token-123"
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:| `/api/v1/auth/*` | Authentication Service | User authentication and token management |
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer {token}
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer {token}
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer {token}
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer {token}
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer {token}
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer {token}
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer {token}
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer {token}
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer {token}
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:Authorization: Bearer {token}
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:| `UNAUTHORIZED` | 401 | Authentication required or token invalid |
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:// Example: Authenticate and get a token
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:async function authenticate(username, password) {
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:    body: JSON.stringify({ username, password })
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:  return data.token;
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:// Example: Use the token to get patient data
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:async function getPatientData(token, patientId) {
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:      'Authorization': `Bearer ${token}`
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:async function isFeatureEnabled(token, featureName) {
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:      'Authorization': `Bearer ${token}`
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:async function getHealthScore(token, patientId) {
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:  const useNewModel = await isFeatureEnabled(token, 'UseNewHealthScoreModel');
/home/ubuntu/OjalaHealthcarePlatform/docs/api_documentation.md:      'Authorization': `Bearer ${token}`
/home/ubuntu/OjalaHealthcarePlatform/docs/migration_guide.md:- Authentication bridge validating legacy tokens
/home/ubuntu/OjalaHealthcarePlatform/docs/migration_guide.md:- Token validation and translation
/home/ubuntu/OjalaHealthcarePlatform/docs/best_practices_guide.md:public async Task Login_WithValidCredentials_ReturnsToken()
/home/ubuntu/OjalaHealthcarePlatform/docs/best_practices_guide.md:    public async Task AuthFlow_ValidLegacyToken_ConvertsToNewJwt()
/home/ubuntu/OjalaHealthcarePlatform/docs/best_practices_guide.md:      cy.get('input[name=password]').type(users.rn.password);
/home/ubuntu/OjalaHealthcarePlatform/docs/best_practices_guide.md:// TODO: Replace mock URL with secrets from Vault
/home/ubuntu/OjalaHealthcarePlatform/docs/best_practices_guide.md:/// Validates a legacy token and converts it to a new JWT
/home/ubuntu/OjalaHealthcarePlatform/docs/best_practices_guide.md:/// <param name="legacyToken">The legacy authentication token</param>
/home/ubuntu/OjalaHealthcarePlatform/docs/best_practices_guide.md:/// <returns>A new JWT token if validation succeeds, null otherwise</returns>
/home/ubuntu/OjalaHealthcarePlatform/docs/best_practices_guide.md:public async Task<string> ValidateLegacyTokenAsync(string legacyToken)
/home/ubuntu/OjalaHealthcarePlatform/docs/best_practices_guide.md:        var result = await _authService.AuthenticateAsync(request.Username, request.Password);
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:public async Task ValidateLegacyToken_WithValidToken_ReturnsUserInfo()
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:    var token = "valid-token";
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:    mockService.Setup(s => s.ValidateTokenAsync(token))
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:    var result = await controller.ValidateToken(token);
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:/// Validates a legacy authentication token and returns user information.
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:/// <param name="token">The legacy token to validate.</param>
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:/// <exception cref="ArgumentNullException">Thrown when token is null.</exception>
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:/// This method calls the legacy authentication service to validate the token.
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:/// If the token is valid, it returns user information including roles and claims.
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:public async Task<ValidationResult> ValidateLegacyTokenAsync(string token)
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:- Use JWT tokens for authentication
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:- Validate all tokens on the server
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:- Implement token refresh mechanism
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:- Use secure password hashing (bcrypt or Argon2)
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:feat(auth): implement legacy token validation (#123)
/home/ubuntu/OjalaHealthcarePlatform/docs/development_standards.md:- Add token validation endpoint
/home/ubuntu/OjalaHealthcarePlatform/docs/emergency-alert-system.md:- Authenticates clients via JWT tokens
/home/ubuntu/OjalaHealthcarePlatform/docs/emergency-alert-system.md:- `JWT_SECRET`: Secret key for JWT validation (default: "ojala-jwt-secret")
/home/ubuntu/OjalaHealthcarePlatform/docs/emergency-alert-system.md:   - Verify JWT token is valid and includes doctor or nurse roles
/home/ubuntu/OjalaHealthcarePlatform/docs/validation-guide.md:  -H "Authorization: Bearer <test-token>" \
/home/ubuntu/OjalaHealthcarePlatform/docs/validation-guide.md:wscat -c "ws://localhost:5004/ws/alerts?token=<test-token>"
/home/ubuntu/OjalaHealthcarePlatform/docs/validation-guide.md:2. Verify JWT token is valid and includes required roles
/home/ubuntu/OjalaHealthcarePlatform/docs/docker-hardening-guidelines.md:  RUN adduser --disabled-password --gecos "" appuser
/home/ubuntu/OjalaHealthcarePlatform/docs/docker-hardening-guidelines.md:- **Avoid hardcoding secrets**: Never hardcode secrets in Dockerfiles or images.
/home/ubuntu/OjalaHealthcarePlatform/docs/docker-hardening-guidelines.md:- **Use environment variables**: Pass secrets and configuration via environment variables.
/home/ubuntu/OjalaHealthcarePlatform/docs/hardening-guidelines.md:*   **Secrets Management**: Do not build secrets or credentials into the image. Fetch them at runtime using mechanisms like Vault.
/home/ubuntu/OjalaHealthcarePlatform/docs/hardening-guidelines.md:*   **Secret Management**: 
/home/ubuntu/OjalaHealthcarePlatform/docs/hardening-guidelines.md:    *   Remove all hardcoded secrets and tokens (Vault tokens, DB passwords, JWT secrets) from `docker-compose.yml`, Helm `values.yaml` files, and deployment templates.
/home/ubuntu/OjalaHealthcarePlatform/docs/hardening-guidelines.md:    *   Integrate Vault with Kubernetes using the Kubernetes Auth Method. Inject secrets into pods via annotations or CSI driver, not environment variables containing tokens.
/home/ubuntu/OjalaHealthcarePlatform/docs/hardening-guidelines.md:    *   Use Kubernetes Secrets for non-Vault managed secrets, mounted as volumes rather than environment variables.
/home/ubuntu/OjalaHealthcarePlatform/docs/hardening-guidelines.md:*   **Secrets**: Ensure GitHub Actions secrets are used correctly and not exposed in logs.
/home/ubuntu/OjalaHealthcarePlatform/docs/audit-summary.md:    *   **Critical**: `RequireHttpsMetadata = false` in API Gateway and Identity service allows token transmission over HTTP.
/home/ubuntu/OjalaHealthcarePlatform/docs/audit-summary.md:    *   While Vault usage is positive, confirmation is needed that *all* secrets (Stripe, Email/SMS) are fetched from Vault and not hardcoded elsewhere.
/home/ubuntu/OjalaHealthcarePlatform/docs/audit-summary.md:    *   Stripe secret key handling needs verification (must be backend-only).
/home/ubuntu/OjalaHealthcarePlatform/docs/audit-summary.md:    *   HealthKit `deviceToken` stored in potentially insecure `AsyncStorage`.
/home/ubuntu/OjalaHealthcarePlatform/docs/audit-summary.md:*   **Remaining Issues**: Verify secret fetching logic. Evaluate `deviceToken` storage security.
/home/ubuntu/OjalaHealthcarePlatform/docs/audit-summary.md:    *   **Critical**: Hardcoded Vault tokens and database passwords in `docker-compose.yml` and Helm `values.yaml` (including `values-prod.yaml`).
/home/ubuntu/OjalaHealthcarePlatform/docs/audit-summary.md:*   **Remaining Issues**: Requires significant refactoring to remove hardcoded secrets, implement network policies, enforce security contexts, and configure storage encryption, ideally using Vault Kubernetes auth and Kubernetes secrets.
/home/ubuntu/OjalaHealthcarePlatform/docs/audit-summary.md:2.  **Secret Management**: Eliminate all hardcoded credentials by properly integrating Vault with Kubernetes (using Kubernetes Auth Method) and utilizing Kubernetes Secrets.
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:  token   = var.vault_token
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:# Initialize Vault and configure secret engines
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:      # Set VAULT_TOKEN
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:      export VAULT_TOKEN=$(cat vault_init.json | jq -r '.root_token')
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:      # Enable secret engines
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:      vault secrets enable -path=ojala/kv kv-v2
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:      vault secrets enable -path=ojala/database database
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:      vault secrets enable -path=ojala/aws aws
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:      # Store initial secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:        connection_string="Server=db.ojala.com;Database=OjalaHealthcare;User Id=app_user;Password=initial_password;"
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:        secret="$(openssl rand -base64 32)" \
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/main.tf:      echo "Vault has been initialized and configured. Root token and unseal keys are in vault_init.json"
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/variables.tf:variable "vault_token" {
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/variables.tf:  description = "Vault token for Terraform operations"
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/policies/ojala-api-policy.hcl:# Allow token creation for service-to-service communication
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/policies/ojala-api-policy.hcl:path "auth/token/create" {
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/policies/ojala-api-policy.hcl:# Allow token renewal
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/policies/ojala-api-policy.hcl:path "auth/token/renew" {
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/policies/ojala-api-policy.hcl:# Allow token lookup for validation
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/policies/ojala-api-policy.hcl:path "auth/token/lookup" {
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/policies/ojala-web-policy.hcl:# Allow token renewal
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/policies/ojala-web-policy.hcl:path "auth/token/renew" {
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/policies/ojala-web-policy.hcl:# Allow token lookup for validation
/home/ubuntu/OjalaHealthcarePlatform/infra/vault/policies/ojala-web-policy.hcl:path "auth/token/lookup" {
/home/ubuntu/OjalaHealthcarePlatform/infra/cloudformation/rds-instance.yml:  DBPassword:
/home/ubuntu/OjalaHealthcarePlatform/infra/cloudformation/rds-instance.yml:    Description: Database admin password
/home/ubuntu/OjalaHealthcarePlatform/infra/cloudformation/rds-instance.yml:      MasterUserPassword: !Ref DBPassword
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:            DBPassword=${{ secrets.DB_PASSWORD }} \
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:            KeyName=${{ secrets.EC2_KEY_NAME }} \
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
/home/ubuntu/OjalaHealthcarePlatform/infra/github-workflows/ci-cd.yml:        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
/home/ubuntu/OjalaHealthcarePlatform/infra/monitoring/docker-compose.yml:      - GF_SECURITY_ADMIN_PASSWORD=ojala-healthcare-admin
/home/ubuntu/OjalaHealthcarePlatform/infra/monitoring/alertmanager.yml:        auth_password: '{{ .SMTP_PASSWORD }}'
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/main.tf:    resources        = ["secrets"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/main.tf:  description             = "EKS Secret Encryption Key"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/main.tf:  password = var.db_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/.github/workflows/pr-title.yml:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/.github/workflows/release.yml:          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/.github/workflows/stale-actions.yaml:          repo-token: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/.gitignore:# password, private keys, and other secrets. These should not be part of version
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/CHANGELOG.md:- feat: support for random password ([#306](https://github.com/terraform-aws-modules/terraform-aws-rds/issues/306))
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/CHANGELOG.md:- Mark password as sensitive (closes [#98](https://github.com/terraform-aws-modules/terraform-aws-rds/issues/98))
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/CHANGELOG.md:- Mark password as sensitive (closes [#98](https://github.com/terraform-aws-modules/terraform-aws-rds/issues/98))
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/CHANGELOG.md:- Mark password as sensitive (closes [#98](https://github.com/terraform-aws-modules/terraform-aws-rds/issues/98))
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/CHANGELOG.md:- Mark password as sensitive (closes [#98](https://github.com/terraform-aws-modules/terraform-aws-rds/issues/98))
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/CHANGELOG.md:- Mark password as sensitive (closes [#98](https://github.com/terraform-aws-modules/terraform-aws-rds/issues/98))
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/README.md:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/README.md:| [random_password.master_password](https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/password) | resource |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/README.md:| <a name="input_create_random_password"></a> [create\_random\_password](#input\_create\_random\_password) | Whether to create random password for RDS primary cluster | `bool` | `false` | no |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/README.md:| <a name="input_password"></a> [password](#input\_password) | Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file | `string` | `""` | no |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/README.md:| <a name="input_random_password_length"></a> [random\_password\_length](#input\_random\_password\_length) | (Optional) Length of random password to create. (default: 10) | `number` | `10` | no |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/README.md:| <a name="output_db_instance_password"></a> [db\_instance\_password](#output\_db\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/README.md:| <a name="output_db_master_password"></a> [db\_master\_password](#output\_db\_master\_password) | The master password |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/main.tf:  master_password      = var.create_db_instance && var.create_random_password ? random_password.master_password[0].result : var.password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/main.tf:# Random string to use as master password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/main.tf:resource "random_password" "master_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/main.tf:  count = var.create_db_instance && var.create_random_password ? 1 : 0
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/main.tf:  length  = var.random_password_length
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/main.tf:  password                            = local.master_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/outputs.tf:output "db_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/outputs.tf:  value       = local.master_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/outputs.tf:output "db_master_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/outputs.tf:  description = "The master password"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/outputs.tf:  value       = module.db_instance.db_instance_master_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mssql/README.md:| <a name="output_db_instance_password"></a> [db\_instance\_password](#output\_db\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mssql/main.tf:  password = "SuperSecretPassw0rd"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mssql/main.tf:  create_random_password = true
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mssql/main.tf:  random_password_length = 12
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mssql/outputs.tf:output "db_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mssql/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mssql/outputs.tf:  value       = module.db.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/README.md:| <a name="output_db_default_instance_password"></a> [db\_default\_instance\_password](#output\_db\_default\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/README.md:| <a name="output_db_instance_password"></a> [db\_instance\_password](#output\_db\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/main.tf:  create_random_password = true
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/main.tf:  random_password_length = 12
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/outputs.tf:output "db_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/outputs.tf:  value       = module.db.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/outputs.tf:output "db_default_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-mysql/outputs.tf:  value       = module.db_default.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-oracle/README.md:| <a name="output_db_instance_password"></a> [db\_instance\_password](#output\_db\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-oracle/main.tf:  create_random_password = true
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-oracle/main.tf:  random_password_length = 12
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-oracle/outputs.tf:output "db_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-oracle/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-oracle/outputs.tf:  value       = module.db.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/README.md:| <a name="output_db_default_instance_password"></a> [db\_default\_instance\_password](#output\_db\_default\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/README.md:| <a name="output_db_instance_password"></a> [db\_instance\_password](#output\_db\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/main.tf:  create_random_password = true
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/main.tf:  random_password_length = 12
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/outputs.tf:output "db_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/outputs.tf:  value       = module.db.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/outputs.tf:output "db_default_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/complete-postgres/outputs.tf:  value       = module.db_default.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/cross-region-replica-postgres/README.md:| <a name="output_master_db_instance_password"></a> [master\_db\_instance\_password](#output\_master\_db\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/cross-region-replica-postgres/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/cross-region-replica-postgres/main.tf:  # Username and password should not be set for replicas
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/cross-region-replica-postgres/main.tf:  password = null
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/cross-region-replica-postgres/outputs.tf:output "master_db_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/cross-region-replica-postgres/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/cross-region-replica-postgres/outputs.tf:  value       = module.master.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/enhanced-monitoring/README.md:| <a name="output_db_instance_password"></a> [db\_instance\_password](#output\_db\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/enhanced-monitoring/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/enhanced-monitoring/outputs.tf:output "db_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/enhanced-monitoring/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/enhanced-monitoring/outputs.tf:  value       = module.db.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/groups/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/groups/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/groups/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/groups/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/groups/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-mysql/README.md:| <a name="output_master_db_instance_password"></a> [master\_db\_instance\_password](#output\_master\_db\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-mysql/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-mysql/main.tf:  # Username and password should not be set for replicas
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-mysql/main.tf:  password = null
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-mysql/outputs.tf:output "master_db_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-mysql/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-mysql/outputs.tf:  value       = module.master.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-postgres/README.md:| <a name="output_master_db_instance_password"></a> [master\_db\_instance\_password](#output\_master\_db\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-postgres/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-postgres/main.tf:  # Username and password should not be set for replicas
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-postgres/main.tf:  password = null
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-postgres/outputs.tf:output "master_db_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-postgres/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/replica-postgres/outputs.tf:  value       = module.master.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/s3-import-mysql/README.md:$ docker run -d --name percona-server-mysql-8.0.20 -e MYSQL_ROOT_PASSWORD=root percona/percona-server:8.0.20
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/s3-import-mysql/README.md:$ mysql -u root -p # password is also root
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/s3-import-mysql/README.md:$ docker run --name percona-xtrabackup-8.0 --mount type=bind,src=/tmp/backup,dst=/backup --volumes-from percona-server-mysql-8.0.20 percona/percona-xtrabackup:8.0 xtrabackup --backup --data-dir=/var/lib/mysql --target-dir=/backup --user=root --password=root
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/s3-import-mysql/README.md:| <a name="output_db_instance_password"></a> [db\_instance\_password](#output\_db\_instance\_password) | The database password (this password may be old, because Terraform doesn't track it after initial creation) |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/s3-import-mysql/main.tf:  password = "YourPwdShouldBeLongAndSecure!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/s3-import-mysql/outputs.tf:output "db_instance_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/s3-import-mysql/outputs.tf:  description = "The database password (this password may be old, because Terraform doesn't track it after initial creation)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/examples/s3-import-mysql/outputs.tf:  value       = module.db.db_instance_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/modules/db_instance/README.md:| <a name="input_password"></a> [password](#input\_password) | Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file | `string` | `null` | no |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/modules/db_instance/README.md:| <a name="output_db_instance_master_password"></a> [db\_instance\_master\_password](#output\_db\_instance\_master\_password) | The master password |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/modules/db_instance/main.tf:  password                            = var.password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/modules/db_instance/main.tf:  password                            = var.password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/modules/db_instance/outputs.tf:  db_instance_master_password       = element(concat(aws_db_instance.this_mssql.*.password, aws_db_instance.this.*.password, [""]), 0)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/modules/db_instance/outputs.tf:output "db_instance_master_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/modules/db_instance/outputs.tf:  description = "The master password"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/modules/db_instance/outputs.tf:  value       = local.db_instance_master_password
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/modules/db_instance/variables.tf:variable "password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/modules/db_instance/variables.tf:  description = "Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/variables.tf:variable "password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/variables.tf:  description = "Password for the master DB user. Note that this may show up in logs, and it will be stored in the state file"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/variables.tf:variable "create_random_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/variables.tf:  description = "Whether to create random password for RDS primary cluster"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/variables.tf:variable "random_password_length" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/db/variables.tf:  description = "(Optional) Length of random password to create. (default: 10)"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/CHANGELOG.md:* Add support for creating KMS key for cluster secret encryption ([#2121](https://github.com/terraform-aws-modules/terraform-aws-eks/issues/2121)) ([75acb09](https://github.com/terraform-aws-modules/terraform-aws-eks/commit/75acb09ec56c5ce8e5f74ebc7bf15468b272db8a))
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/.github/CHANGELOG.pre-v11.0.0.md:- Add support for envelope encryption of Secrets (by @babilen5)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/.github/workflows/lock.yml:          github-token: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/.github/workflows/pr-title.yml:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/.github/workflows/release.yml:          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/.github/workflows/stale-actions.yaml:          repo-token: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/.gitignore:# password, private keys, and other secrets. These should not be part of version
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/README.md:    resources        = ["secrets"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/docs/UPGRADE-18.0.md:- The previous `secrets_encryption` example has been removed; the functionality has been demonstrated in several of the new examples rendering this standalone example redundant
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/complete/main.tf:    args = ["eks", "get-token", "--cluster-name", module.eks.cluster_name]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/complete/main.tf:    resources = ["secrets"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/eks_managed_node_group/README.md:| [tls_private_key.this](https://registry.terraform.io/providers/hashicorp/tls/latest/docs/resources/private_key) | resource |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/eks_managed_node_group/main.tf:    args = ["eks", "get-token", "--cluster-name", module.eks.cluster_name]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/eks_managed_node_group/main.tf:    resources        = ["secrets"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/eks_managed_node_group/main.tf:        http_tokens                 = "required"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/eks_managed_node_group/main.tf:  description             = "EKS Secret Encryption Key"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/eks_managed_node_group/main.tf:resource "tls_private_key" "this" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/eks_managed_node_group/main.tf:  public_key      = tls_private_key.this.public_key_openssh
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/fargate_profile/main.tf:      args = ["eks", "get-token", "--cluster-name", module.eks.cluster_name]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/fargate_profile/main.tf:    resources        = ["secrets"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/fargate_profile/main.tf:        token = data.aws_eks_cluster_auth.this.token
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/fargate_profile/main.tf:  description             = "EKS Secret Encryption Key"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/karpenter/main.tf:    args = ["eks", "get-token", "--cluster-name", module.eks.cluster_name]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/karpenter/main.tf:      args = ["eks", "get-token", "--cluster-name", module.eks.cluster_name]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/karpenter/main.tf:    args = ["eks", "get-token", "--cluster-name", module.eks.cluster_name]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/karpenter/main.tf:        token = data.aws_eks_cluster_auth.this.token
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/self_managed_node_group/README.md:| [tls_private_key.this](https://registry.terraform.io/providers/hashicorp/tls/latest/docs/resources/private_key) | resource |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/self_managed_node_group/main.tf:    args = ["eks", "get-token", "--cluster-name", module.eks.cluster_name]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/self_managed_node_group/main.tf:    resources        = ["secrets"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/self_managed_node_group/main.tf:        http_tokens                 = "required"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/self_managed_node_group/main.tf:  description             = "EKS Secret Encryption Key"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/self_managed_node_group/main.tf:resource "tls_private_key" "this" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/examples/self_managed_node_group/main.tf:  public_key = tls_private_key.this.public_key_openssh
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/node_groups.tf:    http_tokens                 = "required"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/modules/eks-managed-node-group/README.md:| <a name="input_metadata_options"></a> [metadata\_options](#input\_metadata\_options) | Customize the metadata options for the instance | `map(string)` | <pre>{<br>  "http_endpoint": "enabled",<br>  "http_put_response_hop_limit": 2,<br>  "http_tokens": "required"<br>}</pre> | no |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/modules/eks-managed-node-group/main.tf:      http_tokens                 = lookup(metadata_options.value, "http_tokens", null)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/modules/eks-managed-node-group/variables.tf:    http_tokens                 = "required"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/modules/self-managed-node-group/README.md:| <a name="input_metadata_options"></a> [metadata\_options](#input\_metadata\_options) | Customize the metadata options for the instance | `map(string)` | <pre>{<br>  "http_endpoint": "enabled",<br>  "http_put_response_hop_limit": 2,<br>  "http_tokens": "required"<br>}</pre> | no |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/modules/self-managed-node-group/main.tf:      http_tokens                 = lookup(metadata_options.value, "http_tokens", null)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks/modules/self-managed-node-group/variables.tf:    http_tokens                 = "required"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks.kms/.github/workflows/pr-title.yml:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks.kms/.github/workflows/release.yml:          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks.kms/.github/workflows/stale-actions.yaml:          repo-token: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks.kms/.gitignore:# password, private keys, and other secrets. These should not be part of version
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/eks.kms/main.tf:  grant_creation_tokens = try(each.value.grant_creation_tokens, null)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/.github/workflows/lock.yml:          github-token: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/.github/workflows/pr-title.yml:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/.github/workflows/release.yml:          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/.github/workflows/stale-actions.yaml:          repo-token: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/.gitignore:# password, private keys, and other secrets. These should not be part of version
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/README.md:  auth_token                 = "PickSomethingMoreSecure123!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/README.md:  auth_token                 = "PickSomethingMoreSecure123!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/README.md:| <a name="input_auth_token"></a> [auth\_token](#input\_auth\_token) | The password used to access a password protected server. Can be specified only if `transit_encryption_enabled = true` | `string` | `null` | no |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/README.md:| <a name="input_auth_token_update_strategy"></a> [auth\_token\_update\_strategy](#input\_auth\_token\_update\_strategy) | Strategy to use when updating the `auth_token`. Valid values are `SET`, `ROTATE`, and `DELETE`. Defaults to `ROTATE` | `string` | `null` | no |
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/examples/redis-cluster-mode/main.tf:    passwords = ["password123456789"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/examples/redis-cluster-mode/main.tf:      passwords     = ["password123456789"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/examples/redis-cluster-mode/main.tf:        type      = "password"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/examples/redis-cluster-mode/main.tf:        passwords = ["password123456789", "password987654321"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/examples/redis-replication-group-with-cluster-replica/main.tf:  auth_token                 = "PickSomethingMoreSecure123!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/examples/redis-replication-group/main.tf:  auth_token                 = "PickSomethingMoreSecure123!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/examples/serverless-cache/main.tf:      type = "no-password-required"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/examples/serverless-cache/main.tf:        type = "no-password-required"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/examples/valkey-replication-group/main.tf:  auth_token                 = "PickSomethingMoreSecure123!"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/main.tf:  auth_token                  = var.auth_token
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/main.tf:  auth_token_update_strategy  = var.auth_token_update_strategy
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/main.tf:  auth_token                  = var.auth_token
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/main.tf:  auth_token_update_strategy  = var.auth_token_update_strategy
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/modules/user-group/README.md:    passwords = ["password123456789"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/modules/user-group/README.md:      passwords     = ["password123456789"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/modules/user-group/README.md:        type      = "password"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/modules/user-group/README.md:        passwords = ["password123456789", "password987654321"]
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/modules/user-group/main.tf:      passwords = try(authentication_mode.value.passwords, null)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/modules/user-group/main.tf:  no_password_required = try(var.default_user.no_password_required, null)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/modules/user-group/main.tf:  passwords            = try(var.default_user.passwords, null)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/modules/user-group/main.tf:      passwords = try(authentication_mode.value.passwords, null)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/modules/user-group/main.tf:  no_password_required = try(each.value.no_password_required, null)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/modules/user-group/main.tf:  passwords            = try(each.value.passwords, null)
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/variables.tf:variable "auth_token" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/variables.tf:  description = "The password used to access a password protected server. Can be specified only if `transit_encryption_enabled = true`"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/variables.tf:variable "auth_token_update_strategy" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/redis/variables.tf:  description = "Strategy to use when updating the `auth_token`. Valid values are `SET`, `ROTATE`, and `DELETE`. Defaults to `ROTATE`"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/.github/workflows/lock.yml:          github-token: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/.github/workflows/pr-title.yml:          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/.github/workflows/release.yml:          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/.github/workflows/stale-actions.yaml:          repo-token: ${{ secrets.GITHUB_TOKEN }}
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/.gitignore:# password, private keys, and other secrets. These should not be part of version
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/CHANGELOG.md:- adding secrets manager vpc end point support
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/CHANGELOG.md:- adding secrets manager vpc end point support
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/CHANGELOG.md:- adding secrets manager vpc end point support
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/CHANGELOG.md:- adding secrets manager vpc end point support
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/CHANGELOG.md:- adding secrets manager vpc end point support
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/.terraform/modules/vpc.vpc/examples/complete-vpc/main.tf:    Project  = "Secret"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/variables.tf:variable "db_password" {
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/variables.tf:  description = "Password for RDS database"
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/variables.tf:  default     = "TemporaryPassword123!"  # This should be changed in production
/home/ubuntu/OjalaHealthcarePlatform/infra/terraform/staging-demo.tfvars:db_password = "TemporaryPassword123!"  # This should be changed in production
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-api-deployment.yaml:      - name: vault-secrets # Shared volume for rendered secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-api-deployment.yaml:        # Connection string removed, will be loaded from /vault/secrets/appsettings.json
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-api-deployment.yaml:        - name: vault-secrets # Mount the rendered secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-api-deployment.yaml:          mountPath: /vault/secrets # Path matches Program.cs
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-api-deployment.yaml:        - name: vault-secrets # Mount shared volume for output
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-api-deployment.yaml:          mountPath: /vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-ai-engine-deployment.yaml:      - name: vault-secrets # Shared volume for rendered secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-ai-engine-deployment.yaml:        - name: vault-secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-ai-engine-deployment.yaml:          mountPath: /vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-ai-engine-deployment.yaml:        - name: vault-secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-ai-engine-deployment.yaml:          mountPath: /vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-nurse-assistant-deployment.yaml:      - name: vault-secrets # Shared volume for rendered secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-nurse-assistant-deployment.yaml:        - name: vault-secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-nurse-assistant-deployment.yaml:          mountPath: /vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-nurse-assistant-deployment.yaml:        - name: vault-secrets
/home/ubuntu/OjalaHealthcarePlatform/infra/kubernetes/ojala-nurse-assistant-deployment.yaml:          mountPath: /vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.ApiGateway/Program.cs:                            options.SecretPath = vaultConfig["SecretPath"];
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.ApiGateway/Program.cs:                            options.SecretId = vaultConfig["SecretId"];
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Startup.cs:using Microsoft.IdentityModel.Tokens;
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Startup.cs:            var key = Encoding.ASCII.GetBytes(jwtSettings["Secret"]);
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Startup.cs:                options.SaveToken = true;
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Startup.cs:                options.TokenValidationParameters = new TokenValidationParameters
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Startup.cs:                    Description = "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:        /// <returns>JWT token for the new system</returns>
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:            // Validate legacy token or credentials
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:            var validationResult = await _identityBridgeService.ValidateLegacyAuth(request.LegacyToken, request.Username, request.Password);
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:            // Generate JWT token for the new system
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:            var token = await _userService.GenerateJwtToken(user);
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:                token = token,
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:        /// Validates a legacy token and returns user information
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:        /// <param name="request">Legacy token validation request</param>
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:        /// <returns>User information if token is valid</returns>
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:        [HttpPost("validate-legacy-token")]
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:        public async Task<IActionResult> ValidateLegacyToken([FromBody] LegacyTokenValidationRequest request)
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:            var validationResult = await _identityBridgeService.ValidateLegacyToken(request.LegacyToken);
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Api/Controllers/AuthBridgeController.cs:                return Unauthorized(new { message = "Invalid legacy token" });
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Interfaces/IIdentityBridgeService.cs:        /// Validates legacy authentication using token or username/password
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Interfaces/IIdentityBridgeService.cs:        /// <param name="legacyToken">Legacy token (optional)</param>
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Interfaces/IIdentityBridgeService.cs:        /// <param name="username">Username (optional if token provided)</param>
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Interfaces/IIdentityBridgeService.cs:        /// <param name="password">Password (optional if token provided)</param>
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Interfaces/IIdentityBridgeService.cs:        Task<LegacyAuthValidationResult> ValidateLegacyAuth(string legacyToken, string username, string password);
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Interfaces/IIdentityBridgeService.cs:        /// Validates a legacy token
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Interfaces/IIdentityBridgeService.cs:        /// <param name="legacyToken">Legacy token to validate</param>
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Interfaces/IIdentityBridgeService.cs:        Task<LegacyAuthValidationResult> ValidateLegacyToken(string legacyToken);
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:        public async Task<LegacyAuthValidationResult> ValidateLegacyAuth(string legacyToken, string username, string password)
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                // If token is provided, validate it
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                if (!string.IsNullOrEmpty(legacyToken))
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                    return await ValidateLegacyToken(legacyToken);
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                // Otherwise, validate with username and password
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                    JsonSerializer.Serialize(new { username, password }),
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                if (authResult == null || string.IsNullOrEmpty(authResult.Token))
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                // Now validate the token we just received
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                return await ValidateLegacyToken(authResult.Token);
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:        public async Task<LegacyAuthValidationResult> ValidateLegacyToken(string legacyToken)
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                if (string.IsNullOrEmpty(legacyToken))
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                client.DefaultRequestHeaders.Add("Authorization", $"Bearer {legacyToken}");
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                    _logger.LogWarning("Failed to validate legacy token");
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                var validationResult = JsonSerializer.Deserialize<LegacyTokenValidationResponse>(responseContent, new JsonSerializerOptions
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:                _logger.LogError(ex, "Error validating legacy token");
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:            public string Token { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Implementations/IdentityBridgeService.cs:        private class LegacyTokenValidationResponse
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Models/IntegrationModels.cs:        public string LegacyToken { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Models/IntegrationModels.cs:        public string Password { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Models/IntegrationModels.cs:    public class LegacyTokenValidationRequest
/home/ubuntu/OjalaHealthcarePlatform/integration/Ojala.Services/Models/IntegrationModels.cs:        public string LegacyToken { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:    { username: 'rn_user1', password: 'password123', role: 'RN' },
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:    { username: 'rn_user2', password: 'password123', role: 'RN' },
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:    { username: 'md_user1', password: 'password123', role: 'MD' },
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:    { username: 'patient_user1', password: 'password123', role: 'Patient' },
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:    { username: 'employer_user1', password: 'password123', role: 'Employer' }
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:function getAuthToken(username, password) {
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:    password: password
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:    'login successful': (r) => r.status === 200 && r.json('token') !== undefined,
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:  return response ? http.post(loginUrl, payload, params).json('token') : null;
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:  const token = getAuthToken(user.username, user.password);
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:  if (!token) {
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:    console.log('Failed to get auth token for RN user');
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:      'Authorization': `Bearer ${token}`,
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:  const token = getAuthToken(user.username, user.password);
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:  if (!token) {
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:    console.log('Failed to get auth token for Patient user');
/home/ubuntu/OjalaHealthcarePlatform/loadtest/script.js:      'Authorization': `Bearer ${token}`,
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:        public async Task BridgeLogin_WithValidCredentials_ReturnsToken()
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:                Password = "testpassword"
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var result = JsonSerializer.Deserialize<TokenResponse>(responseString, 
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            Assert.NotNull(result.Token);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            Assert.NotEmpty(result.Token);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:                Password = "invalidpassword"
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:        public async Task ValidateLegacyToken_WithValidToken_ReturnsUserInfo()
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var request = new LegacyTokenValidationRequest
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:                LegacyToken = "valid-legacy-token"
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var response = await _client.PostAsync("/api/authbridge/validate-legacy-token", content);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:        public async Task ValidateLegacyToken_WithInvalidToken_Returns401Unauthorized()
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var request = new LegacyTokenValidationRequest
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:                LegacyToken = "invalid-legacy-token"
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var response = await _client.PostAsync("/api/authbridge/validate-legacy-token", content);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            Assert.Equal("Invalid token", error.Message);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            _client.DefaultRequestHeaders.Add("Authorization", "Bearer admin-test-token");
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            // Set up authentication with non-admin token
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            _client.DefaultRequestHeaders.Add("Authorization", "Bearer user-test-token");
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:        public async Task AuthFlow_ValidLegacyToken_ConvertsToNewJwt()
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            // Arrange - First validate a legacy token
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var validationRequest = new LegacyTokenValidationRequest
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:                LegacyToken = "valid-legacy-token"
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            // Act - Part 1: Validate the legacy token
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var validationResponse = await _client.PostAsync("/api/authbridge/validate-legacy-token", validationContent);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var tokenRequest = new TokenRequest
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var tokenContent = new StringContent(
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:                JsonSerializer.Serialize(tokenRequest),
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var tokenResponse = await _client.PostAsync("/api/authbridge/issue-token", tokenContent);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            tokenResponse.EnsureSuccessStatusCode();
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            var tokenResult = JsonSerializer.Deserialize<TokenResponse>(
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:                await tokenResponse.Content.ReadAsStringAsync(),
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            Assert.NotNull(tokenResult);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            Assert.NotNull(tokenResult.Token);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            Assert.NotEmpty(tokenResult.Token);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            Assert.Equal(validationResult.UserId, tokenResult.UserId);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:        private class TokenResponse
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:            public string Token { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Integration/AuthBridgeControllerTests.cs:        private class TokenRequest
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/AIEngineClientTests.cs:            // TODO: Replace mock URL with secrets from Vault
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/AIEngineClientTests.cs:                    ItExpr.IsAny<CancellationToken>())
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:            // TODO: Replace mock URL with secrets from Vault
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:        public async Task ValidateLegacyToken_ReturnsValidResult_WhenTokenIsValid()
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:            var legacyToken = "valid-legacy-token";
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:            var result = await _identityBridgeService.ValidateLegacyTokenAsync(legacyToken);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:        public async Task ValidateLegacyToken_ReturnsInvalidResult_WhenTokenIsInvalid()
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:            var legacyToken = "invalid-legacy-token";
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:            var result = await _identityBridgeService.ValidateLegacyTokenAsync(legacyToken);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:        public async Task ValidateLegacyToken_ReturnsInvalidResult_WhenApiCallFails()
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:            var legacyToken = "legacy-token";
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:            var result = await _identityBridgeService.ValidateLegacyTokenAsync(legacyToken);
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:                    It.Is<It.IsAnyType>((v, t) => v.ToString().Contains("Failed to validate legacy token")),
/home/ubuntu/OjalaHealthcarePlatform/tests/Ojala.Tests/Unit/IdentityBridgeServiceTests.cs:                    ItExpr.IsAny<CancellationToken>())
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/db-migrations.yml:        # Set connection string from secrets
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/db-migrations.yml:        export ConnectionStrings__DefaultConnection="${{ secrets.DEV_DB_CONNECTION_STRING }}"
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/db-migrations.yml:        # Set connection string from secrets
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/db-migrations.yml:        export ConnectionStrings__DefaultConnection="${{ secrets.PROD_DB_CONNECTION_STRING }}"
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/docker-ci.yml:          echo "VAULT_TOKEN=ojala-root-token" >> $GITHUB_ENV
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/docker-ci.yml:          username: ${{ secrets.DOCKER_USERNAME }}
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/docker-ci.yml:          password: ${{ secrets.DOCKER_PASSWORD }}
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-staging.yml:          kubeconfig: ${{ secrets.KUBE_CONFIG }}
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-staging.yml:          echo "VAULT_TOKEN=${{ secrets.VAULT_TOKEN }}" >> $GITHUB_ENV
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-staging.yml:            --set vault.token=${{ env.VAULT_TOKEN }} \
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-staging.yml:            --set vault.token=${{ env.VAULT_TOKEN }} \
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-staging.yml:            --set vault.token=${{ env.VAULT_TOKEN }} \
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-staging.yml:            --set vault.token=${{ env.VAULT_TOKEN }} \
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-staging.yml:            --set vault.token=${{ env.VAULT_TOKEN }} \
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-production.yml:          kubeconfig: ${{ secrets.PROD_KUBE_CONFIG }}
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-production.yml:          echo "VAULT_TOKEN=${{ secrets.PROD_VAULT_TOKEN }}" >> $GITHUB_ENV
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-production.yml:            --set vault.token=${{ env.VAULT_TOKEN }} \
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-production.yml:            --set vault.token=${{ env.VAULT_TOKEN }} \
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-production.yml:            --set vault.token=${{ env.VAULT_TOKEN }} \
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-production.yml:            --set vault.token=${{ env.VAULT_TOKEN }} \
/home/ubuntu/OjalaHealthcarePlatform/.github/workflows/deploy-production.yml:            --set vault.token=${{ env.VAULT_TOKEN }} \
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/appsettings.json:    "MountPath": "ojala-secrets",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/appsettings.json:    "SecretPath": "api"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Dockerfile:RUN adduser --disabled-password --gecos "" appuser
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Program.cs:    var vaultSecretsPath = "/vault/secrets/appsettings.secrets.json";
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Program.cs:    if (File.Exists(vaultSecretsPath))
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Program.cs:        builder.Configuration.AddJsonFile(vaultSecretsPath, optional: false, reloadOnChange: true);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Program.cs:        Console.WriteLine("Loaded configuration from Vault secrets");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Program.cs:        Console.WriteLine("Vault secrets file not found, using default configuration");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Program.cs:        // For development with docker-compose, we'll use the token-based auth
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Program.cs:        if (Environment.GetEnvironmentVariable("VAULT_TOKEN") != null)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Program.cs:            Console.WriteLine("Using Vault token-based authentication for development");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Program.cs:    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:        Task<string> GetVaultTokenAsync();
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:        private readonly string _serviceAccountTokenPath = "/var/run/secrets/kubernetes.io/serviceaccount/token";
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:        private string _cachedToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:        private DateTime _tokenExpiry = DateTime.MinValue;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:            _vaultPath = Environment.GetEnvironmentVariable("VAULT_PATH") ?? "ojala-secrets";
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:        public async Task<string> GetVaultTokenAsync()
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:            // If we have a cached token that's still valid, return it
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:            if (!string.IsNullOrEmpty(_cachedToken) && DateTime.UtcNow < _tokenExpiry)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:                return _cachedToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:            if (!File.Exists(_serviceAccountTokenPath))
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:                // Not running in Kubernetes, use the root token for development
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:                var devToken = Environment.GetEnvironmentVariable("VAULT_TOKEN");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:                if (!string.IsNullOrEmpty(devToken))
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:                    _cachedToken = devToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:                    _tokenExpiry = DateTime.UtcNow.AddHours(1); // Assume 1 hour validity for dev token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:                    return devToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:                throw new InvalidOperationException("Not running in Kubernetes and no VAULT_TOKEN provided");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:            // Read the Kubernetes service account token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:            var jwt = await File.ReadAllTextAsync(_serviceAccountTokenPath);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:            var token = responseJson.RootElement
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:                .GetProperty("client_token")
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:            _cachedToken = token;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:            _tokenExpiry = DateTime.UtcNow.AddSeconds(leaseDuration * 0.8); // Renew at 80% of lease time
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Api/Extensions/VaultExtensions.cs:            return token;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/appsettings.json:    "MountPath": "ojala-secrets",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/appsettings.json:    "SecretPath": "apigateway"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Dockerfile:RUN adduser --disabled-password --gecos "" appuser
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Program.cs:    var vaultSecretsPath = "/vault/secrets/appsettings.json";
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Program.cs:    if (File.Exists(vaultSecretsPath))
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Program.cs:        builder.Configuration.AddJsonFile(vaultSecretsPath, optional: false, reloadOnChange: true);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Program.cs:        Console.WriteLine("Loaded configuration from Vault secrets");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Program.cs:        Console.WriteLine("Vault secrets file not found, using default configuration");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Program.cs:        options.TokenValidationParameters = new Microsoft.IdentityModel.Tokens.TokenValidationParameters
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:        Task<string> GetVaultTokenAsync();
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:        private readonly string _serviceAccountTokenPath = "/var/run/secrets/kubernetes.io/serviceaccount/token";
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:        private string _cachedToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:        private DateTime _tokenExpiry = DateTime.MinValue;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:            _vaultPath = Environment.GetEnvironmentVariable("VAULT_PATH") ?? "ojala-secrets";
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:        public async Task<string> GetVaultTokenAsync()
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:            // If we have a cached token that's still valid, return it
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:            if (!string.IsNullOrEmpty(_cachedToken) && DateTime.UtcNow < _tokenExpiry)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:                return _cachedToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:            if (!File.Exists(_serviceAccountTokenPath))
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:                // Not running in Kubernetes, use the root token for development
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:                var devToken = Environment.GetEnvironmentVariable("VAULT_TOKEN");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:                if (!string.IsNullOrEmpty(devToken))
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:                    _cachedToken = devToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:                    _tokenExpiry = DateTime.UtcNow.AddHours(1); // Assume 1 hour validity for dev token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:                    return devToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:                throw new InvalidOperationException("Not running in Kubernetes and no VAULT_TOKEN provided");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:            // Read the Kubernetes service account token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:            var jwt = await File.ReadAllTextAsync(_serviceAccountTokenPath);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:            var token = responseJson.RootElement
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:                .GetProperty("client_token")
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:            _cachedToken = token;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:            _tokenExpiry = DateTime.UtcNow.AddSeconds(leaseDuration * 0.8); // Renew at 80% of lease time
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.ApiGateway/Extensions/VaultExtensions.cs:            return token;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Dockerfile:RUN adduser --disabled-password --gecos "" appuser
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:using Microsoft.IdentityModel.Tokens;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:                options.UseSqlServer(Configuration.GetConnectionString("DefaultConnection")));
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:                options.Password.RequiredLength = 8;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:                options.Password.RequireDigit = true;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:                options.Password.RequireNonAlphanumeric = true;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:                options.Password.RequireUppercase = true;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:                options.Password.RequireLowercase = true;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:            .AddDefaultTokenProviders();
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:            var key = Encoding.ASCII.GetBytes(jwtSettings["SecretKey"]);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:                options.SaveToken = true;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:                options.TokenValidationParameters = new TokenValidationParameters
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Startup.cs:            services.AddScoped<ITokenService, TokenService>();
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:using Microsoft.IdentityModel.Tokens;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:using System.IdentityModel.Tokens.Jwt;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:    public interface ITokenService
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:        Task<string> GenerateJwtToken(ApplicationUser user);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:        ClaimsPrincipal ValidateToken(string token);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:    public class TokenService : ITokenService
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:        public TokenService(IConfiguration configuration, UserManager<ApplicationUser> userManager)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:        public async Task<string> GenerateJwtToken(ApplicationUser user)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:            var key = Encoding.ASCII.GetBytes(jwtSettings["SecretKey"]);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:            var tokenDescriptor = new SecurityTokenDescriptor
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:            var tokenHandler = new JwtSecurityTokenHandler();
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:            var token = tokenHandler.CreateToken(tokenDescriptor);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:            return tokenHandler.WriteToken(token);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:        public ClaimsPrincipal ValidateToken(string token)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:            var key = Encoding.ASCII.GetBytes(jwtSettings["SecretKey"]);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:            var tokenHandler = new JwtSecurityTokenHandler();
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:            var validationParameters = new TokenValidationParameters
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/TokenService.cs:                var principal = tokenHandler.ValidateToken(token, validationParameters, out _);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:        Task<AuthResult> RefreshTokenAsync(string refreshToken);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:        private readonly ITokenService _tokenService;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            ITokenService tokenService)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            _tokenService = tokenService;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            var result = await _userManager.CreateAsync(user, model.Password);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            // Generate token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            var token = await _tokenService.GenerateJwtToken(user);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:                Token = token,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:                    Message = "Invalid email or password"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            // Check password
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            var result = await _signInManager.CheckPasswordSignInAsync(user, model.Password, false);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:                    Message = "Invalid email or password"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            // Generate token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            var token = await _tokenService.GenerateJwtToken(user);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:                Token = token,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:        public async Task<AuthResult> RefreshTokenAsync(string refreshToken)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            // In a real implementation, you would validate the refresh token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            // and issue a new access token if valid
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            var principal = _tokenService.ValidateToken(refreshToken);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:                    Message = "Invalid refresh token"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:                    Message = "Invalid refresh token"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            // Generate new token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            var token = await _tokenService.GenerateJwtToken(user);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:                Token = token,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            // The client should discard the token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Services/AuthService.cs:            // However, you could implement token revocation or blacklisting here
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Controllers/AuthController.cs:        public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequest model)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Controllers/AuthController.cs:            var result = await _authService.RefreshTokenAsync(model.RefreshToken);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Models/AuthModels.cs:        public string? Password { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Models/AuthModels.cs:        public string? ConfirmPassword { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Models/AuthModels.cs:        public string? Password { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Models/AuthModels.cs:    public class RefreshTokenRequest
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Models/AuthModels.cs:        public string? RefreshToken { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Models/AuthModels.cs:        public string? Token { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Models/AuthModels.cs:        public string? RefreshToken { get; set; }
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Program.cs:    var vaultSecretsPath = "/vault/secrets/appsettings.secrets.json";
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Program.cs:    if (File.Exists(vaultSecretsPath))
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Program.cs:        builder.Configuration.AddJsonFile(vaultSecretsPath, optional: false, reloadOnChange: true);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Program.cs:        Console.WriteLine("Loaded configuration from Vault secrets");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Program.cs:        Console.WriteLine("Vault secrets file not found, using default configuration");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Program.cs:        // For development with docker-compose, we'll use the token-based auth
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Program.cs:        if (Environment.GetEnvironmentVariable("VAULT_TOKEN") != null)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Program.cs:            Console.WriteLine("Using Vault token-based authentication for development");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/appsettings.json:    "MountPath": "ojala-secrets",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/appsettings.json:    "SecretPath": "identity"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:        Task<string> GetVaultTokenAsync();
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:        private readonly string _serviceAccountTokenPath = "/var/run/secrets/kubernetes.io/serviceaccount/token";
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:        private string _cachedToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:        private DateTime _tokenExpiry = DateTime.MinValue;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:            _vaultPath = Environment.GetEnvironmentVariable("VAULT_PATH") ?? "ojala-secrets";
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:        public async Task<string> GetVaultTokenAsync()
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:            // If we have a cached token that's still valid, return it
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:            if (!string.IsNullOrEmpty(_cachedToken) && DateTime.UtcNow < _tokenExpiry)
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:                return _cachedToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:            if (!File.Exists(_serviceAccountTokenPath))
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:                // Not running in Kubernetes, use the root token for development
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:                var devToken = Environment.GetEnvironmentVariable("VAULT_TOKEN");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:                if (!string.IsNullOrEmpty(devToken))
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:                    _cachedToken = devToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:                    _tokenExpiry = DateTime.UtcNow.AddHours(1); // Assume 1 hour validity for dev token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:                    return devToken;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:                throw new InvalidOperationException("Not running in Kubernetes and no VAULT_TOKEN provided");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:            // Read the Kubernetes service account token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:            var jwt = await File.ReadAllTextAsync(_serviceAccountTokenPath);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:            var token = responseJson.RootElement
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:                .GetProperty("client_token")
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:            _cachedToken = token;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:            _tokenExpiry = DateTime.UtcNow.AddSeconds(leaseDuration * 0.8); // Renew at 80% of lease time
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Identity/Extensions/VaultExtensions.cs:            return token;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Data/OjalaDbContextFactory.cs:            var connectionString = configuration.GetConnectionString("DefaultConnection");
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.Data/OjalaDbContextFactory.cs:            optionsBuilder.UseSqlServer(connectionString);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/forecasting.js:const { authenticateToken, checkRole } = require('../../auth-module/core/auth');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/forecasting.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/forecasting.js:  authenticateToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/forecasting.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/forecasting.js:  authenticateToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/forecasting.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/forecasting.js:  authenticateToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/health-score.js:const { authenticateToken, checkRole } = require('../../auth-module/core/auth');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/health-score.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/health-score.js:router.post('/predict', authenticateToken, checkRole(['clinician', 'researcher']), async (req, res) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics.js:const { authenticateToken, checkRole } = require('../../auth-module/core/auth');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics.js:  authenticateToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics.js:  authenticateToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics.js:  authenticateToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics.js:  authenticateToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/Dockerfile:RUN adduser --disabled-password --gecos "" appuser
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/Dockerfile:# Create directory for Vault secrets
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/Dockerfile:RUN mkdir -p /vault/secrets && chown -R appuser:appuser /vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/appsettings.json:    "MountPath": "ojala-secrets",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/appsettings.json:    "SecretPath": "ai-engine"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/appsettings.json:  "ConnectionStrings": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/appsettings.json:    "DefaultConnection": "Server=postgres;Database=ojala_ai_engine;User Id=postgres;Password=postgres;"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/app.py:    config_path = os.path.join('/vault/secrets', 'appsettings.json')
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics-analysis.js:        maxTokens: 1500
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/omics-analysis.js:          'Authorization': 'Bearer internal-service-token' // This would be replaced with a proper token in production
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/package-lock.json:    "node_modules/js-tokens": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/package-lock.json:      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/package-lock.json:        "js-tokens": "^3.0.0 || ^4.0.0"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/chat.js:const { authenticateToken } = require('../../auth-module/core/auth');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/chat.js:  apiKey: process.env.OPENAI_API_KEY,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/chat.js: *               maxTokens:
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/chat.js: *                 description: Maximum tokens in response
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/chat.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/chat.js:router.post('/chat', authenticateToken, async (req, res) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/chat.js:    const { prompt, systemMessage, model, temperature, maxTokens } = req.body;
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/chat.js:      max_tokens: maxTokens || 1000,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/tests/chat.test.js:            maxTokens: 100
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/tests/chat.test.js:            maxTokens: 100
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/routes/telemetryAnalyticsRoutes.js:  apiKey: process.env.OPENAI_API_KEY || 'sk-demo-key'
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/routes/telemetryAnalyticsRoutes.js:const INFLUX_TOKEN = process.env.INFLUX_TOKEN || 'ojala-influxdb-token';
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/routes/telemetryAnalyticsRoutes.js:  token: INFLUX_TOKEN
/home/ubuntu/OjalaHealthcarePlatform/src/backend/ai-engine/routes/telemetryAnalyticsRoutes.js:      max_tokens: 1000,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/assistant.js:const { authenticateToken, checkRole } = require('../../auth-module/core/auth');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/assistant.js:  apiKey: process.env.OPENAI_API_KEY || 'sk-your-api-key-here',
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/assistant.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/assistant.js:  authenticateToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/assistant.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/assistant.js:  authenticateToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/assistant.js: *         description: Unauthorized - missing or invalid token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/assistant.js:  authenticateToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/appsettings.json:    "MountPath": "ojala-secrets",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/appsettings.json:    "SecretPath": "nurse-assistant"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/appsettings.json:  "ConnectionStrings": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/appsettings.json:    "DefaultConnection": "Server=postgres;Database=ojala_nurse_assistant;User Id=postgres;Password=postgres;"
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/server.js:  const configPath = path.join('/vault/secrets', 'appsettings.json');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/nurse-assistant/alertsRouter.js:const { authenticateToken, checkRole } = require('../../auth-module/core/auth');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/package.json:    "jsonwebtoken": "^9.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/server.js:const jwt = require('jsonwebtoken');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/routes/deviceRoutes.js:  authMiddleware.verifyDeviceToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/routes/deviceRoutes.js:  authMiddleware.verifyDeviceToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/routes/deviceRoutes.js:  authMiddleware.verifyToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/routes/deviceRoutes.js:  authMiddleware.verifyToken,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/deviceController.js:const jwt = require('jsonwebtoken');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/deviceController.js:// Secret key for JWT - should be in environment variables in production
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/deviceController.js:const JWT_SECRET = process.env.JWT_SECRET || 'ojala-device-secret-key';
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/deviceController.js:    // Create a JWT token for the device
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/deviceController.js:    const token = jwt.sign(
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/deviceController.js:      JWT_SECRET, 
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/deviceController.js:      { expiresIn: '1y' } // Tokens for devices can have longer expiration
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/deviceController.js:    // Return the device ID and token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/deviceController.js:      token,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/telemetryController.js:    const patientId = req.device.patientId; // From the JWT token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/controllers/healthkitController.js:    const patientId = req.device.patientId; // From the JWT token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:const jwt = require('jsonwebtoken');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:// Secret key for JWT - should be in environment variables in production
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:const JWT_SECRET = process.env.JWT_SECRET || 'ojala-device-secret-key';
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:// Middleware to verify device JWT token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:exports.verifyDeviceToken = (req, res, next) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    // Get token from Authorization header
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:      return res.status(401).json({ error: 'No token provided' });
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    const token = authHeader.split(' ')[1];
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    // Verify the token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    const decoded = jwt.verify(token, JWT_SECRET);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    // Check if it's a device token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:      return res.status(403).json({ error: 'Invalid token type' });
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    // Check if the device ID in the token matches the one in the URL
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:      return res.status(403).json({ error: 'Token does not match device ID' });
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    // Add the decoded token to the request object
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    if (error.name === 'TokenExpiredError') {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:      return res.status(401).json({ error: 'Token expired' });
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    if (error.name === 'JsonWebTokenError') {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:      return res.status(401).json({ error: 'Invalid token' });
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:// Middleware to verify user JWT token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:exports.verifyToken = (req, res, next) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    // Get token from Authorization header
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:      return res.status(401).json({ error: 'No token provided' });
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    const token = authHeader.split(' ')[1];
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    // Verify the token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    const decoded = jwt.verify(token, JWT_SECRET);
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    // Add the decoded token to the request object
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    if (error.name === 'TokenExpiredError') {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:      return res.status(401).json({ error: 'Token expired' });
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:    if (error.name === 'JsonWebTokenError') {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/middleware/authMiddleware.js:      return res.status(401).json({ error: 'Invalid token' });
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/config/influxdb.js:const INFLUX_TOKEN = process.env.INFLUX_TOKEN || 'ojala-influxdb-token';
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/config/influxdb.js:  token: INFLUX_TOKEN
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/Dockerfile:# Create directory for Vault secrets
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/Dockerfile:RUN mkdir -p /vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/connectors/vendorConnectors.js:    apiKey: process.env.BP_CUFF_API_KEY || 'demo-key',
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/connectors/vendorConnectors.js:    apiKey: process.env.PULSE_OX_API_KEY || 'demo-key',
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/connectors/vendorConnectors.js:    apiKey: process.env.CGM_API_KEY || 'demo-key',
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/connectors/vendorConnectors.js:    apiKey: process.env.SCALES_API_KEY || 'demo-key',
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/connectors/vendorConnectors.js:    // Get device token from environment or database
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/connectors/vendorConnectors.js:    const deviceToken = process.env[`DEVICE_${deviceId}_TOKEN`] || 'demo-token';
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/connectors/vendorConnectors.js:        'Authorization': `Bearer ${deviceToken}`,
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/tests/deviceRoutes.test.js:    it('should register a new device and return a token', async () => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/tests/deviceRoutes.test.js:          token: 'jwt-token-123'
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/tests/deviceRoutes.test.js:      expect(response.body.token).toBe('jwt-token-123');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/package-lock.json:        "jsonwebtoken": "^9.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/package-lock.json:        "js-tokens": "^4.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/package-lock.json:    "node_modules/js-tokens": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/package-lock.json:      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/package-lock.json:    "node_modules/jsonwebtoken": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/package-lock.json:      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/package-lock.json:    "node_modules/jsonwebtoken/node_modules/ms": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.DeviceGateway/package-lock.json:    "node_modules/jsonwebtoken/node_modules/semver": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.TelemetryProcessor/processor.js:const INFLUX_TOKEN = process.env.INFLUX_TOKEN || 'ojala-influxdb-token';
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.TelemetryProcessor/processor.js:  token: INFLUX_TOKEN
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.TelemetryProcessor/Dockerfile:# Create directory for Vault secrets
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.TelemetryProcessor/Dockerfile:RUN mkdir -p /vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.TelemetryProcessor/package-lock.json:        "js-tokens": "^4.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.TelemetryProcessor/package-lock.json:    "node_modules/js-tokens": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.TelemetryProcessor/package-lock.json:      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/package.json:    "jsonwebtoken": "^9.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/server.js:const jwt = require('jsonwebtoken');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/server.js:const JWT_SECRET = process.env.JWT_SECRET || 'ojala-jwt-secret';
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/server.js:    // Get token from query parameter or Authorization header
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/server.js:    const token = socket.handshake.query.token || 
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/server.js:    if (!token) {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/server.js:      return next(new Error('Authentication token is required'));
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/server.js:    // Verify JWT token
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/server.js:    jwt.verify(token, JWT_SECRET, (err, decoded) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/server.js:        return next(new Error('Invalid authentication token'));
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:const jwt = require('jsonwebtoken');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:jest.mock('jsonwebtoken', () => ({
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:    test('Should reject connection without token', (done) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:        expect(err.message).toBe('Authentication token is required');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:    test('Should reject connection with invalid token', (done) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:      jwt.verify.mockImplementation((token, secret, callback) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:        callback(new Error('Invalid token'));
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:          query: { token: 'invalid-token' },
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:        expect(err.message).toBe('Invalid authentication token');
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:      jwt.verify.mockImplementation((token, secret, callback) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:          query: { token: 'valid-token' },
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:    test('Should accept connection with valid token and role', (done) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:      jwt.verify.mockImplementation((token, secret, callback) => {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/tests/server.test.js:          query: { token: 'valid-token' },
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/package-lock.json:        "jsonwebtoken": "^9.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/package-lock.json:        "js-tokens": "^4.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/package-lock.json:    "node_modules/js-tokens": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/package-lock.json:      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/package-lock.json:    "node_modules/jsonwebtoken": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/package-lock.json:      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/package-lock.json:    "node_modules/jsonwebtoken/node_modules/ms": {
/home/ubuntu/OjalaHealthcarePlatform/src/backend/Ojala.AlertsStreamer/package-lock.json:    "node_modules/jsonwebtoken/node_modules/semver": {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:  const [token, setToken] = useState(localStorage.getItem('token'));
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:      if (token) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:          // Check if token is expired
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:          const decodedToken = jwt_decode(token);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:          if (decodedToken.exp < currentTime) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:            // Token is expired
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:            axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:  }, [token]);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:  const login = async (email, password) => {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:      const response = await axios.post('/api/auth/login', { email, password });
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:      const { token, user } = response.data;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:      localStorage.setItem('token', token);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:      setToken(token);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:    localStorage.removeItem('token');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/contexts/AuthContext.js:    setToken(null);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Login.js:  const [password, setPassword] = useState('');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Login.js:    if (!email || !password) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Login.js:      setError('Please enter both email and password');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Login.js:      const result = await login(email, password);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Login.js:        label="Password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Login.js:        type="password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Login.js:        value={password}
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Login.js:        onChange={(e) => setPassword(e.target.value)}
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:    password: '',
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:    confirmPassword: ''
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:    if (!formData.firstName || !formData.lastName || !formData.email || !formData.password) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:    if (formData.password !== formData.confirmPassword) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:      setError('Passwords do not match');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:    if (formData.password.length < 8) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:      setError('Password must be at least 8 characters long');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:        password: formData.password
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:        name="password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:        label="Password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:        type="password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:        value={formData.password}
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:        helperText="Password must be at least 8 characters long"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:        name="confirmPassword"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:        label="Confirm Password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:        type="password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/pages/Register.js:        value={formData.confirmPassword}
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:// Add a request interceptor to add auth token to requests
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:    const token = localStorage.getItem('token');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:    if (token) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:      config.headers['Authorization'] = `Bearer ${token}`;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:// Add a response interceptor to handle token refresh
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:    // If the error is 401 and we haven't already tried to refresh the token
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:        // Try to refresh the token
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:        const refreshToken = localStorage.getItem('refreshToken');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:        if (!refreshToken) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:          // No refresh token, redirect to login
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:          refreshToken
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:          // Save the new token
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:          localStorage.setItem('token', response.data.token);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:          localStorage.setItem('refreshToken', response.data.refreshToken);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:          api.defaults.headers.common['Authorization'] = `Bearer ${response.data.token}`;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:  login: (email, password) => {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/src/services/api.js:    return api.post('/api/auth/login', { email, password });
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/Dockerfile:RUN adduser --disabled-password --gecos "" appuser
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/package-lock.json:        "js-tokens": "^4.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/package-lock.json:    "node_modules/js-tokens": {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/package-lock.json:      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.Web/package-lock.json:        "js-tokens": "^3.0.0 || ^4.0.0"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/Dockerfile:RUN adduser --disabled-password --gecos "" appuser
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/package-lock.json:        "js-tokens": "^4.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/package-lock.json:    "node_modules/js-tokens": {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/package-lock.json:      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/package-lock.json:        "js-tokens": "^3.0.0 || ^4.0.0"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/pages/OmicsInsights.js:            'Authorization': `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/pages/Telehealth.js:            'Authorization': `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/pages/Telehealth.js:            'Authorization': `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/components/FileUploadComponent.js:            'Authorization': `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/components/TelemetryHistory.js:            'Authorization': `Bearer ${localStorage.getItem('token')}`,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:  const [token, setToken] = useState(localStorage.getItem('authToken'));
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:    if (token) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:        const decoded = jwtDecode(token);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:        // TODO: Add token expiration check
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:        // axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:        console.error('Invalid token:', error);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:        localStorage.removeItem('authToken');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:        setToken(null);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:      // Clear default headers if no token
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:  }, [token]);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:  const login = (newToken) => {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:    localStorage.setItem('authToken', newToken);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:    setToken(newToken);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:    localStorage.removeItem('authToken');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:    setToken(null);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:    token,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/contexts/AuthContext.js:    isAuthenticated: !!token,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/Login.js:  const [password, setPassword] = useState('');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/Login.js:        body: JSON.stringify({ email, password }),
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/Login.js:      if (data.token) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/Login.js:        login(data.token); // Update auth context
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/Login.js:        throw new Error('Token not received');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/Login.js:          <label htmlFor="password">Password:</label>
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/Login.js:            type="password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/Login.js:            id="password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/Login.js:            value={password}
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/src/Login.js:            onChange={(e) => setPassword(e.target.value)}
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/cypress/integration/telehealth.spec.js:        token: 'test-token'
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/cypress/integration/telemetry-visualization.spec.js:        token: 'fake-jwt-token',
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/Ojala.PatientPortal/cypress/integration/telemetry-visualization.spec.js:    cy.get('input[name="password"]').type('password');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/package-lock.json:        "js-tokens": "^4.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/package-lock.json:    "node_modules/js-tokens": {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/package-lock.json:      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/package-lock.json:        "js-tokens": "^3.0.0 || ^4.0.0"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/TelehealthScheduleList.js:            'Authorization': `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/TelehealthScheduleList.js:            'Authorization': `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/TelehealthRoom.js:            'Authorization': `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/TelehealthRoom.js:      // Initialize Twilio with the token from the response
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/TelehealthRoom.js:      if (response.data.twilioToken) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/TelehealthRoom.js:        initializeTwilio(response.data.twilioToken);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/TelehealthRoom.js:        setError('No Twilio token available for this session.');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/TelehealthRoom.js:  const initializeTwilio = async (token) => {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/TelehealthRoom.js:            'Authorization': `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/TelehealthRoom.js:              'Authorization': `Bearer ${localStorage.getItem('token')}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/CohortTelemetryGrid.js:            'Authorization': `Bearer ${localStorage.getItem('token')}`,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/CohortTelemetryGrid.js:                  'Authorization': `Bearer ${localStorage.getItem('token')}`,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/CohortTelemetryGrid.js:                        'Authorization': `Bearer ${localStorage.getItem('token')}`,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/EscalatedAlertsPanel.js:  const { token } = useAuth();
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/EscalatedAlertsPanel.js:          'Authorization': `Bearer ${token}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/EscalatedAlertsPanel.js:          'Authorization': `Bearer ${token}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/EscalatedAlertsPanel.js:  }, [API_URL, token]);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/EscalatedAlertsPanel.js:          'Authorization': `Bearer ${token}`,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/EscalatedAlertsPanel.js:    if (!token) return;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/EscalatedAlertsPanel.js:      query: { token },
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/components/EscalatedAlertsPanel.js:  }, [token, ALERTS_STREAMER_URL, fetchAlerts]);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/Login.js:  const [password, setPassword] = useState('');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/Login.js:        body: JSON.stringify({ email, password }),
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/Login.js:      if (data.token) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/Login.js:        login(data.token); // Update auth context
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/Login.js:        throw new Error('Token not received');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/Login.js:          <label htmlFor="password">Password:</label>
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/Login.js:            type="password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/Login.js:            id="password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/Login.js:            value={password}
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/Login.js:            onChange={(e) => setPassword(e.target.value)}
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/tests/EscalatedAlertsPanel.test.js:  const mockToken = 'mock-token';
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/tests/EscalatedAlertsPanel.test.js:    useAuth.mockReturnValue({ token: mockToken });
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/tests/EscalatedAlertsPanel.test.js:            'Authorization': `Bearer ${mockToken}`,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/tests/EscalatedAlertsPanel.test.js:  test('connects to WebSocket with token', async () => {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/tests/EscalatedAlertsPanel.test.js:        query: { token: mockToken },
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:  const [token, setToken] = useState(localStorage.getItem('authToken'));
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:    if (token) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:        const decoded = jwtDecode(token);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:        // TODO: Add token expiration check
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:        // axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:        console.error('Invalid token:', error);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:        localStorage.removeItem('authToken');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:        setToken(null);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:      // Clear default headers if no token
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:  }, [token]);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:  const login = (newToken) => {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:    localStorage.setItem('authToken', newToken);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:    setToken(newToken);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:    localStorage.removeItem('authToken');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:    setToken(null);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:    token,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/src/contexts/AuthContext.js:    isAuthenticated: !!token,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/Dockerfile:RUN adduser --disabled-password --gecos "" appuser
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/cypress/integration/telehealth-schedule.spec.js:        twilioToken: 'mock-token'
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/cypress/integration/cohort-telemetry-grid.spec.js:        token: 'fake-jwt-token',
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/rn-dashboard/cypress/integration/cohort-telemetry-grid.spec.js:    cy.get('input[name="password"]').type('password');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/Dockerfile:RUN adduser --disabled-password --gecos "" appuser
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:  const [token, setToken] = useState(localStorage.getItem('authToken'));
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:    if (token) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:        const decoded = jwtDecode(token);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:        // TODO: Add token expiration check
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:        // axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:        console.error('Invalid token:', error);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:        localStorage.removeItem('authToken');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:        setToken(null);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:      // Clear default headers if no token
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:  }, [token]);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:  const login = (newToken) => {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:    localStorage.setItem('authToken', newToken);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:    setToken(newToken);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:    localStorage.removeItem('authToken');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:    setToken(null);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:    token,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/contexts/AuthContext.js:    isAuthenticated: !!token,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/Login.js:  const [password, setPassword] = useState('');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/Login.js:        body: JSON.stringify({ email, password }),
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/Login.js:      if (data.token) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/Login.js:        login(data.token); // Update auth context
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/Login.js:        throw new Error('Token not received');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/Login.js:          <label htmlFor="password">Password:</label>
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/Login.js:            type="password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/Login.js:            id="password"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/Login.js:            value={password}
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/src/Login.js:            onChange={(e) => setPassword(e.target.value)}
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/package-lock.json:        "js-tokens": "^4.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/package-lock.json:    "node_modules/js-tokens": {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/package-lock.json:      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/employer-dashboard/package-lock.json:        "js-tokens": "^3.0.0 || ^4.0.0"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/payment.js:      let gatewayToken = null;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/payment.js:        gatewayToken = gatewayResult.id;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/payment.js:        gatewayToken,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/payment.js:      if (this.stripeService && paymentMethod.gatewayToken) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/payment.js:        await this.stripeService.deletePaymentMethod(paymentMethod.gatewayToken);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/payment.js:      if (this.stripeService && paymentMethod.gatewayToken) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/payment.js:          paymentMethodId: paymentMethod.gatewayToken,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/Dockerfile:RUN adduser --disabled-password --gecos "" appuser
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/src/components/HealthKitIntegration.js:      // Get device token from AsyncStorage
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/src/components/HealthKitIntegration.js:      const deviceToken = await AsyncStorage.getItem(`device_token_${deviceId}`);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/src/components/HealthKitIntegration.js:      if (!deviceToken) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/src/components/HealthKitIntegration.js:        throw new Error('Device token not found. Please register the device first.');
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/src/components/HealthKitIntegration.js:            'Authorization': `Bearer ${deviceToken}`,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/package-lock.json:        "js-tokens": "^4.0.0",
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/package-lock.json:    "node_modules/js-tokens": {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/package-lock.json:      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/patient-app/package-lock.json:        "js-tokens": "^3.0.0 || ^4.0.0"
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/signaling.js:   * @param {string} options.token - Authentication token
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/signaling.js:    const { sessionId, participantId, token } = options;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/signaling.js:    if (!sessionId || !participantId || !token) {
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/signaling.js:      return Promise.reject(new Error('Session ID, Participant ID, and Token are required'));
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/signaling.js:        const url = `${this.config.signalServerUrl}?sessionId=${sessionId}&participantId=${participantId}&token=${token}`;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/md-dashboard/src/components/EscalatedAlertsPanel.js:  const { token } = useAuth();
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/md-dashboard/src/components/EscalatedAlertsPanel.js:          'Authorization': `Bearer ${token}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/md-dashboard/src/components/EscalatedAlertsPanel.js:          'Authorization': `Bearer ${token}`
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/md-dashboard/src/components/EscalatedAlertsPanel.js:  }, [API_URL, token]);
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/md-dashboard/src/components/EscalatedAlertsPanel.js:          'Authorization': `Bearer ${token}`,
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/md-dashboard/src/components/EscalatedAlertsPanel.js:    if (!token) return;
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/md-dashboard/src/components/EscalatedAlertsPanel.js:      query: { token },
/home/ubuntu/OjalaHealthcarePlatform/src/frontend/md-dashboard/src/components/EscalatedAlertsPanel.js:  }, [token, ALERTS_STREAMER_URL, fetchAlerts]);
/home/ubuntu/OjalaHealthcarePlatform/scripts/deploy-local.sh:export VAULT_TOKEN="root-token-for-dev"
/home/ubuntu/OjalaHealthcarePlatform/scripts/deploy-local.sh:echo -e "VAULT_TOKEN=******** (masked for security)"
/home/ubuntu/OjalaHealthcarePlatform/scripts/integration-test.sh:# Check if the .env file is created with the OPENAI_API_KEY
/home/ubuntu/OjalaHealthcarePlatform/scripts/integration-test.sh:if [ -f "/vault/secrets/.env" ]; then
/home/ubuntu/OjalaHealthcarePlatform/scripts/test-emergency-alert-system.sh:TOKEN="eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlRlc3QgVXNlciIsInJvbGVzIjpbIm51cnNlIiwiZG9jdG9yIl0sImlhdCI6MTUxNjIzOTAyMn0.XbPfbIHMI6arZ3Y922BhjWgQzWXcXNrz0ogtVhfEd2o"
/home/ubuntu/OjalaHealthcarePlatform/scripts/test-emergency-alert-system.sh:  -H "Authorization: Bearer $TOKEN" \
/home/ubuntu/OjalaHealthcarePlatform/scripts/test-emergency-alert-system.sh:  -H "Authorization: Bearer $TOKEN" \
/home/ubuntu/OjalaHealthcarePlatform/scripts/test-emergency-alert-system.sh:  -H "Authorization: Bearer $TOKEN" \
/home/ubuntu/OjalaHealthcarePlatform/scripts/test-emergency-alert-system.sh:    -H "Authorization: Bearer $TOKEN" \
/home/ubuntu/OjalaHealthcarePlatform/scripts/test-emergency-alert-system.sh:const token = '$TOKEN';
/home/ubuntu/OjalaHealthcarePlatform/scripts/test-emergency-alert-system.sh:  query: { token },
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_DEV_ROOT_TOKEN_ID=ojala-root-token
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      "vault server -dev -dev-root-token-id=ojala-root-token &
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      VAULT_ADDR=http://127.0.0.1:8200 VAULT_TOKEN=ojala-root-token /vault/vault-init.sh &&
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - SA_PASSWORD=OjalaP@ssw0rd!
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - DOCKER_INFLUXDB_INIT_PASSWORD=OjalaP@ssw0rd!
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=ojala-influxdb-token
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_TOKEN=ojala-root-token
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_PATH=ojala-secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - INFLUX_TOKEN=ojala-influxdb-token
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - JWT_SECRET=ojala-device-secret-key
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - device_gateway_vault:/vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - device_gateway_vault:/vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_TOKEN=ojala-root-token
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_PATH=ojala-secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - apigateway_vault:/vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - apigateway_vault:/vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_TOKEN=ojala-root-token
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_PATH=ojala-secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - api_vault:/vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - api_vault:/vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_TOKEN=ojala-root-token
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_PATH=ojala-secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - identity_vault:/vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - identity_vault:/vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_TOKEN=ojala-root-token
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_PATH=ojala-secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - INFLUX_TOKEN=ojala-influxdb-token
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - ai_engine_vault:/vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_TOKEN=ojala-root-token
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - VAULT_PATH=ojala-secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - nurse_assistant_vault:/vault/secrets
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - JWT_SECRET=ojala-jwt-secret
/home/ubuntu/OjalaHealthcarePlatform/docker-compose.yml:      - INFLUX_TOKEN=ojala-influxdb-token
/home/ubuntu/OjalaHealthcarePlatform/vault/api/agent.hcl:  method "token" {
/home/ubuntu/OjalaHealthcarePlatform/vault/api/agent.hcl:    mount_path = "auth/token"
/home/ubuntu/OjalaHealthcarePlatform/vault/api/agent.hcl:      token = "ojala-root-token"
/home/ubuntu/OjalaHealthcarePlatform/vault/api/agent.hcl:      path = "/vault/secrets/token"
/home/ubuntu/OjalaHealthcarePlatform/vault/api/agent.hcl:  source      = "/vault/config/secrets.tmpl"
/home/ubuntu/OjalaHealthcarePlatform/vault/api/agent.hcl:  destination = "/vault/secrets/appsettings.json"
/home/ubuntu/OjalaHealthcarePlatform/vault/api/templates/secrets.tmpl:{{ with secret "ojala-secrets/api" }}
/home/ubuntu/OjalaHealthcarePlatform/vault/api/templates/secrets.tmpl:  "ConnectionStrings": {
/home/ubuntu/OjalaHealthcarePlatform/vault/api/templates/secrets.tmpl:    "SecretKey": "{{ .Data.data.jwt_secret_key }}",
/home/ubuntu/OjalaHealthcarePlatform/vault/api/appsettings.tpl:{{- with secret "ojala-secrets/api" -}}
/home/ubuntu/OjalaHealthcarePlatform/vault/api/appsettings.tpl:  "ConnectionStrings": {
/home/ubuntu/OjalaHealthcarePlatform/vault/api/appsettings.tpl:    "DefaultConnection": "{{ .Data.data.ConnectionStrings_DefaultConnection }}"
/home/ubuntu/OjalaHealthcarePlatform/vault/api/appsettings.tpl:    "SecretKey": "{{ .Data.data.JwtSettings_SecretKey }}",
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/templates/secrets.tmpl:{{ with secret "ojala-secrets/apigateway" }}
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/templates/secrets.tmpl:  "ConnectionStrings": {
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/templates/secrets.tmpl:    "SecretKey": "{{ .Data.data.jwt_secret_key }}",
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/agent.hcl:  method "token" {
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/agent.hcl:    mount_path = "auth/token"
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/agent.hcl:      token = "ojala-root-token"
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/agent.hcl:      path = "/vault/secrets/token"
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/agent.hcl:  source      = "/vault/config/secrets.tmpl"
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/agent.hcl:  destination = "/vault/secrets/appsettings.json"
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/appsettings.tpl:{{- with secret "ojala-secrets/apigateway" -}}
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/appsettings.tpl:  "ConnectionStrings": {
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/appsettings.tpl:    "DefaultConnection": "{{ .Data.data.ConnectionStrings_DefaultConnection }}"
/home/ubuntu/OjalaHealthcarePlatform/vault/apigateway/appsettings.tpl:    "SecretKey": "{{ .Data.data.JwtSettings_SecretKey }}",
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/templates/secrets.tmpl:{{ with secret "ojala-secrets/identity" }}
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/templates/secrets.tmpl:  "ConnectionStrings": {
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/templates/secrets.tmpl:    "SecretKey": "{{ .Data.data.jwt_secret_key }}",
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/agent.hcl:  method "token" {
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/agent.hcl:    mount_path = "auth/token"
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/agent.hcl:      token = "ojala-root-token"
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/agent.hcl:      path = "/vault/secrets/token"
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/agent.hcl:  source      = "/vault/config/secrets.tmpl"
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/agent.hcl:  destination = "/vault/secrets/appsettings.json"
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/appsettings.tpl:{{- with secret "ojala-secrets/identity" -}}
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/appsettings.tpl:  "ConnectionStrings": {
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/appsettings.tpl:    "DefaultConnection": "{{ .Data.data.ConnectionStrings_DefaultConnection }}"
/home/ubuntu/OjalaHealthcarePlatform/vault/identity/appsettings.tpl:    "SecretKey": "{{ .Data.data.JwtSettings_SecretKey }}",
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:# Initialize Vault with secrets for the Ojala Healthcare Platform
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  token_reviewer_jwt="/var/run/secrets/kubernetes.io/serviceaccount/token" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:path "ojala-secrets/data/api" {
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:path "ojala-secrets/data/apigateway" {
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:path "ojala-secrets/data/identity" {
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:path "ojala-secrets/data/ai-engine" {
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:path "ojala-secrets/data/nurse-assistant" {
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:# Enable KV secrets engine
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:vault secrets enable -version=2 kv
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:vault secrets enable -path=ojala-secrets kv-v2
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:# Create secrets for original services
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:vault kv put ojala-secrets/api \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  connection_string="Server=sqlserver;Database=OjalaHealthcarePlatform;User Id=sa;Password=OjalaP@ssw0rd!;TrustServerCertificate=True" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  jwt_secret_key="YourSuperSecretKeyHere_AtLeast32Characters" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:vault kv put ojala-secrets/apigateway \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  connection_string="Server=sqlserver;Database=OjalaHealthcarePlatform;User Id=sa;Password=OjalaP@ssw0rd!;TrustServerCertificate=True" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  jwt_secret_key="YourSuperSecretKeyHere_AtLeast32Characters" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:vault kv put ojala-secrets/identity \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  connection_string="Server=sqlserver;Database=OjalaHealthcarePlatform;User Id=sa;Password=OjalaP@ssw0rd!;TrustServerCertificate=True" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  jwt_secret_key="YourSuperSecretKeyHere_AtLeast32Characters" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:# Create secrets for new microservices
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:vault kv put ojala-secrets/ai-engine \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  connection_string="Server=sqlserver;Database=OjalaHealthcarePlatform;User Id=sa;Password=OjalaP@ssw0rd!;TrustServerCertificate=True" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  openai_api_key="sk-youropenaiapikeyhere" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  huggingface_api_key="hf_yourhfapikeyhere" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  max_tokens=2048 \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:vault kv put ojala-secrets/nurse-assistant \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  connection_string="Server=sqlserver;Database=OjalaHealthcarePlatform;User Id=sa;Password=OjalaP@ssw0rd!;TrustServerCertificate=True" \
/home/ubuntu/OjalaHealthcarePlatform/vault/vault-init.sh:  notification_api_key="na_yourapikey" \
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/templates/secrets.tmpl:{{ with secret "ojala-secrets/ai-engine" }}
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/templates/secrets.tmpl:  "ConnectionStrings": {
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/templates/secrets.tmpl:    "OpenAI": "{{ .Data.data.OPENAI_API_KEY }}",
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/templates/secrets.tmpl:    "HuggingFace": "{{ .Data.data.huggingface_api_key }}"
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/templates/secrets.tmpl:    "MaxTokens": {{ .Data.data.max_tokens }}
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/templates/env.tmpl:{{ with secret "ojala-secrets/ai-engine" -}}
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/templates/env.tmpl:OPENAI_API_KEY={{ .Data.data.OPENAI_API_KEY }}
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/agent.hcl:  method "token" {
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/agent.hcl:    mount_path = "auth/token"
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/agent.hcl:      token = "ojala-root-token"
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/agent.hcl:      path = "/vault/secrets/token"
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/agent.hcl:  source      = "/vault/config/secrets.tmpl"
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/agent.hcl:  destination = "/vault/secrets/appsettings.json"
/home/ubuntu/OjalaHealthcarePlatform/vault/ai-engine/agent.hcl:  destination = "/vault/secrets/.env"
/home/ubuntu/OjalaHealthcarePlatform/vault/nurse-assistant/templates/secrets.tmpl:{{ with secret "ojala-secrets/nurse-assistant" }}
/home/ubuntu/OjalaHealthcarePlatform/vault/nurse-assistant/templates/secrets.tmpl:  "ConnectionStrings": {
/home/ubuntu/OjalaHealthcarePlatform/vault/nurse-assistant/templates/secrets.tmpl:    "NotificationService": "{{ .Data.data.notification_api_key }}"
/home/ubuntu/OjalaHealthcarePlatform/vault/nurse-assistant/agent.hcl:  method "token" {
/home/ubuntu/OjalaHealthcarePlatform/vault/nurse-assistant/agent.hcl:    mount_path = "auth/token"
/home/ubuntu/OjalaHealthcarePlatform/vault/nurse-assistant/agent.hcl:      token = "ojala-root-token"
/home/ubuntu/OjalaHealthcarePlatform/vault/nurse-assistant/agent.hcl:      path = "/vault/secrets/token"
/home/ubuntu/OjalaHealthcarePlatform/vault/nurse-assistant/agent.hcl:  source      = "/vault/config/secrets.tmpl"
/home/ubuntu/OjalaHealthcarePlatform/vault/nurse-assistant/agent.hcl:  destination = "/vault/secrets/appsettings.json"
/home/ubuntu/OjalaHealthcarePlatform/charts/api/templates/deployment.yaml:      {{- with .Values.imagePullSecrets }}
/home/ubuntu/OjalaHealthcarePlatform/charts/api/templates/deployment.yaml:      imagePullSecrets:
/home/ubuntu/OjalaHealthcarePlatform/charts/api/templates/deployment.yaml:            - name: VAULT_TOKEN
/home/ubuntu/OjalaHealthcarePlatform/charts/api/templates/deployment.yaml:              value: {{ .Values.vault.token }}
/home/ubuntu/OjalaHealthcarePlatform/charts/api/templates/role.yaml:    resources: ["secrets", "configmaps"]
/home/ubuntu/OjalaHealthcarePlatform/charts/api/templates/ingress.yaml:      secretName: {{ .secretName }}
/home/ubuntu/OjalaHealthcarePlatform/charts/api/values.yaml:  token: "ojala-root-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/api/values-dev.yaml:  token: "ojala-dev-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/api/values-staging.yaml:    - secretName: api-staging-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/api/values-staging.yaml:  token: "ojala-staging-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/api/values-prod.yaml:    - secretName: api-prod-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/api/values-prod.yaml:  token: "ojala-prod-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/apigateway/templates/deployment.yaml:      {{- with .Values.imagePullSecrets }}
/home/ubuntu/OjalaHealthcarePlatform/charts/apigateway/templates/deployment.yaml:      imagePullSecrets:
/home/ubuntu/OjalaHealthcarePlatform/charts/apigateway/templates/deployment.yaml:            - name: VAULT_TOKEN
/home/ubuntu/OjalaHealthcarePlatform/charts/apigateway/templates/deployment.yaml:              value: {{ .Values.vault.token }}
/home/ubuntu/OjalaHealthcarePlatform/charts/apigateway/values.yaml:  token: "ojala-root-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/apigateway/values-dev.yaml:  token: "ojala-dev-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/apigateway/values-staging.yaml:    - secretName: apigateway-staging-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/apigateway/values-staging.yaml:  token: "ojala-staging-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/apigateway/values-prod.yaml:    - secretName: apigateway-prod-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/apigateway/values-prod.yaml:  token: "ojala-prod-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/identity/templates/deployment.yaml:      {{- with .Values.imagePullSecrets }}
/home/ubuntu/OjalaHealthcarePlatform/charts/identity/templates/deployment.yaml:      imagePullSecrets:
/home/ubuntu/OjalaHealthcarePlatform/charts/identity/templates/deployment.yaml:            - name: VAULT_TOKEN
/home/ubuntu/OjalaHealthcarePlatform/charts/identity/templates/deployment.yaml:              value: {{ .Values.vault.token }}
/home/ubuntu/OjalaHealthcarePlatform/charts/identity/values.yaml:  token: "ojala-root-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/identity/values-dev.yaml:  token: "ojala-dev-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/identity/values-staging.yaml:    - secretName: identity-staging-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/identity/values-staging.yaml:  token: "ojala-staging-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/identity/values-prod.yaml:    - secretName: identity-prod-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/identity/values-prod.yaml:  token: "ojala-prod-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/ai-engine/templates/deployment.yaml:      {{- with .Values.imagePullSecrets }}
/home/ubuntu/OjalaHealthcarePlatform/charts/ai-engine/templates/deployment.yaml:      imagePullSecrets:
/home/ubuntu/OjalaHealthcarePlatform/charts/ai-engine/templates/deployment.yaml:            - name: VAULT_TOKEN
/home/ubuntu/OjalaHealthcarePlatform/charts/ai-engine/templates/deployment.yaml:              value: {{ .Values.vault.token }}
/home/ubuntu/OjalaHealthcarePlatform/charts/ai-engine/values.yaml:  token: "ojala-root-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/ai-engine/values-dev.yaml:  token: "ojala-dev-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/ai-engine/values-staging.yaml:    - secretName: ai-engine-staging-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/ai-engine/values-staging.yaml:  token: "ojala-staging-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/ai-engine/values-prod.yaml:    - secretName: ai-engine-prod-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/ai-engine/values-prod.yaml:  token: "ojala-prod-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/nurse-assistant/templates/deployment.yaml:      {{- with .Values.imagePullSecrets }}
/home/ubuntu/OjalaHealthcarePlatform/charts/nurse-assistant/templates/deployment.yaml:      imagePullSecrets:
/home/ubuntu/OjalaHealthcarePlatform/charts/nurse-assistant/templates/deployment.yaml:            - name: VAULT_TOKEN
/home/ubuntu/OjalaHealthcarePlatform/charts/nurse-assistant/templates/deployment.yaml:              value: {{ .Values.vault.token }}
/home/ubuntu/OjalaHealthcarePlatform/charts/nurse-assistant/values.yaml:  token: "ojala-root-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/nurse-assistant/values-dev.yaml:  token: "ojala-dev-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/nurse-assistant/values-staging.yaml:    - secretName: nurse-assistant-staging-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/nurse-assistant/values-staging.yaml:  token: "ojala-staging-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/nurse-assistant/values-prod.yaml:    - secretName: nurse-assistant-prod-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/nurse-assistant/values-prod.yaml:  token: "ojala-prod-token"
/home/ubuntu/OjalaHealthcarePlatform/charts/web/templates/deployment.yaml:      {{- with .Values.imagePullSecrets }}
/home/ubuntu/OjalaHealthcarePlatform/charts/web/templates/deployment.yaml:      imagePullSecrets:
/home/ubuntu/OjalaHealthcarePlatform/charts/web/values-staging.yaml:    - secretName: web-staging-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/web/values-prod.yaml:    - secretName: web-prod-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/patient-portal/templates/deployment.yaml:      {{- with .Values.imagePullSecrets }}
/home/ubuntu/OjalaHealthcarePlatform/charts/patient-portal/templates/deployment.yaml:      imagePullSecrets:
/home/ubuntu/OjalaHealthcarePlatform/charts/patient-portal/values-staging.yaml:    - secretName: patient-portal-staging-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/patient-portal/values-prod.yaml:    - secretName: patient-portal-prod-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/rn-dashboard/templates/deployment.yaml:      {{- with .Values.imagePullSecrets }}
/home/ubuntu/OjalaHealthcarePlatform/charts/rn-dashboard/templates/deployment.yaml:      imagePullSecrets:
/home/ubuntu/OjalaHealthcarePlatform/charts/rn-dashboard/values-staging.yaml:    - secretName: rn-dashboard-staging-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/rn-dashboard/values-prod.yaml:    - secretName: rn-dashboard-prod-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/employer-dashboard/templates/deployment.yaml:      {{- with .Values.imagePullSecrets }}
/home/ubuntu/OjalaHealthcarePlatform/charts/employer-dashboard/templates/deployment.yaml:      imagePullSecrets:
/home/ubuntu/OjalaHealthcarePlatform/charts/employer-dashboard/values-staging.yaml:    - secretName: employer-dashboard-staging-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/employer-dashboard/values-prod.yaml:    - secretName: employer-dashboard-prod-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/patient-app/templates/deployment.yaml:      {{- with .Values.imagePullSecrets }}
/home/ubuntu/OjalaHealthcarePlatform/charts/patient-app/templates/deployment.yaml:      imagePullSecrets:
/home/ubuntu/OjalaHealthcarePlatform/charts/patient-app/values-staging.yaml:    - secretName: patient-app-staging-tls
/home/ubuntu/OjalaHealthcarePlatform/charts/patient-app/values-prod.yaml:    - secretName: patient-app-prod-tls
/home/ubuntu/OjalaHealthcarePlatform/todo.md:  - [ ] Remove plaintext secrets; use GitHub encrypted secrets.
/home/ubuntu/OjalaHealthcarePlatform/todo.md:- [ ] Secure API calls (token validation, secure fetch patterns).
