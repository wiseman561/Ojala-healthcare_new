name: Cleanup Resources

on:
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sundays at 2 AM UTC
  workflow_dispatch:
    inputs:
      cleanup_type:
        description: 'Type of cleanup to perform'
        required: true
        default: 'artifacts'
        type: choice
        options:
        - artifacts
        - containers
        - all

permissions:
  contents: read
  actions: write
  packages: write

jobs:
  cleanup-artifacts:
    name: Clean up old artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: inputs.cleanup_type == 'artifacts' || inputs.cleanup_type == 'all' || github.event_name == 'schedule'

    steps:
      - name: Cleanup old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const cutoff = new Date();
            cutoff.setDate(cutoff.getDate() - 30); // Keep artifacts for 30 days

            let deletedCount = 0;
            for (const artifact of artifacts.data.artifacts) {
              const createdAt = new Date(artifact.created_at);
              if (createdAt < cutoff) {
                try {
                  await github.rest.actions.deleteArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id
                  });
                  console.log(`Deleted artifact: ${artifact.name} (${artifact.id})`);
                  deletedCount++;
                } catch (error) {
                  console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
                }
              }
            }
            console.log(`Deleted ${deletedCount} old artifacts`);

  cleanup-packages:
    name: Clean up old container packages
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: inputs.cleanup_type == 'containers' || inputs.cleanup_type == 'all' || github.event_name == 'schedule'

    steps:
      - name: Cleanup old container versions
        uses: actions/github-script@v7
        with:
          script: |
            const packages = ['ojala-identity', 'ojala-api', 'ojala-apigateway', 'ojala-healthscore', 'ojala-web'];

            for (const packageName of packages) {
              try {
                const versions = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
                  package_type: 'container',
                  package_name: packageName,
                  org: context.repo.owner,
                  per_page: 100
                });

                // Keep the latest 10 versions, delete the rest
                const versionsToDelete = versions.data.slice(10);

                for (const version of versionsToDelete) {
                  try {
                    await github.rest.packages.deletePackageVersionForOrg({
                      package_type: 'container',
                      package_name: packageName,
                      org: context.repo.owner,
                      package_version_id: version.id
                    });
                    console.log(`Deleted ${packageName} version ${version.name || version.id}`);
                  } catch (error) {
                    console.log(`Failed to delete ${packageName} version: ${error.message}`);
                  }
                }
              } catch (error) {
                console.log(`Package ${packageName} not found or error: ${error.message}`);
              }
            }

  cleanup-workspace:
    name: Clean up temporary files
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always()

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Clean temporary build files
        run: |
          echo "Cleaning up temporary files..."

          # Clean .NET build artifacts
          find . -name "bin" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "obj" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.tmp" -type f -delete 2>/dev/null || true

          # Clean Node.js artifacts
          find . -name "node_modules" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name ".next" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "dist" -type d -exec rm -rf {} + 2>/dev/null || true

          # Clean Python artifacts
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "*.pyc" -type f -delete 2>/dev/null || true
          find . -name ".pytest_cache" -type d -exec rm -rf {} + 2>/dev/null || true

          # Clean Docker artifacts
          docker system prune -f --volumes 2>/dev/null || true

          echo "Cleanup completed"

      - name: Report disk usage
        run: |
          echo "Disk usage after cleanup:"
          df -h
          echo ""
          echo "Largest directories:"
          du -sh * 2>/dev/null | sort -hr | head -10 || true
