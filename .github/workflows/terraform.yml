name: Terraform Plan & Apply

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    outputs:
      plan-exists: ${{ steps.plan.outputs.plan-exists }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            infra/terraform/.terraform
          key: terraform-${{ hashFiles('infra/terraform/.terraform.lock.hcl') }}
          restore-keys: terraform-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.6.0"

      - name: Configure AWS credentials
        if: env.AWS_ACCESS_KEY_ID != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Terraform Init
        run: terraform init
        working-directory: infra/terraform
        env:
          TF_CLI_ARGS_init: "-upgrade"

      - name: Terraform Format Check
        run: terraform fmt -check -diff
        working-directory: infra/terraform

      - name: Terraform Validate
        run: terraform validate
        working-directory: infra/terraform

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -detailed-exitcode -out=tfplan
          echo "plan-exists=true" >> $GITHUB_OUTPUT
        working-directory: infra/terraform
        env:
          TF_VAR_environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

      - name: Upload Terraform Plan
        if: steps.plan.outputs.plan-exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infra/terraform/tfplan
          retention-days: 5

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const { execSync } = require('child_process');

            try {
              // Generate plan output for comment
              const planOutput = execSync('cd infra/terraform && terraform show -no-color tfplan', {
                encoding: 'utf8',
                maxBuffer: 1024 * 1024 * 10 // 10MB buffer
              });

              const comment = `## Terraform Plan Results

              <details>
              <summary>Show Plan</summary>

              \`\`\`
              ${planOutput.slice(0, 50000)} ${planOutput.length > 50000 ? '\n\n... (truncated)' : ''}
              \`\`\`

              </details>`;

              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Error posting plan comment:', error.message);
            }

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: terraform-plan
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.action == 'apply') ||
      (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.terraform-plan.outputs.plan-exists == 'true')
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            infra/terraform/.terraform
          key: terraform-${{ hashFiles('infra/terraform/.terraform.lock.hcl') }}
          restore-keys: terraform-

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.6.0"

      - name: Configure AWS credentials
        if: env.AWS_ACCESS_KEY_ID != ''
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Download Terraform Plan
        uses: actions/download-artifact@v4
        with:
          name: terraform-plan
          path: infra/terraform/

      - name: Terraform Init
        run: terraform init
        working-directory: infra/terraform

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: infra/terraform
        env:
          TF_VAR_environment: production

      - name: Upload Terraform State
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-state-${{ github.sha }}
          path: infra/terraform/terraform.tfstate*
          retention-days: 90
