name: Deploy to Kubernetes

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

permissions:
  contents: read
  actions: read

jobs:
  deploy:
    name: Deploy to K8s
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: ${{ inputs.environment || 'staging' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Detect Kube Credentials
        id: detect-creds
        env:
          KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
          KUBE_SERVER: ${{ secrets.KUBE_SERVER }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN }}
        run: |
          if [ -n "$KUBE_CONFIG" ]; then
            echo "🔑 KUBE_CONFIG secret found - using kubeconfig authentication"
            mkdir -p ~/.kube
            echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
            chmod 600 ~/.kube/config
            echo "credentials-configured=true" >> $GITHUB_OUTPUT
          elif [ -n "$KUBE_SERVER" ] && [ -n "$KUBE_TOKEN" ]; then
            echo "🔑 KUBE_SERVER and KUBE_TOKEN secrets found - using server/token authentication"
            kubectl config set-cluster default-cluster --server="${{ secrets.KUBE_SERVER }}"
            kubectl config set-credentials deployer --token="${{ secrets.KUBE_TOKEN }}"
            kubectl config set-context default --cluster=default-cluster --user=deployer
            kubectl config use-context default
            echo "credentials-configured=true" >> $GITHUB_OUTPUT
          else
            echo "🚨 No Kubernetes credentials found; skipping deployment."
            echo "credentials-configured=false" >> $GITHUB_OUTPUT
          fi

      - name: Verify Kubernetes connection
        if: steps.detect-creds.outputs.credentials-configured == 'true'
        run: |
          echo "🔗 Verifying Kubernetes connection..."
          kubectl cluster-info
          echo ""
          echo "📋 Available nodes:"
          kubectl get nodes

      - name: Set deployment environment variables
        if: steps.detect-creds.outputs.credentials-configured == 'true'
        run: |
          echo "ENVIRONMENT=${{ inputs.environment || 'staging' }}" >> $GITHUB_ENV
          echo "NAMESPACE=ojala-${{ inputs.environment || 'staging' }}" >> $GITHUB_ENV
          echo "🏷️  Environment: ${{ inputs.environment || 'staging' }}"
          echo "🏷️  Namespace: ojala-${{ inputs.environment || 'staging' }}"

      - name: Create namespace if it doesn't exist
        if: steps.detect-creds.outputs.credentials-configured == 'true'
        run: |
          echo "🏗️  Creating namespace if it doesn't exist..."
          kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

      - name: Make deploy script executable
        if: steps.detect-creds.outputs.credentials-configured == 'true'
        run: chmod +x scripts/deploy/deploy-k8s.sh

      - name: Run deployment script
        if: steps.detect-creds.outputs.credentials-configured == 'true'
        env:
          ENVIRONMENT: ${{ env.ENVIRONMENT }}
          NAMESPACE: ${{ env.NAMESPACE }}
        run: |
          echo "🚀 Running deployment script..."
          if [ -f "scripts/deploy/deploy-k8s.sh" ]; then
            ./scripts/deploy/deploy-k8s.sh
          elif [ -f "scripts/deploy-k8s.sh" ]; then
            ./scripts/deploy-k8s.sh
          else
            echo "❌ ERROR: Deploy script not found"
            echo "Expected: scripts/deploy/deploy-k8s.sh or scripts/deploy-k8s.sh"
            exit 1
          fi

      - name: Verify deployment
        if: steps.detect-creds.outputs.credentials-configured == 'true'
        run: |
          echo "✅ Checking deployment status in namespace: $NAMESPACE"
          echo ""
          echo "📊 Deployments:"
          kubectl get deployments -n "$NAMESPACE"
          echo ""
          echo "🌐 Services:"
          kubectl get services -n "$NAMESPACE"
          echo ""
          echo "🔋 Pods:"
          kubectl get pods -n "$NAMESPACE"
          echo ""
          echo "⏳ Waiting for deployments to be ready..."

          # Wait for deployments to be ready
          kubectl wait --for=condition=available --timeout=300s deployment --all -n "$NAMESPACE" || {
            echo "❌ Some deployments failed to become ready"
            echo ""
            echo "📋 Deployment details:"
            kubectl describe deployments -n "$NAMESPACE"
            exit 1
          }

          echo "🎉 All deployments are ready!"
