using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Moq;
using Xunit;
using System.IdentityModel.Tokens.Jwt;

using Ojala.Data.Entities;
using Ojala.Identity.Services;

namespace Ojala.Tests.Unit
{
    public class TokenServiceTests
    {
        private readonly Mock<IConfiguration> _configMock;
        private readonly Mock<UserManager<ApplicationUser>> _userManagerMock;
        private readonly TokenService _tokenService;

        public TokenServiceTests()
        {
            _configMock = new Mock<IConfiguration>();

            _userManagerMock = new Mock<UserManager<ApplicationUser>>(
                Mock.Of<IUserStore<ApplicationUser>>(),
                null!, null!, null!, null!, null!, null!, null!, null!);

            // minimal JWT settings
            _configMock.Setup(c => c.GetSection("JwtSettings")["SecretKey"])
                       .Returns("supersecretkey1234567890!");
            _configMock.Setup(c => c.GetSection("JwtSettings")["ExpiryInMinutes"])
                       .Returns("30");
            _configMock.Setup(c => c.GetSection("Jw



tSettings")["Issuer"])
                       .Returns("TestIssuer");
            _configMock.Setup(c => c.GetSection("JwtSettings")["Audience"])
                       .Returns("TestAudience");

            _tokenServic




e = new TokenService(_configMock.Object, _userManagerMock.Object);
        }

        [Fact]
        public async Task GenerateJwtToken_IncludesClaimsAndRoles()
 




       {
            // Arrange
            var user = new ApplicationUser
            {
                Id        = "user123",
 




               Email     = "test@example.com",
                FirstName = "John",
                LastName  = "Doe"
            };

 




           var roles = new List<string> { "Admin" };
            _userManagerMock.Setup(um => um.GetRolesAsync(user))
                            .ReturnsAsync(roles);

 



           // Act
            var token = await _tokenService.GenerateJwtToken(user);
            var jwt   = new JwtSecurityTokenHandler().ReadJwtToken(token);




            // Assert: core claims
            Assert.Contains(jwt.Claims, c => c.Type == JwtRegisteredClaimNames.Sub   && c.Value == "user123");
 


           Assert.Contains(jwt.Claims, c => c.Type == JwtRegisteredClaimNames.Email && c.Value == "test@example.com");
            Assert.Contains(jwt.Claims, c => c.Type == ClaimTypes.Name               && c.Value == "John Doe");



            // Assert: at least one claim (any type) has value "Admin"
            Assert.True(jwt.Claims.Any(c => c.Value.Equals("Admin", StringComparison.OrdinalIgnore

Case)),
                        "JWT should contain a role claim with value 'Admin'.");
        }
 


   }
}
