<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LaunchDarkly.CommonSdk</name>
    </assembly>
    <members>
        <member name="T:LaunchDarkly.Sdk.AttributeRef">
            <summary>
            An attribute name or path expression identifying a value within a <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </summary>
            <remarks>
            <para>
            This type is mainly intended to be used internally by LaunchDarkly SDK and service code, where
            efficiency is a major concern so it's desirable to do any parsing or preprocessing just once.
            Applications are unlikely to need to use the AttributeRef type directly.
            </para>
            <para>
            It can be used to retrieve a value with <see cref="M:LaunchDarkly.Sdk.Context.GetValue(LaunchDarkly.Sdk.AttributeRef@)"/>, or to
            identify an attribute or nested value that should be considered private with Builder.Private()
            (the SDK configuration can also have a list of private attribute references).
            </para>
            <para>
            Parsing and validation are done at the time that <see cref="M:LaunchDarkly.Sdk.AttributeRef.FromPath(System.String)"/> or
            <see cref="M:LaunchDarkly.Sdk.AttributeRef.FromLiteral(System.String)"/> is called. If an AttributeRef instance was created from an
            invalid string, or if it is an uninitialized struct (<c>new AttributeRef()</c>), it is
            considered invalid and its <see cref="P:LaunchDarkly.Sdk.AttributeRef.Error"/> property will return a non-null error.
            </para>
            <para>
            The string representation of an attribute reference in LaunchDarkly JSON data uses the following
            syntax:
            </para>
            <list type="bullet">
            <item><description>
            If the first character is not a slash, the string is interpreted literally as an attribute name.
            An attribute name can contain any characters, but must not be empty.
            </description></item>
            <item><description>
            If the first character is a slash, the string is interpreted as a slash-delimited path where the
            first path component is an attribute name, and each subsequent path component is the name of a
            property in a JSON object. Any instances of the characters "/" or "~" in a path component are
            escaped as "~1" or "~0" respectively. This syntax deliberately resembles JSON Pointer, but no
            JSON Pointer behaviors other than those mentioned here are supported.
            </description></item>
            </list>
            <para>
            For example, suppose there is a context whose JSON representation looks like this:
            </para>
            <code>
                {
                  "kind": "user",
                  "key": "value1",
                  "address": {
                    "street": {
                      "line1": "value2",
                      "line2": "value3"
                    },
                    "city": "value4"
                  },
                  "good/bad": "value5"
                }
            </code>
            <list type="bullet">
            <item><description>
            The attribute references "key" and "/key" would both point to "value1".
            </description></item>
            <item><description>
            The attribute reference "/address/street/line1" would point to "value2".
            </description></item>
            <item><description>
            The attribute references "good/bad" and "/good~1bad" would both point to "value5".
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.AttributeRef.Defined">
            <summary>
            True if the AttributeRef has a value, meaning that it is not an uninitialized struct
            (<c>new AttributeRef()</c>). That does not guarantee that the value is valid; use
            <see cref="P:LaunchDarkly.Sdk.AttributeRef.Valid"/> or <see cref="P:LaunchDarkly.Sdk.AttributeRef.Error"/> to test that.
            </summary>
            <seealso cref="P:LaunchDarkly.Sdk.AttributeRef.Valid"/>
            <seealso cref="P:LaunchDarkly.Sdk.AttributeRef.Error"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.AttributeRef.Valid">
            <summary>
            True for a valid AttributeRef, false for an invalid AttributeRef.
            </summary>
            <remarks>
            <para>
            An AttributeRef can only be invalid for the following reasons:
            </para>
            <list type="number">
            <item><description>The input string was empty, or consisted only of "/".</description></item>
            <item><description>A slash-delimited string had a double slash causing one component
            to be empty, such as "/a//b".</description></item>
            <item><description>A slash-delimited string contained a "~" character that was not followed
            by "0" or "1".</description></item>
            </list>
            <para>
            Otherwise, the AttributeRef is valid, but that does not guarantee that such an attribute exists
            in any given <see cref="T:LaunchDarkly.Sdk.Context"/>. For instance, <c>AttributeRef.FromLiteral("name")</c> is a
            valid Ref, but a specific Context might or might not have a name.
            </para>
            <para>
            See comments on the <see cref="T:LaunchDarkly.Sdk.AttributeRef"/> type for more details of the attribute reference
            syntax.
            </para>
            </remarks>
            <seealso cref="P:LaunchDarkly.Sdk.AttributeRef.Defined"/>
            <seealso cref="P:LaunchDarkly.Sdk.AttributeRef.Error"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.AttributeRef.Error">
            <summary>
            Null for a valid AttributeRef, or a non-null error message for an invalid AttributeRef.
            </summary>
            <remarks>
            If this is null, then <see cref="P:LaunchDarkly.Sdk.AttributeRef.Valid"/> is true. If it is non-null, then <see cref="P:LaunchDarkly.Sdk.AttributeRef.Valid"/> is false.
            </remarks>
            <seealso cref="P:LaunchDarkly.Sdk.AttributeRef.Valid"/>
            <seealso cref="P:LaunchDarkly.Sdk.AttributeRef.Defined"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.AttributeRef.Depth">
            <summary>
            The number of path components in the AttributeRef.
            </summary>
            <remarks>
            <para>
            For a simple attribute reference such as "name" with no leading slash, this returns 1.
            </para>
            <para>
            For an attribute reference with a leading slash, it is the number of slash-delimited path
            components after the initial slash. For instance, <c>AttributeRef.FromPath("/a/b").Depth</c>
            returns 2.
            </para>
            <para>
            For an invalid attribute reference, it returns zero.
            </para>
            </remarks>
            <seealso cref="M:LaunchDarkly.Sdk.AttributeRef.GetComponent(System.Int32)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.AttributeRef.FromPath(System.String)">
            <summary>
            Creates an AttributeRef from a string. For the supported syntax and examples, see comments on the
            <see cref="T:LaunchDarkly.Sdk.AttributeRef"/> type.
            </summary>
            <remarks>
            This method always returns an AttributeRef that preserves the original string, even if validation
            fails, so that calling <see cref="M:LaunchDarkly.Sdk.AttributeRef.ToString"/> (or serializing the AttributeRef to JSON) will
            produce the original string. If validation fails, <see cref="P:LaunchDarkly.Sdk.AttributeRef.Error"/> will return a non-null
            error and any SDK method that takes this AttributeRef as a parameter will consider it invalid.
            </remarks>
            <param name="refPath">an attribute name or path</param>
            <returns>an AttributeRef</returns>
            <seealso cref="M:LaunchDarkly.Sdk.AttributeRef.FromLiteral(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.AttributeRef.FromLiteral(System.String)">
            <summary>
            Similar to <see cref="M:LaunchDarkly.Sdk.AttributeRef.FromPath(System.String)"/>, except that it always interprets the string as a literal
            attribute name, never as a slash-delimited path expression. There is no escaping or unescaping,
            even if the name contains literal '/' or '~' characters. Since an attribute name can contain
            any characters, this method always returns a valid AttributeRef unless the name is empty.
            </summary>
            <remarks>
            For example: <c>AttributeRef.FromLiteral("name")</c> is exactly equivalent to
            <c>AttributeRef.FromPath("name")</c>. <c>AttributeRef.FromLiteral("a/b")</c> is exactly equivalent
            to <c>AttributeRef.FromPath("a/b")</c> (since the syntax used by <see cref="M:LaunchDarkly.Sdk.AttributeRef.FromPath(System.String)"/>
            treats the whole string as a literal as long as it does not start with a slash), or to
            <c>AttributeRef.FromPath("/a~1b")</c>.
            </remarks>
            <param name="attributeName">an attribute name</param>
            <returns>an AttributeRef</returns>
            <seealso cref="M:LaunchDarkly.Sdk.AttributeRef.FromPath(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.AttributeRef.GetComponent(System.Int32)">
            <summary>
            Retrieves a single path component from the attribute reference.
            </summary>
            <remarks>
            <para>
            For a simple attribute reference such as "name" with no leading slash, if index is zero,
            TryGetComponent returns the attribute name.
            </para>
            <para>
            For an attribute reference with a leading slash, if index is non-negative and less than
            <see cref="P:LaunchDarkly.Sdk.AttributeRef.Depth"/>, TryGetComponent returns the path component.
            </para>
            <para>
            It returns null if the index is out of range.
            </para>
            </remarks>
            <param name="index">the zero-based index of the desired path component</param>
            <returns>the path component or null</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.AttributeRef.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.AttributeRef.Equals(LaunchDarkly.Sdk.AttributeRef)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.AttributeRef.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.AttributeRef.ToString">
            <summary>
            Returns the attribute reference as a string, in the same format used by
            <see cref="M:LaunchDarkly.Sdk.AttributeRef.FromPath(System.String)"/>
            </summary>
            <remarks>
            If the AttributeRef was created with <see cref="M:LaunchDarkly.Sdk.AttributeRef.FromPath(System.String)"/>, this value is
            identical to the original string. If it was created with <see cref="M:LaunchDarkly.Sdk.AttributeRef.FromLiteral(System.String)"/>,
            the value may be different due to unescaping (for instance, an attribute whose name is
            "/a" would be represented as "~1a"). For an uninitialized struct
            (<c>new AttributeRef()</c>), it returns an empty string.
            </remarks>
            <returns>the attribute reference string (guaranteed non-null)</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Context">
            <summary>
            A collection of attributes that can be referenced in flag evaluations and analytics events.
            </summary>
            <remarks>
            <para>
            Context is the newer replacement for the previous, less flexible <see cref="T:LaunchDarkly.Sdk.User"/> type.
            The current SDK still supports User, but Context is now the preferred model and may
            entirely replace User in the future.
            </para>
            <para>
            To create a Context of a single kind, such as a user, you may use <see cref="M:LaunchDarkly.Sdk.Context.New(System.String)"/>
            or <see cref="M:LaunchDarkly.Sdk.Context.New(LaunchDarkly.Sdk.ContextKind,System.String)"/> when only the key matters; or, to specify other
            attributes, use <see cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>.
            </para>
            <para>
            To create a Context with multiple kinds, use <see cref="M:LaunchDarkly.Sdk.Context.NewMulti(LaunchDarkly.Sdk.Context[])"/> or
            <see cref="M:LaunchDarkly.Sdk.Context.MultiBuilder"/>.
            </para>
            <para>
            An uninitialized Context struct is not valid for use in any SDK operations. Also, a Context can
            be in an error state if it was built with invalid attributes. See <see cref="P:LaunchDarkly.Sdk.Context.Error"/>.
            </para>
            <para>
            A Context can be converted to or from JSON using a standard schema; see
            <see cref="T:LaunchDarkly.Sdk.Json.LdJsonConverters.ContextConverter"/>.
            </para>
            <para>
            To learn more about contexts, read <see href="https://docs.launchdarkly.com/home/contexts">the
            documentation</see>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.Defined">
            <summary>
            True if this is a Context that was created with a constructor or builder (regardless of
            whether its properties are valid), or false if it is an empty uninitialized struct.
            </summary>
            <seealso cref="P:LaunchDarkly.Sdk.Context.Valid"/>
            <seealso cref="P:LaunchDarkly.Sdk.Context.Error"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.Valid">
            <summary>
            True for a valid Context, false for an invalid Context.
            </summary>
            <remarks>
            <para>
            A valid Context is one that can be used in SDK operations. An invalid Context is one that is
            missing necessary attributes or has invalid attributes, indicating an incorrect usage of the
            SDK API. The only ways for a Context to be invalid are:
            </para>
            <list type="bullet">
            <item><description>
                It has a disallowed value for the Kind property. See <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Kind(System.String)"/>.
            </description></item>
            <item><description>
                It is a single-kind Context whose Key is empty.
            </description></item>
            <item><description>
                It is a multi-kind Context that does not have any kinds. See <see cref="M:LaunchDarkly.Sdk.Context.MultiBuilder"/>.
            </description></item>
            <item><description>
                It is a multi-kind Context where the same kind appears more than once.
            </description></item>
            <item><description>
                It is a multi-kind Context where at least one of the nested Contexts had an error.
            </description></item>
            <item><description>
                It was created with <see cref="M:LaunchDarkly.Sdk.Context.FromUser(LaunchDarkly.Sdk.User)"/> from a null User reference, or from a
                User that had a null key.
            </description></item>
            <item><description>
                It is an uninitialized struct (<c>new Context()</c>).
            </description></item>
            </list>
            <para>
            Since in normal usage it is easy for applications to be sure they are using context kinds
            correctly, and because throwing an exception is undesirable in application code that uses
            LaunchDarkly, and because some states such as the empty value are impossible to prevent in
            .NET, the SDK stores the error state in the Context itself and checks for such errors
            at the time the Context is used, such as in a flag evaluation. At that point, if the Context is
            invalid, the operation will fail in some well-defined way as described in the documentation for
            that method, and the SDK will generally log a warning as well. But in any situation where you
            are not sure if you have a valid Context, you can check the <see cref="P:LaunchDarkly.Sdk.Context.Error"/> property.
            </para>
            </remarks>
            <seealso cref="P:LaunchDarkly.Sdk.Context.Error"/>
            <seealso cref="P:LaunchDarkly.Sdk.Context.Defined"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.Error">
            <summary>
            Null for a valid Context, or an error message for an invalid Context.
            </summary>
            <remarks>
            If this is null, then <see cref="P:LaunchDarkly.Sdk.Context.Valid"/> is true. If it is non-null, then <see cref="P:LaunchDarkly.Sdk.Context.Valid"/> is false.
            </remarks>
            <seealso cref="P:LaunchDarkly.Sdk.Context.Valid"/>
            <seealso cref="P:LaunchDarkly.Sdk.Context.Defined"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.Kind">
            <summary>
            The Context's kind attribute.
            </summary>
            <remarks>
            <para>
            Every valid Context has a non-empty kind. For multi-kind contexts, this value is
            <c>"multi"</c> and the kinds within the Context can be inspected with <see cref="P:LaunchDarkly.Sdk.Context.MultiKindContexts"/>
            or <see cref="M:LaunchDarkly.Sdk.Context.TryGetContextByKind(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.Context@)"/>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.Key">
            <summary>
            The Context's key attribute.
            </summary>
            <remarks>
            <para>
            For a single-kind context, this value is set by a Context factory method
            (<see cref="M:LaunchDarkly.Sdk.Context.New(System.String)"/>, <see cref="M:LaunchDarkly.Sdk.Context.New(LaunchDarkly.Sdk.ContextKind,System.String)"/>), or
            by <see cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/> or <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Key(System.String)"/>.
            </para>
            <para>
            For a multi-kind context, there is no single value and <see cref="P:LaunchDarkly.Sdk.Context.Key"/> return an
            empty string. Use <see cref="P:LaunchDarkly.Sdk.Context.MultiKindContexts"/> or <see cref="M:LaunchDarkly.Sdk.Context.TryGetContextByKind(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.Context@)"/>
            to inspect a Context for a particular kind, then get the <see cref="P:LaunchDarkly.Sdk.Context.Key"/> from it.
            </para>
            <para>
            This value is never null.
            </para>
            </remarks>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Key(System.String)"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.Name">
            <summary>
            The Context's optional name attribute.
            </summary>
            <remarks>
            <para>
            For a single-kind context, this value is set by <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Name(System.String)"/>.
            It is null if no value was set.
            </para>
            <para>
            For a multi-kind context, there is no single value and <see cref="P:LaunchDarkly.Sdk.Context.Name"/> returns
            null. Use <see cref="P:LaunchDarkly.Sdk.Context.MultiKindContexts"/> or <see cref="M:LaunchDarkly.Sdk.Context.TryGetContextByKind(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.Context@)"/>
            to inspect a Context for a particular kind, then get the <see cref="P:LaunchDarkly.Sdk.Context.Name"/> from it.
            </para>
            </remarks>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Name(System.String)"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.Anonymous">
            <summary>
            True if this Context is only intended for flag evaluations and will not be indexed by
            LaunchDarkly.
            </summary>
            <remarks>
            <para>
            For a single-kind context, this value is set by <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Anonymous(System.Boolean)"/>.
            It is false if no value was set.
            </para>
            <para>
            Setting Anonymous to true excludes this Context from the database that is used by the dashboard. It does
            not exclude it from analytics event data, so it is not the same as making attributes private; all
            non-private attributes will still be included in events and data export. There is no limitation on what
            other attributes may be included (so, for instance, Anonymous does not mean there is no <see cref="P:LaunchDarkly.Sdk.Context.Name"/>),
            and the Context will still have whatever <see cref="P:LaunchDarkly.Sdk.Context.Key"/> you have given it.
            </para>
            <para>
            For a multi-kind context, there is no single value and <see cref="P:LaunchDarkly.Sdk.Context.Anonymous"/> returns
            false. Use <see cref="P:LaunchDarkly.Sdk.Context.MultiKindContexts"/> or <see cref="M:LaunchDarkly.Sdk.Context.TryGetContextByKind(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.Context@)"/>
            to inspect a Context for a particular kind, then get the <see cref="P:LaunchDarkly.Sdk.Context.Anonymous"/> value from it.
            </para>
            </remarks>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Anonymous(System.Boolean)"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.FullyQualifiedKey">
            <summary>
            A string that describes the entire Context based on Kind and Key values.
            </summary>
            <remarks>
            This value is used whenever LaunchDarkly needs a string identifier based on all of the Kind and
            Key values in the context; the SDK may use this for caching previously seen contexts, for instance.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.Multiple">
            <summary>
            True for a multi-kind Context, or false for a single-kind Context.
            </summary>
            <remarks>
            <para>
            If this value is true, then <see cref="P:LaunchDarkly.Sdk.Context.Kind"/> is guaranteed to be "multi", and you can inspect the
            individual Contexts for each kind with <see cref="P:LaunchDarkly.Sdk.Context.MultiKindContexts"/> or
            <see cref="M:LaunchDarkly.Sdk.Context.TryGetContextByKind(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.Context@)"/>.
            </para>
            <para>
            If this value is false, then <see cref="P:LaunchDarkly.Sdk.Context.Kind"/> is guaranteed to have a value that is not "multi"/
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.OptionalAttributeNames">
            <summary>
            Enumerates the names of all regular optional attributes defined on this Context.
            </summary>
            <remarks>
            These do not include attributes that always have a value (<see cref="P:LaunchDarkly.Sdk.Context.Kind"/>, <see cref="P:LaunchDarkly.Sdk.Context.Key"/>,
            <see cref="P:LaunchDarkly.Sdk.Context.Anonymous"/>), or metadata that is not an attribute addressable in targeting rules
            (<see cref="P:LaunchDarkly.Sdk.Context.PrivateAttributes"/>). They include any attributes with application-defined names
            that have a value, and also "name" if <see cref="P:LaunchDarkly.Sdk.Context.Name"/> has a value.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.PrivateAttributes">
            <summary>
            The list of all attribute references marked as private for this specific Context.
            </summary>
            <remarks>
            This includes all attribute names/paths that were specified with
            <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Private(System.String[])"/> or <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Private(LaunchDarkly.Sdk.AttributeRef[])"/>.
            If there are none, it is an empty list (never null).
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Context.MultiKindContexts">
            <summary>
            Returns all of the individual contexts Contained in a multi-kind Context.
            </summary>
            <remarks>
            <para>
            If this is a multi-kind Context, then it returns the individual contexts that were passed to
            <see cref="M:LaunchDarkly.Sdk.Context.NewMulti(LaunchDarkly.Sdk.Context[])"/> or <see cref="M:LaunchDarkly.Sdk.ContextMultiBuilder.Add(LaunchDarkly.Sdk.Context)"/>. The
            ordering is not guaranteed to be the same.
            </para>
            <para>
            If this is a single-kind Context, then it returns an empty list.
            </para>
            </remarks>
            <seealso cref="M:LaunchDarkly.Sdk.Context.TryGetContextByKind(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.Context@)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.New(System.String)">
            <summary>
            Creates a single-kind Context with a Kind of <see cref="F:LaunchDarkly.Sdk.ContextKind.Default"/> and the specified key.
            </summary>
            <remarks>
            To specify additional properties, use <see cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>. To create a
            multi-kind Context, use <see cref="M:LaunchDarkly.Sdk.Context.NewMulti(LaunchDarkly.Sdk.Context[])"/> or <see cref="M:LaunchDarkly.Sdk.Context.MultiBuilder"/>.
            To create a single-kind Context of a different kind than "user", use
            <see cref="M:LaunchDarkly.Sdk.Context.New(LaunchDarkly.Sdk.ContextKind,System.String)"/>.
            </remarks>
            <param name="key">the context key</param>
            <returns>a Context</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Context.New(LaunchDarkly.Sdk.ContextKind,System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.New(LaunchDarkly.Sdk.ContextKind,System.String)">
            <summary>
            Creates a single-kind Context with only the Kind and Key properties specified.
            </summary>
            <remarks>
            To specify additional properties, use <see cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>. To create a
            multi-kind Context, use <see cref="M:LaunchDarkly.Sdk.Context.NewMulti(LaunchDarkly.Sdk.Context[])"/> or <see cref="M:LaunchDarkly.Sdk.Context.MultiBuilder"/>.
            </remarks>
            <seealso cref="M:LaunchDarkly.Sdk.Context.New(System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>
            <param name="kind">the context kind</param>
            <param name="key">the context key</param>
            <returns>a Context</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.NewMulti(LaunchDarkly.Sdk.Context[])">
             <summary>
             Creates a multi-kind Context out of the specified single-kind Contexts.
             </summary>
             <remarks>
             <para>
             To create a single-kind Context, use <see cref="M:LaunchDarkly.Sdk.Context.New(System.String)"/>,
             <see cref="M:LaunchDarkly.Sdk.Context.New(LaunchDarkly.Sdk.ContextKind,System.String)"/>, or <see cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>.
             </para>
             <para>
             For the returned Context to be valid, the contexts list must not be empty, and all of its
             elements must be valid Contexts. Otherwise, the returned Context will be invalid as
             reported by <see cref="P:LaunchDarkly.Sdk.Context.Error"/>.
             </para>
             <para>
             If only one context parameter is given, <see cref="M:LaunchDarkly.Sdk.Context.NewMulti(LaunchDarkly.Sdk.Context[])"/> returns a single-kind
             context (that is, just that same context) rather than a multi-kind context.
             </para>
             <para>
             If a nested context is multi-kind, this is exactly equivalent to adding each of the
             individual kinds from it separately. For instance, in the following example, "multi1" and
             "multi2" end up being exactly the same:
             </para>
             <code>
                 var c1 = Context.New(ContextKind.Of("kind1"), "key1");
                 var c2 = Context.New(ContextKind.Of("kind2"), "key2");
                 var c3 = Context.New(ContextKind.Of("kind3"), "key3");
            
                 var multi1 = Context.NewMulti(c1, c2, c3);
            
                 var c1plus2 = Context.NewMulti(c1, c2);
                 var multi2 = Context.NewMulti(c1plus2, c3);
             </code>
             </remarks>
             <param name="contexts">a list of contexts</param>
             <returns>a multi-kind Context</returns>
             <seealso cref="M:LaunchDarkly.Sdk.Context.MultiBuilder"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.FromUser(LaunchDarkly.Sdk.User)">
            <summary>
            Converts a User to an equivalent <see cref="T:LaunchDarkly.Sdk.Context"/> instance.
            </summary>
            <remarks>
            <para>
            This method is used by the SDK whenever an application passes a <see cref="T:LaunchDarkly.Sdk.User"/> instance
            to methods such as <c>Identify</c>. The SDK operates internally on the <see cref="T:LaunchDarkly.Sdk.Context"/>
            model, which is more flexible than the older User model: a User can always be converted to a
            Context, but not vice versa. The <see cref="P:LaunchDarkly.Sdk.Context.Kind"/> of the resulting Context is
            <see cref="F:LaunchDarkly.Sdk.ContextKind.Default"/> ("user").
            </para>
            <para>
            Because there is some overhead to this conversion, it is more efficient for applications to
            construct a Context and pass that to the SDK, rather than a User. This is also recommended
            because the User type may be removed in a future version of the SDK.
            </para>
            <para>
            If the <paramref name="user"/> parameter is null, or if the user has a null key, the method
            returns a Context in an invalid state (see <see cref="P:LaunchDarkly.Sdk.Context.Valid"/>).
            </para>
            </remarks>
            <param name="user">a User object</param>
            <returns>a Context with the same attributes as the User</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.Builder(System.String)">
            <summary>
            Creates a ContextBuilder for building a Context, initializing its <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Key(System.String)"/>
            and setting <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Kind(System.String)"/> to <see cref="F:LaunchDarkly.Sdk.ContextKind.Default"/>.
            </summary>
            <remarks>
            <para>
            You may use <see cref="T:LaunchDarkly.Sdk.ContextBuilder"/> methods to set additional attributes and/or change the
            <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Kind(System.String)"/> before calling <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Build"/>.
            If you do not change any values, the defaults for the Context are that its <see cref="P:LaunchDarkly.Sdk.Context.Kind"/> is
            <see cref="F:LaunchDarkly.Sdk.ContextKind.Default"/> ("user"), its <see cref="P:LaunchDarkly.Sdk.Context.Key"/> is set to whatever value you passed for
            <paramref name="key"/>, its <see cref="P:LaunchDarkly.Sdk.Context.Anonymous"/> attribute is false, and it has no values for any
            other attributes.
            </para>
            <para>
            This method is for building a Context that has only a single Kind. To define a multi-kind
            Context, use <see cref="M:LaunchDarkly.Sdk.Context.NewMulti(LaunchDarkly.Sdk.Context[])"/> or <see cref="M:LaunchDarkly.Sdk.Context.MultiBuilder"/>.
            </para>
            <para>
            If <paramref name="key"/> is an empty string, there is no default. A Context must have a
            non-empty key, so if you call <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Build"/> in this state without using
            <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Key(System.String)"/> to set the key, you will get an invalid Context.
            </para>
            </remarks>
            <param name="key">the context key</param>
            <returns>a builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Context.New(System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Context.Builder(LaunchDarkly.Sdk.ContextKind,System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Context.MultiBuilder"/>
            <seealso cref="M:LaunchDarkly.Sdk.Context.BuilderFromContext(LaunchDarkly.Sdk.Context)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.Builder(LaunchDarkly.Sdk.ContextKind,System.String)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>, but sets the initial value of
            <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Kind(LaunchDarkly.Sdk.ContextKind)"/> as well as the key.
            </summary>
            <param name="kind">the context kind</param>
            <param name="key">the context key</param>
            <returns>a builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Context.New(LaunchDarkly.Sdk.ContextKind,System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Context.MultiBuilder"/>
            <seealso cref="M:LaunchDarkly.Sdk.Context.BuilderFromContext(LaunchDarkly.Sdk.Context)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.BuilderFromContext(LaunchDarkly.Sdk.Context)">
            <summary>
            Creates a ContextBuilder whose properties are the same as an existing single-kind Context.
            You may then change the ContextBuilder's state in any way and call <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Build"/>
            to create a new independent Context.
            </summary>
            <param name="context">the context to copy from</param>
            <returns>a builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.MultiBuilder">
            <summary>
            Creates a ContextMultiBuilder for building a Context.
            </summary>
            <remarks>
            This method is for building a Context athat has multiple Kind values, each with its own
            nested Context. To define a single-kind context, use <see cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/> instead.
            </remarks>
            <returns>a builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.GetValue(System.String)">
            <summary>
            Looks up the value of any attribute of the Context by name. This includes only attributes
            that are addressable in evaluations-- not metadata such as <see cref="P:LaunchDarkly.Sdk.Context.PrivateAttributes"/>.
            </summary>
            <remarks>
            <para>
            For a single-kind context, the attribute name can be any custom attribute that was set by methods
            like <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.Boolean)"/>. It can also be one of the built-in ones like
            "kind", "key", or "name"; in such cases, it is equivalent to <see cref="P:LaunchDarkly.Sdk.Context.Kind"/>,
            <see cref="P:LaunchDarkly.Sdk.Context.Key"/>, or <see cref="P:LaunchDarkly.Sdk.Context.Name"/>, except that the value is returned using the general-purpose
            <see cref="T:LaunchDarkly.Sdk.LdValue"/> type.
            </para>
            <para>
            For a multi-kind context, the only supported attribute name is "kind". Use
            <see cref="P:LaunchDarkly.Sdk.Context.MultiKindContexts"/> or <see cref="M:LaunchDarkly.Sdk.Context.TryGetContextByKind(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.Context@)"/> to inspect
            a Context for a particular kind and then get its attributes.
            </para>
            <para>
            This method does not support complex expressions for getting individual values out of JSON objects
            or arrays, such as "/address/street". Use <see cref="M:LaunchDarkly.Sdk.Context.GetValue(LaunchDarkly.Sdk.AttributeRef@)"/> with an
            <see cref="T:LaunchDarkly.Sdk.AttributeRef"/> for that purpose.
            </para>
            <para>
            If the value is found, the return value is the attribute value, using the type <see cref="T:LaunchDarkly.Sdk.LdValue"/>
            to represent a value of any JSON type.
            </para>
            <para>
            If there is no such attribute, the return value is <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/>. An attribute that
            actually exists cannot have a null value.
            </para>
            </remarks>
            <param name="attributeName">the desired attribute name</param>
            <returns>the value or <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/></returns>
            <seealso cref="M:LaunchDarkly.Sdk.Context.GetValue(LaunchDarkly.Sdk.AttributeRef@)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.GetValue(LaunchDarkly.Sdk.AttributeRef@)">
            <summary>
            Looks up the value of any attribute of the Context, or a value contained within an
            attribute, based on an <see cref="T:LaunchDarkly.Sdk.AttributeRef"/>. This includes only attributes that
            are addressable in evaluations-- not metadata such as <see cref="P:LaunchDarkly.Sdk.Context.PrivateAttributes"/>.
            </summary>
            <remarks>
            <para>
            This implements the same behavior that the SDK uses to resolve attribute references during a
            flag evaluation. In a single-kind context, the <see cref="T:LaunchDarkly.Sdk.AttributeRef"/> can represent a
            simple attribute name-- either a built-in one like "name" or "key", or a custom attribute
            that was set by methods like <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.String)"/>-- or, it can be a
            a slash-delimited path using a JSON-Pointer-like syntax. See <see cref="T:LaunchDarkly.Sdk.AttributeRef"/>
            for more details.
            </para>
            <para>
            For a multi-kind context, the only supported attribute name is "kind". Use
            <see cref="P:LaunchDarkly.Sdk.Context.MultiKindContexts"/> or <see cref="M:LaunchDarkly.Sdk.Context.TryGetContextByKind(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.Context@)"/> to inspect
            a Context for a particular kind and then get its attributes.
            </para>
            <para>
            If the value is found, the return value is the attribute value, using the type
            <see cref="T:LaunchDarkly.Sdk.LdValue"/> to represent a value of any JSON type).
            </para>
            <para>
            If there is no such attribute, or if the <see cref="T:LaunchDarkly.Sdk.AttributeRef"/> is invalid, the return
            value is <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/>. An attribute that actually exists cannot have a null
            value.
            </para>
            </remarks>
            <param name="attributeRef">an attribute reference</param>
            <returns>the value or <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/></returns>
            <seealso cref="M:LaunchDarkly.Sdk.Context.GetValue(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.TryGetContextByKind(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.Context@)">
            <summary>
            Gets the single-kind context, if any, whose <see cref="P:LaunchDarkly.Sdk.Context.Kind"/> matches the specified
            value exactly.
            </summary>
            <remarks>
            <para>
            If the method is called on a single-kind context, then the specified kind must match the
            <see cref="P:LaunchDarkly.Sdk.Context.Kind"/> of that context. If the method is called on a multi-kind context, then
            the kind can match any of the individual contexts within.
            </para>
            </remarks>
            <param name="kind">the desired context kind</param>
            <param name="context">receives the context that was found, if successful</param>
            <returns>true if found, false if not found</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.Equals(LaunchDarkly.Sdk.Context)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Context.ToString">
            <summary>
            Returns a string representation of the Context.
            </summary>
            <remarks>
            For a valid Context, this is currently defined as being the same as the JSON representation,
            since that is the simplest way to represent all of the Context properties. However, application
            code should not rely on <see cref="M:LaunchDarkly.Sdk.Context.ToString"/> always being the same as the JSON representation.
            If you specifically want the latter, use <see cref="M:LaunchDarkly.Sdk.Json.LdJsonSerialization.SerializeObject``1(``0)"/>.
            For an invalid Context, ToString() returns a description of why it is invalid.
            </remarks>
            <returns>a string representation</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.ContextBuilder">
            <summary>
            A mutable object that uses the builder pattern to specify properties for a <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </summary>
            <remarks>
            <para>
            Use this type if you need to construct a Context that has only a single kind. To define a
            multi-kind Context, use <see cref="M:LaunchDarkly.Sdk.Context.NewMulti(LaunchDarkly.Sdk.Context[])"/> or <see cref="M:LaunchDarkly.Sdk.Context.MultiBuilder"/>.
            </para>
            <para>
            Obtain an instance of ContextBuilder by calling <see cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>. Then,
            call setter methods such as <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Kind(System.String)"/>, <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Name(System.String)"/>, or
            <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.String)"/> to specify any additional attributes. Then, call <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Build"/>
            to create the Context. ContextBuilder setters return a reference to the same builder, so calls can be
            chained:
            </para>
            <code>
                var context = Context.Builder("user-key").
                    Name("my-name").
                    Set("country", "us").
                    Build();
            </code>
            <para>
            A ContextBuilder should not be accessed by multiple threads at once. Once you have called
            <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Build"/>, the resulting Context is immutable and is safe to use from multiple threads.
            Instances created with <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Build"/> are not affected by subsequent actions taken on the builder.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Build">
            <summary>
            Creates a <see cref="T:LaunchDarkly.Sdk.Context"/> from the current Builder properties.
            </summary>
            <remarks>
            <para>
            The Context is immutable and will not be affected by any subsequent actions on the ContextBuilder.
            </para>
            <para>
            It is possible to specify invalid attributes for a ContextBuilder, such as an empty key. Instead
            of throwing an exception, the ContextBuilder always returns a Context and you can check
            <see cref="P:LaunchDarkly.Sdk.Context.Error"/> to see if it has an error. See <see cref="P:LaunchDarkly.Sdk.Context.Error"/> for more
            information about invalid Context conditions. If you pass an invalid Context to an SDK method, the
            SDK will detect this and will generally log a description of the error.
            </para>
            </remarks>
            <returns>a new <see cref="T:LaunchDarkly.Sdk.Context"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Kind(LaunchDarkly.Sdk.ContextKind)">
            <summary>
            Sets the Context's kind attribute.
            </summary>
            <remarks>
            <para>
            Every Context has a kind. Setting it to an empty string or null is equivalent to
            <see cref="F:LaunchDarkly.Sdk.ContextKind.Default"/> ("user"). This value is case-sensitive. For validation
            rules, see <see cref="T:LaunchDarkly.Sdk.ContextKind"/>.
            </para>
            <para>
            If the value is invalid at the time <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Build"/> is called, you will receive an invalid
            Context whose <see cref="P:LaunchDarkly.Sdk.Context.Error"/> will describe the problem.
            </para>
            </remarks>
            <param name="kind">the context kind</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Kind(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Kind(System.String)">
            <summary>
            Sets the Context's kind attribute. This is a shortcut for calling
            <c>Kind(ContextKind.Of(kindString))</c>, since the method name already prevents
            ambiguity about the intended type.
            </summary>
            <param name="kindString">the context kind</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Kind(LaunchDarkly.Sdk.ContextKind)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Key(System.String)">
            <summary>
            Sets the Context's key attribute.
            </summary>
            <remarks>
            <para>
            Every Context has a key, which is always a string. It cannot be an empty string, but there are no
            other restrictions on its value.
            </para>
            <para>
            The key attribute can be referenced by flag rules, flag target lists, and segments.
            </para>
            </remarks>
            <param name="key">the context key</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Name(System.String)">
            <summary>
            Sets the Context's name attribute.
            </summary>
            <remarks>
            <para>
            This attribute is optional. It has the following special rules:
            </para>
            <list type="bullet">
            <item><description>Unlike most other attributes, it is always a string if it is specified.
            </description></item>
            <item><description>The LaunchDarkly dashboard treats this attribute as the preferred display name
            for contexts.</description></item>
            </list>
            </remarks>
            <param name="name">the name attribute (null to unset the attribute)</param>
            <returns>the builder</returns>
            <seealso cref="P:LaunchDarkly.Sdk.Context.Name"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Anonymous(System.Boolean)">
            <summary>
            Sets whether the Context is only intended for flag evaluations and should not be indexed by
            LaunchDarkly.
            </summary>
            <remarks>
            <para>
            The default value is false. False means that this Context represents an entity such as a user that
            you want to be able to see on the LaunchDarkly dashboard.
            </para>
            <para>
            Setting Anonymous to true excludes this Context from the database that is used by the dashboard. It does
            not exclude it from analytics event data, so it is not the same as making attributes private; all
            non-private attributes will still be included in events and data export. There is no limitation on what
            other attributes may be included (so, for instance, Anonymous does not mean there is no <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Name(System.String)"/>),
            and the Context will still have whatever <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Key(System.String)"/> you have given it.
            </para>
            <para>
            This value is also addressable in evaluations as the attribute name "anonymous". It is always treated as
            a boolean true or false in evaluations.
            </para>
            </remarks>
            <param name="anonymous">true if the Context should be excluded from the LaunchDarkly database</param>
            <returns>the builder</returns>
            <seealso cref="P:LaunchDarkly.Sdk.Context.Anonymous"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Sets the value of any attribute for the Context.
            </summary>
            <remarks>
            <para>
            This includes only attributes that are addressable in evaluations-- not metadata such as
            <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Private(System.String[])"/>. If <paramref name="attributeName"/> is "private", you will
            be setting an attribute with that name which you can use in evaluations or to record data
            for your own purposes, but it will be unrelated to <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Private(System.String[])"/>.
            </para>
            <para>
            This method uses the <see cref="T:LaunchDarkly.Sdk.LdValue"/> type to represent a value of any JSON type: null,
            boolean, number, string, array, or object. For all attribute names that do not have special
            meaning to LaunchDarkly, you may use any of those types. Values of different JSON types are
            always treated as different values: for instance, null, false, and the empty string "" are
            not the the same, and the number 1 is not the same as the string "1".
            </para>
            <para>
            The following attribute names have special restrictions on their value types, and any value
            of an unsupported type will be ignored (leaving the attribute unchanged):
            </para>
            <list type="bullet">
            <item><description>"kind", "key": Must be a string. See <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Kind(System.String)"/> and
            <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Key(System.String)"/>.</description></item>
            <item><description>"name": Must be a string or null. See <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Name(System.String)"/>.
            </description></item>
            <item><description>"anonymous": Must be a boolean. See <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Anonymous(System.Boolean)"/>.
            </description></item>
            </list>
            <para>
            The attribute name "_meta" is not allowed, because it has special meaning in the JSON
            schema for contexts; any attempt to set an attribute with this name has no effect. Also, any
            attempt to set an attribute with an empty or null name has no effect.
            </para>
            <para>
            Values that are JSON arrays or objects have special behavior when referenced in flag/segment
            rules.
            </para>
            <para>
            A value of <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> is equivalent to removing any current non-default value
            of the attribute. Null is not a valid attribute value in the LaunchDarkly model; any expressions
            in feature flags that reference an attribute with a null value will behave as if the
            attribute did not exist.
            </para>
            </remarks>
            <param name="attributeName">the attribute name to set</param>
            <param name="value">the value to set</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.TrySet(System.String,LaunchDarkly.Sdk.LdValue)"/>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.Boolean)"/>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.Int32)"/>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.Int64)"/>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Remove(System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Context.GetValue(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.TrySet(System.String,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Same as <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/>, but returns a boolean indicating whether the
            attribute was successfully set.
            </summary>
            <param name="attributeName">the attribute name to set</param>
            <param name="value">the value to set</param>
            <returns>true if successful; false if the name was invalid or the value was not an allowed
            type for that attribute</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.Boolean)">
            <summary>
            Same as <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/> for a boolean value.
            </summary>
            <param name="attributeName">the attribute name to set</param>
            <param name="value">the value to set</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.Int32)">
            <summary>
            Same as <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/> for an integer numeric value.
            </summary>
            <param name="attributeName">the attribute name to set</param>
            <param name="value">the value to set</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.Double)">
            <summary>
            Same as <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/> for a double-precision numeric value.
            </summary>
            <remarks>
            Numeric values in custom attributes have some precision limitations, the same as for
            numeric values in flag variations. For more details, see our documentation on
            <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag value types</see>.
            </remarks>
            <param name="attributeName">the attribute name to set</param>
            <param name="value">the value to set</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.Int64)">
            <summary>
            Same as <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/> for a long integer numeric value.
            </summary>
            <remarks>
            Numeric values in custom attributes have some precision limitations, the same as for
            numeric values in flag variations. For more details, see our documentation on
            <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag value types</see>.
            </remarks>
            <param name="attributeName">the attribute name to set</param>
            <param name="value">the value to set</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,System.String)">
            <summary>
            Same as <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/> for a string value.
            </summary>
            <param name="attributeName">the attribute name to set</param>
            <param name="value">the value to set</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Remove(System.String)">
            <summary>
            Unsets a previously set attribute value. Has no effect if no such value was set.
            </summary>
            <param name="attributeName">the attribute name to unset</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Private(System.String[])">
            <summary>
            Designates any number of Context attributes, or properties within them, as private: that is,
            their values will not be sent to LaunchDarkly.
            </summary>
            <remarks>
            TKTK: conceptual information about private attributes might be in online docs
            </remarks>
            <param name="attributeRefs">attribute references to mark as private</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Private(LaunchDarkly.Sdk.AttributeRef[])"/>
            <seealso cref="P:LaunchDarkly.Sdk.Context.PrivateAttributes"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextBuilder.Private(LaunchDarkly.Sdk.AttributeRef[])">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.ContextBuilder.Private(System.String[])"/>, but uses the <see cref="T:LaunchDarkly.Sdk.AttributeRef"/> type.
            </summary>
            <remarks>
            Application code is unlikely to need to use the <see cref="T:LaunchDarkly.Sdk.AttributeRef"/> type directly; however,
            in cases where you are constructing Contexts constructed repeatedly with the same set of private
            attributes, if you are also using complex private attribute path references such as "/address/street",
            converting this to an AttributeRef once and reusing it in many Private calls is slightly more
            efficient than passing a string (since it does not need to parse the path repeatedly).
            </remarks>
            <param name="attributeRefs">attribute references to mark as private</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.ContextBuilder.Private(System.String[])"/>
            <seealso cref="P:LaunchDarkly.Sdk.Context.PrivateAttributes"/>
        </member>
        <member name="T:LaunchDarkly.Sdk.ContextKind">
            <summary>
            A string value provided by the application to describe what kind of entity a
            <see cref="T:LaunchDarkly.Sdk.Context"/> represents.
            </summary>
            <remarks>
            <para>
            The type is a simple wrapper for a string. Using a type that is not just <c>string</c>
            makes it clearer where a context kind is expected or returned in the SDK API, so it
            cannot be confused with other important strings such as <see cref="P:LaunchDarkly.Sdk.Context.Key"/>. To
            convert a literal string to this type, you can use the shortcut <see cref="M:LaunchDarkly.Sdk.ContextKind.Of(System.String)"/>.
            </para>
            <para>
            The meaning of the context kind is completely up to the application. Validation rules are
            as follows:
            </para>
            <list type="bullet">
            <item><description>It may only contain letters, numbers, and the characters ".", "_", and "-".
            </description></item>
            <item><description>It cannot equal the literal string "kind".</description></item>
            <item><description>For a single-kind context, it cannot equal "multi".</description></item>
            </list>
            <para>
            If no kind is specified, the default is "user" (the constant <see cref="F:LaunchDarkly.Sdk.ContextKind.Default"/>).
            However, an uninitialized struct (<c>new ContextKind()</c> is invalid and has a string
            value of "".
            </para>
            <para>
            For a multi-kind Context (see <see cref="M:LaunchDarkly.Sdk.Context.NewMulti(LaunchDarkly.Sdk.Context[])"/>), the kind
            of the top-level Context is always "multi" (the constant <see cref="F:LaunchDarkly.Sdk.ContextKind.Multi"/>);
            there is a specific Kind for each of the Contexts contained within it.
            </para>
            <para>
            To learn more, read <see href="https://docs.launchdarkly.com/home/contexts">the
            documentation</see>.
            </para>
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.ContextKind.Default">
            <summary>
            A constant for the default kind of "user".
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.ContextKind.Multi">
            <summary>
            A constant for the kind that all multi-kind Contexts have.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.ContextKind.Value">
            <summary>
            The string value of the context kind. This is never null.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextKind.#ctor(System.String)">
            <summary>
            Constructor from a string value.
            </summary>
            <remarks>
            A value of null or "" will be changed to <see cref="F:LaunchDarkly.Sdk.ContextKind.Default"/>.
            </remarks>
            <param name="stringValue">the string value</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextKind.Of(System.String)">
            <summary>
            Shortcut for calling the constructor.
            </summary>
            <param name="stringValue">the string value</param>
            <returns>a <see cref="T:LaunchDarkly.Sdk.ContextKind"/> wrapping this value</returns>
        </member>
        <member name="P:LaunchDarkly.Sdk.ContextKind.IsDefault">
            <summary>
            True if this is equal to <see cref="F:LaunchDarkly.Sdk.ContextKind.Default"/> ("user").
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextKind.ToString">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextKind.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextKind.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextKind.Equals(LaunchDarkly.Sdk.ContextKind)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextKind.op_Equality(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.ContextKind)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextKind.op_Inequality(LaunchDarkly.Sdk.ContextKind,LaunchDarkly.Sdk.ContextKind)">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.ContextMultiBuilder">
            <summary>
            A mutable object that uses the builder pattern to specify properties for a <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </summary>
            <remarks>
            <para>
            Use this type if you need to construct a Context that has multiple Kind values, each with its
            own nested Context. To define a single-kind context, use <see cref="M:LaunchDarkly.Sdk.Context.Builder(System.String)"/>.
            </para>
            <para>
            Obtain an instance of ContextMultiBuilder by calling <see cref="M:LaunchDarkly.Sdk.Context.MultiBuilder"/>; then,
            call <see cref="M:LaunchDarkly.Sdk.ContextMultiBuilder.Add(LaunchDarkly.Sdk.Context)"/> to specify the nested Context for each kind. Add returns a
            reference to the same builder, so calls can be chained:
            </para>
            <code>
                var context = Context.MultiBuilder().
                    Add(Context.New("my-user-key")).
                    Add(Context.Builder("my-org-key").Kind("organization").Build()).
                    Build();
            </code>
            <para>
            A ContextMultiBuilder should not be accessed by multiple threads at once. Once you have called
            <see cref="M:LaunchDarkly.Sdk.ContextMultiBuilder.Build"/>, the resulting Context is immutable and is safe to use from multiple threads.
            Instances created with <see cref="M:LaunchDarkly.Sdk.ContextMultiBuilder.Build"/> are not affected by subsequent actions taken on the builder.
            </para>
            </remarks>
            <seealso cref="M:LaunchDarkly.Sdk.Context.NewMulti(LaunchDarkly.Sdk.Context[])"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextMultiBuilder.Build">
            <summary>
            Creates a <see cref="T:LaunchDarkly.Sdk.Context"/> from the current Builder properties.
            </summary>
            <remarks>
            <para>
            The Context is immutable and will not be affected by any subsequent actions on the ContextBuilder.
            </para>
            <para>
            It is possible for a ContextMultiBuilder to represent an invalid state. Instead of throwing an
            exception, the ContextMultiBuilder always returns a Context and you can check <see cref="P:LaunchDarkly.Sdk.Context.Error"/>
            to see if it has an error. See <see cref="P:LaunchDarkly.Sdk.Context.Error"/> for more information about invalid Context
            conditions. If you pass an invalid Context to an SDK method, the SDK will detect this and will generally
            log a description of the error.
            </para>
            <para>
            If only one context kind was added to the builder, Build returns a single-kind Context rather
            than a multi-kind Context.
            </para>
            </remarks>
            <returns>a new <see cref="T:LaunchDarkly.Sdk.Context"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.ContextMultiBuilder.Add(LaunchDarkly.Sdk.Context)">
             <summary>
             Adds a nested Context for a specific kind to a MultiBuilder.
             </summary>
             <remarks>
             <para>
             It is invalid to add more than one Context with the same kind, or to add a Context that is itself
             invalid. This error is detected when you call <see cref="M:LaunchDarkly.Sdk.ContextMultiBuilder.Build"/>.
             </para>
             <para>
             If the nested context is multi-kind, this is exactly equivalent to adding each of the
             individual kinds from it separately. For instance, in the following example, "multi1" and
             "multi2" end up being exactly the same:
             </para>
             <code>
                 var c1 = Context.New(ContextKind.Of("kind1"), "key1");
                 var c2 = Context.New(ContextKind.Of("kind2"), "key2");
                 var c3 = Context.New(ContextKind.Of("kind3"), "key3");
            
                 var multi1 = Context.MultiBuilder().Add(c1).Add(c2).Add(c3).Build();
            
                 var c1plus2 = Context.MultiBuilder().Add(c1).Add(c2).Build();
                 var multi2 = Context.MultiBuilder().Add(c1plus2).Add(c3).Build();
             </code>
             </remarks>
             <param name="context">the context to add</param>
             <returns>the builder</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.EvaluationDetail`1">
            <summary>
            An object returned by the "variation detail" methods of the client, combining the result
            of a flag evaluation with an explanation of how it was calculated.
            </summary>
            <typeparam name="T">the type of the flag value</typeparam>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationDetail`1.Value">
            <summary>
            The result of the flag evaluation. This will be either one of the flag's variations or the default
            value that was specified when the flag was evaluated.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationDetail`1.VariationIndex">
            <summary>
            The index of the returned value within the flag's list of variations, e.g. 0 for the first variation -
            or <see langword="null"/> if the default value was returned.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationDetail`1.Reason">
            <summary>
            An object describing the main factor that influenced the flag evaluation value.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationDetail`1.IsDefaultValue">
            <summary>
            True if the flag evaluated to the default value, rather than one of its variations.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationDetail`1.#ctor(`0,System.Nullable{System.Int32},LaunchDarkly.Sdk.EvaluationReason)">
            <summary>
            Constructs a new EvaluationDetail insetance.
            </summary>
            <param name="value">the flag value</param>
            <param name="variationIndex">the variation index</param>
            <param name="reason">the evaluation reason</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationDetail`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationDetail`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.EvaluationReason">
            <summary>
            Describes the reason that a flag evaluation produced a particular value.
            </summary>
            <remarks>
            For converting this type to or from JSON, see <see cref="N:LaunchDarkly.Sdk.Json"/>.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationReason.Kind">
            <summary>
            An enum indicating the general category of the reason.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationReason.RuleIndex">
            <summary>
            The index of the rule that was matched (0 for the first), or <see langword="null"/> if this is not a rule match.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationReason.RuleId">
            <summary>
            The unique identifier of the rule that was matched, or <see langword="null"/> if this is not a rule match.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationReason.PrerequisiteKey">
            <summary>
            The key of the prerequisite flag that failed, if <see cref="P:LaunchDarkly.Sdk.EvaluationReason.Kind"/> is <see cref="F:LaunchDarkly.Sdk.EvaluationReasonKind.PrerequisiteFailed"/>,
            otherwise <see langword="null"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationReason.ErrorKind">
            <summary>
            Describes the type of error, if <see cref="P:LaunchDarkly.Sdk.EvaluationReason.Kind"/> is <see cref="F:LaunchDarkly.Sdk.EvaluationReasonKind.Error"/>, otherwise
            <see langword="null"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationReason.InExperiment">
            <summary>
            Whether the evaluation was part of an experiment.
            </summary>
            <remarks>
            This is true if the evaluation resulted in an experiment rollout and served one of the
            variations in the experiment. Otherwise it is false.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationReason.BigSegmentsStatus">
            <summary>
            Describes the validity of big segment information, if and only if the flag evaluation required querying
            at least one big segment. Otherwise it returns <see langword="null"/>.
            </summary>
            <remarks>
            "Big segments" are a specific kind of user segments. For more information, read the LaunchDarkly
            documentation about user segments: https://docs.launchdarkly.com/home/users/big-segments
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationReason.OffReason">
            <summary>
            Returns an EvaluationReason of the kind <see cref="F:LaunchDarkly.Sdk.EvaluationReasonKind.Off"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationReason.FallthroughReason">
            <summary>
            Returns an EvaluationReason of the kind <see cref="F:LaunchDarkly.Sdk.EvaluationReasonKind.Fallthrough"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.EvaluationReason.TargetMatchReason">
            <summary>
            Returns an EvaluationReason of the kind <see cref="F:LaunchDarkly.Sdk.EvaluationReasonKind.TargetMatch"/>.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationReason.RuleMatchReason(System.Int32,System.String)">
            <summary>
            Returns an EvaluationReason of the kind <see cref="F:LaunchDarkly.Sdk.EvaluationReasonKind.RuleMatch"/>.
            </summary>
            <param name="ruleIndex">the rule index</param>
            <param name="ruleId">the unique rule ID</param>
            <returns>a reason descriptor</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationReason.PrerequisiteFailedReason(System.String)">
            <summary>
            Returns an EvaluationReason of the kind <see cref="F:LaunchDarkly.Sdk.EvaluationReasonKind.PrerequisiteFailed"/>.
            </summary>
            <param name="key">the key of the prerequisite flag</param>
            <returns>a reason descriptor</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationReason.ErrorReason(LaunchDarkly.Sdk.EvaluationErrorKind)">
            <summary>
            Returns an EvaluationReason of the kind <see cref="F:LaunchDarkly.Sdk.EvaluationReasonKind.Error"/>.
            </summary>
            <param name="errorKind"></param>
            <returns>a reason descriptor</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationReason.WithBigSegmentsStatus(System.Nullable{LaunchDarkly.Sdk.BigSegmentsStatus})">
            <summary>
            Returns a copy of this EvaluationReason with a specific <see cref="P:LaunchDarkly.Sdk.EvaluationReason.BigSegmentsStatus"/> value added.
            </summary>
            <param name="bigSegmentsStatus">the new property value</param>
            <returns>a reason descriptor</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationReason.WithInExperiment(System.Boolean)">
            <summary>
            Returns a new instance with the <see cref="P:LaunchDarkly.Sdk.EvaluationReason.InExperiment"/> property set to the specified
            value, if supported.
            </summary>
            <remarks>
            Setting <see cref="P:LaunchDarkly.Sdk.EvaluationReason.InExperiment"/> is only allowed for <see cref="F:LaunchDarkly.Sdk.EvaluationReasonKind.Fallthrough"/>
            and <see cref="F:LaunchDarkly.Sdk.EvaluationReasonKind.RuleMatch"/>. For all other reason kinds, this has no effect.
            </remarks>
            <param name="inExperiment">the desired value for the property</param>
            <returns>a copy of this instance with the property modified</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationReason.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationReason.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.EvaluationReason.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.EvaluationReasonKind">
            <summary>
            Enumerated type defining the possible values of <see cref="P:LaunchDarkly.Sdk.EvaluationReason.Kind"/>.
            </summary>
            <remarks>
            The JSON representation of this type, as used in LaunchDarkly analytics event data, uses
            uppercase strings with underscores (<c>"RULE_MATCH"</c> rather than <c>"RuleMatch"</c>).
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationReasonKind.Off">
            <summary>
            Indicates that the flag was off and therefore returned its configured off value.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationReasonKind.Fallthrough">
            <summary>
            Indicates that the flag was on but the user did not match any targets or rules.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationReasonKind.TargetMatch">
            <summary>
            Indicates that the user key was specifically targeted for this flag.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationReasonKind.RuleMatch">
            <summary>
            Indicates that the user matched one of the flag's rules.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationReasonKind.PrerequisiteFailed">
            <summary>
            Indicates that the flag was considered off because it had at least one prerequisite flag
            that either was off or did not return the desired variation.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationReasonKind.Error">
            <summary>
            Indicates that the flag could not be evaluated, e.g. because it does not exist or due to an unexpected
            error. In this case the result value will be the default value that the caller passed to the client.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.EvaluationErrorKind">
            <summary>
            Enumerated type defining the possible values of <see cref="P:LaunchDarkly.Sdk.EvaluationReason.ErrorKind"/>.
            </summary>
            <remarks>
            The JSON representation of this type, as used in LaunchDarkly analytics event data, uses
            uppercase strings with underscores (<c>"FLAG_NOT_FOUND"</c> rather than <c>"FlagNotFound"</c>).
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationErrorKind.ClientNotReady">
            <summary>
            Indicates that the caller tried to evaluate a flag before the client had successfully initialized.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationErrorKind.FlagNotFound">
            <summary>
            Indicates that the caller provided a flag key that did not match any known flag.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationErrorKind.UserNotSpecified">
            <summary>
            Indicates that the caller passed <see langword="null"/> for the user parameter, or the user lacked a key.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationErrorKind.MalformedFlag">
            <summary>
            Indicates that there was an internal inconsistency in the flag data, e.g. a rule specified a nonexistent
            variation. An error message will always be logged in this case.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationErrorKind.WrongType">
            <summary>
            Indicates that the result value was not of the requested type, e.g. you requested a <see langword="bool"/>
            but the value was an <see langword="int"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.EvaluationErrorKind.Exception">
            <summary>
            Indicates that an unexpected exception stopped flag evaluation; check the log for details.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.BigSegmentsStatus">
            <summary>
            Defines the possible values of <see cref="P:LaunchDarkly.Sdk.EvaluationReason.BigSegmentsStatus"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.BigSegmentsStatus.Healthy">
            <summary>
            Indicates that the big segment query involved in the flag evaluation was successful, and
            that the segment state is considered up to date.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.BigSegmentsStatus.Stale">
            <summary>
            Indicates that the big segment query involved in the flag evaluation was successful, but
            that the segment state may not be up to date.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.BigSegmentsStatus.NotConfigured">
            <summary>
            Indicates that big segments could not be queried for the flag evaluation because the SDK
            configuration did not include a big segment store.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.BigSegmentsStatus.StoreError">
            <summary>
            Indicates that the big segment query involved in the flag evaluation failed, for instance
            due to a database error.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Json.IJsonSerializable">
            <summary>
            A marker interface for types that define their own JSON serialization rules.
            </summary>
            <remarks>
            <para>
            Some types that are defined in the <c>LaunchDarkly.Sdk</c> namespaces, such as
            <see cref="T:LaunchDarkly.Sdk.User"/> and <see cref="T:LaunchDarkly.Sdk.EvaluationReason"/>, have a standard representation
            in JSON. The internal structures of these types do not always correspond directly to
            the JSON schema, so reflection-based serializers will not work without custom logic.
            </para>
            </remarks>
            <seealso cref="T:LaunchDarkly.Sdk.Json.LdJsonSerialization"/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Json.LdJsonConverters">
            <summary>
            Low-level JSON custom serializations for SDK types.
            </summary>
            <remarks>
            <para>
            Applications normally will not need to reference these types; they are used automatically
            when you call <see cref="T:LaunchDarkly.Sdk.Json.LdJsonSerialization"/> methods (or <c>System.Text.Json</c>
            methods, if that API is available). They are included here for use by other LaunchDarkly
            library code.
            </para>
            <para>
            Some of these converters also have <c>ReadJsonValue</c> and <c>WriteJsonValue</c> methods.
            The reason for this is that the <c>object</c> type used by the regular converter methods
            causes boxing/unboxing conversions if the target type is a <c>struct</c>, and if the
            overhead of these is a concern it is more efficient to call a strongly typed method.
            </para>
            </remarks>
            <seealso cref="T:LaunchDarkly.Sdk.Json.LdJsonSerialization"/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Json.LdJsonConverters.EvaluationErrorKindConverter">
            <summary>
            The JSON converter for <see cref="T:LaunchDarkly.Sdk.EvaluationErrorKind"/>.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Json.LdJsonConverters.EvaluationReasonKindConverter">
            <summary>
            The JSON converter for <see cref="T:LaunchDarkly.Sdk.EvaluationReasonKind"/>.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Json.LdJsonConverters.LdValueConverter">
            <summary>
            The JSON converter for <see cref="T:LaunchDarkly.Sdk.LdValue"/>.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Json.LdJsonConverters.UnixMillisecondTimeConverter">
            <summary>
            The JSON converter for <see cref="T:LaunchDarkly.Sdk.UnixMillisecondTime"/>.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Json.LdJsonConverters.AttributeRefConverter">
            <summary>
            The JSON converter for <see cref="T:LaunchDarkly.Sdk.AttributeRef"/>.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Json.LdJsonConverters.ContextConverter">
            <summary>
            The JSON converter for <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </summary>
            <remarks>
            <para>
            Applications should not need to use this class directly. It is used automatically in
            <c>System.Text.Json</c> conversion, or if you call <see cref="M:LaunchDarkly.Sdk.Json.LdJsonSerialization.SerializeObject``1(``0)"/>
            or <see cref="M:LaunchDarkly.Sdk.Json.LdJsonSerialization.DeserializeObject``1(System.String)"/>
            </para>
            <para>
            LaunchDarkly's JSON schema for contexts is standardized across SDKs. There are two serialization
            formats, depending on whether it is a single-kind context or a multi-kind context. There is also
            a third format corresponding to how users were represented in JSON in older LaunchDarkly SDKs;
            this format is recognized automatically and supported for deserialization, but is not supported
            for serialization.
            </para>
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Json.LdJsonConverters.UserConverter">
            <summary>
            The JSON converter for <see cref="T:LaunchDarkly.Sdk.User"/>.
            </summary>
            <remarks>
            <para>
            Applications should not need to use this class directly. It is used automatically in
            <c>System.Text.Json</c> conversion, or if you call <see cref="M:LaunchDarkly.Sdk.Json.LdJsonSerialization.SerializeObject``1(``0)"/>
            or <see cref="M:LaunchDarkly.Sdk.Json.LdJsonSerialization.DeserializeObject``1(System.String)"/>
            </para>
            <para>
            LaunchDarkly's JSON schema for users is standardized across SDKs. It corresponds to the
            <see cref="T:LaunchDarkly.Sdk.User"/> model, rather than the richer <see cref="T:LaunchDarkly.Sdk.Context"/> model; any JSON
            representation of a <see cref="T:LaunchDarkly.Sdk.User"/> can also be decoded as a <see cref="T:LaunchDarkly.Sdk.Context"/>,
            but not vice versa.
            </para>
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Json.LdJsonSerialization">
            <summary>
            Helper methods for JSON serialization of SDK classes.
            </summary>
            <remarks>
            These methods can be used with any SDK type that has the <see cref="T:LaunchDarkly.Sdk.Json.IJsonSerializable"/>
            marker interface.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Json.LdJsonSerialization.SerializeObject``1(``0)">
            <summary>
            Converts an object to its JSON representation.
            </summary>
            <remarks>
            This is exactly equivalent to the <c>System.Text.Json</c> method <c>JsonSerializer.Serialize</c>,
            except that it only accepts LaunchDarkly types that have the <see cref="T:LaunchDarkly.Sdk.Json.IJsonSerializable"/>
            marker interface. It is retained for backward compatibility.
            </remarks>
            <typeparam name="T">type of the object being serialized</typeparam>
            <param name="instance">the instance to serialize</param>
            <returns>the object's JSON encoding as a string</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Json.LdJsonSerialization.SerializeObjectToUtf8Bytes``1(``0)">
            <summary>
            Converts an object to its JSON representation as a UTF-8 byte array.
            </summary>
            <remarks>
            This is exactly equivalent to the <c>System.Text.Json</c> method <c>JsonSerializer.SerializeToUtf8Bytes</c>,
            except that it only accepts LaunchDarkly types that have the <see cref="T:LaunchDarkly.Sdk.Json.IJsonSerializable"/>
            marker interface. It is retained for backward compatibility.
            </remarks>
            <typeparam name="T">type of the object being serialized</typeparam>
            <param name="instance">the instance to serialize</param>
            <returns>the object's JSON encoding as a byte array</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Json.LdJsonSerialization.DeserializeObject``1(System.String)">
            <summary>
            Parses an object from its JSON representation.
            </summary>
            <remarks>
            This is exactly equivalent to the <c>System.Text.Json</c> method <c>JsonSerializer.Deserialize</c>,
            except that it only accepts LaunchDarkly types that have the <see cref="T:LaunchDarkly.Sdk.Json.IJsonSerializable"/>
            marker interface. It is retained for backward compatibility.
            </remarks>
            <typeparam name="T">type of the object being deserialized</typeparam>
            <param name="json">the object's JSON encoding as a string</param>
            <returns>the deserialized instance</returns>
            <exception cref="T:System.Text.Json.JsonException">if the JSON encoding was invalid</exception>
        </member>
        <member name="T:LaunchDarkly.Sdk.LdValueType">
            <summary>
            Describes the type of a JSON value.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValueType.Null">
            <summary>
            The value is null.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValueType.Bool">
            <summary>
            The value is a boolean.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValueType.Number">
            <summary>
            The value is numeric. JSON does not have separate types for int and float,
            but you can convert to either.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValueType.String">
            <summary>
            The value is a string.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValueType.Array">
            <summary>
            The value is an array.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValueType.Object">
            <summary>
            The value is an object (a.k.a. hash or dictionary).
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.LdValue">
            <summary>
            An immutable instance of any data type that is allowed in JSON.
            </summary>
            <remarks>
            <para>
            This is used as the return type of the client's JsonVariation method, and also as
            the type of custom attributes in <see cref="T:LaunchDarkly.Sdk.User"/> and <see cref="T:LaunchDarkly.Sdk.IUserBuilder"/>.
            </para>
            <para>
            LaunchDarkly allows feature flag variations and custom user attributes to be of any JSON
            type, with some restrictions (notably, regarding numeric precision). For more details, see
            our documentation on <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag
            value types</see>.
            </para>
            <para>
            Note that this is a <see langword="struct"/>, not a class, so it is always passed by value
            and is not nullable; JSON nulls are represented by the constant <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> and can
            be detected with <see cref="P:LaunchDarkly.Sdk.LdValue.IsNull"/>. Whenever possible, <see cref="T:LaunchDarkly.Sdk.LdValue"/>
            stores primitive types within the struct rather than allocating an object on the heap.
            </para>
            <para>
            There are several ways to create an <see cref="T:LaunchDarkly.Sdk.LdValue"/>. For primitive types,
            use the various overloads of "Of" such as <see cref="M:LaunchDarkly.Sdk.LdValue.Of(System.Boolean)"/>; these are very efficient
            since they do not allocate any objects on the heap. For arrays and objects (dictionaries),
            use <see cref="M:LaunchDarkly.Sdk.LdValue.ArrayFrom(System.Collections.Generic.IEnumerable{LaunchDarkly.Sdk.LdValue})"/>, <see cref="M:LaunchDarkly.Sdk.LdValue.ArrayOf(LaunchDarkly.Sdk.LdValue[])"/>,
            <see cref="M:LaunchDarkly.Sdk.LdValue.ObjectFrom(System.Collections.Generic.IReadOnlyDictionary{System.String,LaunchDarkly.Sdk.LdValue})"/>, or the corresponding
            methods in the type-specific <see cref="T:LaunchDarkly.Sdk.LdValue.Convert"/> instances.
            </para>
            <para>
            To convert to other types, there are the "As" properties such as 
            use the various overloads of "Of" such as <see cref="M:LaunchDarkly.Sdk.LdValue.Of(System.Boolean)"/>; these are very efficient
            since they do not allocate any objects on the heap. For arrays and objects (dictionaries),
            use <see cref="M:LaunchDarkly.Sdk.LdValue.AsList``1(LaunchDarkly.Sdk.LdValue.Converter{``0})"/> or <see cref="M:LaunchDarkly.Sdk.LdValue.AsDictionary``1(LaunchDarkly.Sdk.LdValue.Converter{``0})"/>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.Null">
            <summary>
            Convenience property for an <see cref="T:LaunchDarkly.Sdk.LdValue"/> that wraps a <see langword="null"/> value.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Of(System.Boolean)">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> from a boolean value.
            </summary>
            <param name="value">the initial value</param>
            <returns>a struct that wraps the value</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Of(System.Int32)">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> from an <see langword="int"/> value.
            </summary>
            <param name="value">the initial value</param>
            <returns>a struct that wraps the value</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Of(System.Int64)">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> from a <see langword="long"/> value.
            </summary>
            <remarks>
            Numeric values in LaunchDarkly have some precision limitations. For more details, see our
            documentation on <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag
            value types</see>.
            </remarks>
            <param name="value">the initial value</param>
            <returns>a struct that wraps the value</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Of(System.Single)">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> from a <see langword="float"/> value.
            </summary>
            <remarks>
            Numeric values in LaunchDarkly have some precision limitations. For more details, see our
            documentation on <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag
            value types</see>.
            </remarks>
            <param name="value">the initial value</param>
            <returns>a struct that wraps the value</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Of(System.Double)">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> from a <see langword="double"/> value.
            </summary>
            <remarks>
            Numeric values in LaunchDarkly have some precision limitations. For more details, see our
            documentation on <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag
            value types</see>.
            </remarks>
            <param name="value">the initial value</param>
            <returns>a struct that wraps the value</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Of(System.String)">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> from a string value.
            </summary>
            <remarks>
            A null string reference will be stored as <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> rather than as a string.
            </remarks>
            <param name="value">the initial value</param>
            <returns>a struct that wraps the value</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ArrayFrom(System.Collections.Generic.IEnumerable{LaunchDarkly.Sdk.LdValue})">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> as an array, from a sequence of JSON values.
            </summary>
            <remarks>
            To create an array from values of some other type, use <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ArrayFrom(System.Collections.Generic.IEnumerable{`0})"/>
            </remarks>
            <example>
            <code>
                var listOfValues = new List&lt;LdValue&gt; { LdValue.Of(1), LdValue.Of("x") };
                var arrayValue = LdValue.ArrayFrom(listOfValues);
            </code>
            </example>
            <param name="values">a sequence of values</param>
            <returns>a struct representing a JSON array, or <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> if the parameter was null</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ArrayOf(LaunchDarkly.Sdk.LdValue[])">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> as an array, from a sequence of JSON values.
            </summary>
            <remarks>
            To create an array from values of some other type, use <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ArrayOf(`0[])"/>
            </remarks>
            <example>
            <code>
                var arrayValue = LdValue.ArrayFrom(LdValue.Of("a"), LdValue.Of("b"));
            </code>
            </example>
            <param name="values">any number of values</param>
            <returns>a struct representing a JSON array</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.BuildArray">
            <summary>
            Starts building an array value.
            </summary>
            <returns>an <see cref="T:LaunchDarkly.Sdk.LdValue.ArrayBuilder"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectFrom(System.Collections.Generic.IReadOnlyDictionary{System.String,LaunchDarkly.Sdk.LdValue})">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> as a JSON object, from a dictionary.
            </summary>
            <remarks>
            To use a dictionary with values of some other type, use <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ObjectFrom(System.Collections.Generic.IReadOnlyDictionary{System.String,`0})"/>.
            </remarks>
            <param name="dictionary">a dictionary with string keys and values of the specified type</param>
            <returns>a struct representing a JSON object, or <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> if the parameter was null</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.BuildObject">
            <summary>
            Starts building an object value.
            </summary>
            <returns>an <see cref="T:LaunchDarkly.Sdk.LdValue.ObjectBuilder"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Parse(System.String)">
            <summary>
            Parses a value from a JSON-encoded string.
            </summary>
            <example>
            <code>
                var myValue = LdValue.Parse("[1,2]");
                Assert.Equal(LdValue.BuildArray().Add(1).Add(2).Build(), myValue); // true
            </code>
            </example>
            <param name="jsonString">a JSON string</param>
            <returns>the equivalent <see cref="T:LaunchDarkly.Sdk.LdValue"/></returns>
            <exception cref="T:System.Text.Json.JsonException">if the string could not be parsed as JSON</exception>
            <see cref="M:LaunchDarkly.Sdk.LdValue.ToJsonString"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.Type">
            <summary>
            The type of the JSON value.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.IsNull">
            <summary>
            True if the wrapped value is <see langword="null"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.IsNumber">
            <summary>
            True if the wrapped value is numeric.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.IsInt">
            <summary>
            True if the wrapped value is an integer.
            </summary>
            <remarks>
            JSON does not have separate types for integer and floating-point values; they are both just
            numbers. <see cref="P:LaunchDarkly.Sdk.LdValue.IsInt"/> returns true if and only if the actual numeric value has no
            fractional component, so <c>LdValue(2).IsInt</c> and <c>LdValue(2.0f).IsInt</c>
            are both true.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.IsString">
            <summary>
            True if the wrapped value is a string.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.AsBool">
            <summary>
            Gets the boolean value if this is a boolean.
            </summary>
            <remarks>
            <para>
            If the value is <see langword="null"/> or is not a boolean, this returns <see langword="false"/>.
            It will never throw an exception.
            </para>
            <para>
            This is equivalent to calling <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ToType(LaunchDarkly.Sdk.LdValue)"/> on
            <see cref="F:LaunchDarkly.Sdk.LdValue.Convert.Bool"/>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.AsString">
            <summary>
            Gets the string value if this is a string.
            </summary>
            <remarks>
            <para>
            If the value is <see langword="null"/> or is not a string, this returns <see langword="null"/>.
            It will never throw an exception. To get a JSON representation of the value as a string, use
            <see cref="M:LaunchDarkly.Sdk.LdValue.ToJsonString"/> instead.
            </para>
            <para>
            This is equivalent to calling <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ToType(LaunchDarkly.Sdk.LdValue)"/> on
            <see cref="F:LaunchDarkly.Sdk.LdValue.Convert.String"/>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.AsInt">
            <summary>
            Gets the value as an <see langword="int"/> if it is numeric.
            </summary>
            <remarks>
            <para>
            If the value is <see langword="null"/> or is not numeric, this returns zero. It will
            never throw an exception.
            </para>
            <para>
            If the value is a number but not an integer, it will be rounded toward zero.
            </para>
            <para>
            This is equivalent to calling <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ToType(LaunchDarkly.Sdk.LdValue)"/> on
            <see cref="F:LaunchDarkly.Sdk.LdValue.Convert.Int"/>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.AsLong">
            <summary>
            Gets the value as an <see langword="long"/> if it is numeric.
            </summary>
            <remarks>
            <para>
            If the value is <see langword="null"/> or is not numeric, this returns zero. It will
            never throw an exception.
            </para>
            <para>
            If the value is a number but not an integer, it will be rounded toward zero.
            </para>
            <para>
            This is equivalent to calling <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ToType(LaunchDarkly.Sdk.LdValue)"/> on
            <see cref="F:LaunchDarkly.Sdk.LdValue.Convert.Long"/>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.AsFloat">
            <summary>
            Gets the value as an <see langword="float"/> if it is numeric.
            </summary>
            <remarks>
            <para>
            If the value is <see langword="null"/> or is not numeric, this returns zero. It will never
            throw an exception.
            </para>
            <para>
            This is equivalent to calling <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ToType(LaunchDarkly.Sdk.LdValue)"/> on
            <see cref="F:LaunchDarkly.Sdk.LdValue.Convert.Float"/>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.AsDouble">
            <summary>
            Gets the value as an <see langword="double"/> if it is numeric.
            </summary>
            <remarks>
            <para>
            If the value is <see langword="null"/> or is not numeric, this returns zero. It will never
            throw an exception.
            </para>
            <para>
            This is equivalent to calling <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ToType(LaunchDarkly.Sdk.LdValue)"/> on
            <see cref="F:LaunchDarkly.Sdk.LdValue.Convert.Double"/>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.List">
            <summary>
            Returns an immutable list of values if this value is an array; otherwise an empty list.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.Dictionary">
            <summary>
            Returns an immutable dictionary of values if this value is an object; otherwise an empty dictionary.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.LdValue.Count">
            <summary>
            The number of values if this is an array or object; otherwise zero.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Get(System.Int32)">
            <summary>
            Retrieves an array item or object key by index. Never throws an exception.
            </summary>
            <param name="index">the item index</param>
            <returns>the item value if this is an array; the key if this is an object; otherwise <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Get(System.String)">
            <summary>
            Retrieves a object value by key. Never throws an exception.
            </summary>
            <param name="key">the key to retrieve</param>
            <returns>the value for the key, if this is an object; <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> if not found, or if this is not an object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.AsList``1(LaunchDarkly.Sdk.LdValue.Converter{``0})">
            <summary>
            Converts the value to a read-only list of elements of some type.
            </summary>
            <remarks>
            <para>
            The first parameter is one of the type converters from <see cref="T:LaunchDarkly.Sdk.LdValue.Convert"/>, or your own
            implementation of <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> for some type.
            </para>
            <para>
            If the value is not a JSON array at all, an empty list is returned. This method will
            never throw an exception.
            </para>
            <para>
            This is an efficient method because it does not copy values to a new list, but returns
            a read-only view into the existing array.
            </para>
            </remarks>
            <typeparam name="T">the element type</typeparam>
            <returns>an array of elements of the specified type</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.AsDictionary``1(LaunchDarkly.Sdk.LdValue.Converter{``0})">
            <summary>
            Converts the value to a read-only dictionary.
            </summary>
            <remarks>
            <para>
            The first parameter is one of the type converters from <see cref="T:LaunchDarkly.Sdk.LdValue.Convert"/>, or your own
            implementation of <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> for some type.
            </para>
            <para>
            This is an efficient method because it does not copy values to a new dictionary, but returns
            a read-only view into the existing object.
            </para>
            </remarks>
            <returns>a read-only dictionary</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ToJsonString">
            <summary>
            Converts the value to its JSON encoding.
            </summary>
            <remarks>
            For instance, <c>LdValue.Of(1).ToJsonString()</c> returns <c>"1"</c>;
            <c>LdValue.Of("x").ToJsonString()</c> returns <c>"\"x\""</c>; and
            <c>LdValue.Null.ToJsonString()</c> returns <c>"null"</c>.
            </remarks>
            <returns>the JSON encoding of the value</returns>
            <see cref="M:LaunchDarkly.Sdk.LdValue.Parse(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Equals(System.Object)">
            <summary>
            Performs a deep-equality comparison.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Equals(LaunchDarkly.Sdk.LdValue)">
            <summary>
            Performs a deep-equality comparison.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ToString">
            <summary>
            Converts the value to its JSON encoding (same as <see cref="M:LaunchDarkly.Sdk.LdValue.ToJsonString"/>).
            </summary>
            <returns>the JSON encoding of the value</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.LdValue.ArrayBuilder">
            <summary>
            An object returned by <see cref="M:LaunchDarkly.Sdk.LdValue.BuildArray"/> for building an array of values.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ArrayBuilder.Add(LaunchDarkly.Sdk.LdValue)">
            <summary>
            Adds a value to the array being built.
            </summary>
            <param name="value">the value to add</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ArrayBuilder.Add(System.Boolean)">
            <summary>
            Adds a value to the array being built.
            </summary>
            <param name="value">the value to add</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ArrayBuilder.Add(System.Int64)">
            <summary>
            Adds a value to the array being built.
            </summary>
            <remarks>
            Numeric values in LaunchDarkly have some precision limitations. For more details, see our
            documentation on <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag
            value types</see>.
            </remarks>
            <param name="value">the value to add</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ArrayBuilder.Add(System.Double)">
            <summary>
            Adds a value to the array being built.
            </summary>
            <remarks>
            Numeric values in LaunchDarkly have some precision limitations. For more details, see our
            documentation on <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag
            value types</see>.
            </remarks>
            <param name="value">the value to add</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ArrayBuilder.Add(System.String)">
            <summary>
            Adds a value to the array being built.
            </summary>
            <param name="value">the value to add</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ArrayBuilder.Build">
            <summary>
            Returns an array value containing the items provided so far.
            </summary>
            <returns>an immutable array <see cref="T:LaunchDarkly.Sdk.LdValue"/></returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.LdValue.ObjectBuilder">
            <summary>
            An object returned by <see cref="M:LaunchDarkly.Sdk.LdValue.BuildObject"/> for building an object from keys and values.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Add(System.String,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Adds a key-value pair to the object being built.
            </summary>
            <param name="key">the key to add</param>
            <param name="value">the value to add</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Add(System.String,System.Boolean)">
            <summary>
            Adds a key-value pair to the object being built.
            </summary>
            <param name="key">the key to add</param>
            <param name="value">the value to add</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Add(System.String,System.Int64)">
            <summary>
            Adds a key-value pair to the object being built.
            </summary>
            <remarks>
            Numeric values in LaunchDarkly have some precision limitations. For more details, see our
            documentation on <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag
            value types</see>.
            </remarks>
            <param name="key">the key to add</param>
            <param name="value">the value to add</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Add(System.String,System.Double)">
            <summary>
            Adds a key-value pair to the object being built.
            </summary>
            <remarks>
            Numeric values in LaunchDarkly have some precision limitations. For more details, see our
            documentation on <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag
            value types</see>.
            </remarks>
            <param name="key">the key to add</param>
            <param name="value">the value to add</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Remove(System.String)">
            <summary>
            Removes a key from the object, or does nothing if no such key exists.
            </summary>
            <param name="key">the key</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Set(System.String,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Adds a key-value pair to the object being built or replaces an existing key.
            </summary>
            <param name="key">the key</param>
            <param name="value">the value to add or replace</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Set(System.String,System.Boolean)">
            <summary>
            Adds a key-value pair to the object being built or replaces an existing key.
            </summary>
            <param name="key">the key</param>
            <param name="value">the value to add or replace</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Set(System.String,System.Int64)">
            <summary>
            Adds a key-value pair to the object being built or replaces an existing key.
            </summary>
            <remarks>
            Numeric values in LaunchDarkly have some precision limitations. For more details, see our
            documentation on <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag
            value types</see>.
            </remarks>
            <param name="key">the key</param>
            <param name="value">the value to add or replace</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Set(System.String,System.Double)">
            <summary>
            Adds a key-value pair to the object being built or replaces an existing key.
            </summary>
            <remarks>
            Numeric values in LaunchDarkly have some precision limitations. For more details, see our
            documentation on <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag
            value types</see>.
            </remarks>
            <param name="key">the key</param>
            <param name="value">the value to add or replace</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Set(System.String,System.String)">
            <summary>
            Adds a key-value pair to the object being built or replaces an existing key.
            </summary>
            <param name="key">the key</param>
            <param name="value">the value to add or replace</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Copy(LaunchDarkly.Sdk.LdValue)">
            <summary>
            Copies existing property keys and values from an existing JSON object; does
            nothing if the value is not an object.
            </summary>
            <param name="fromObject">a JSON value</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Add(System.String,System.String)">
            <summary>
            Adds a key-value pair to the object being built.
            </summary>
            <param name="key">the key to add</param>
            <param name="value">the value to add</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.ObjectBuilder.Build">
            <summary>
            Returns an object value containing the keys and values provided so far.
            </summary>
            <returns>an immutable object <see cref="T:LaunchDarkly.Sdk.LdValue"/></returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.LdValue.Converter`1">
            <summary>
            Defines a conversion between <see cref="T:LaunchDarkly.Sdk.LdValue"/> and some other type.
            </summary>
            <remarks>
            <para>
            Besides converting individual values, <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> provides factory methods
            like <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ArrayOf(`0[])"/> which transform a collection of the specified type to the
            corresponding <see cref="T:LaunchDarkly.Sdk.LdValue"/> complex type.
            </para>
            <para>
            There are type-specific instances of this class for commonly used types in
            <see cref="T:LaunchDarkly.Sdk.LdValue.Convert"/>, but you can also implement your own.
            </para>
            </remarks>
            <typeparam name="T">the type to convert from/to</typeparam>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Converter`1.FromType(`0)">
            <summary>
            Converts a value of the specified type to an <see cref="T:LaunchDarkly.Sdk.LdValue"/>.
            </summary>
            <remarks>
            This method should never throw an exception; if for some reason the value is invalid,
            it should return <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/>.
            </remarks>
            <param name="valueOfType">a value of this type</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.LdValue"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Converter`1.ToType(LaunchDarkly.Sdk.LdValue)">
            <summary>
            Converts an <see cref="T:LaunchDarkly.Sdk.LdValue"/> to a value of the specified type.
            </summary>
            <remarks>
            This method should never throw an exception; if the conversion cannot be done, it
            should return <c>default(T)</c>.
            </remarks>
            <param name="jsonValue">an <see cref="T:LaunchDarkly.Sdk.LdValue"/></param>
            <returns>a value of this type</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Converter`1.ArrayFrom(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> as an array, from a sequence of this type.
            </summary>
            <remarks>
            Values are copied, so subsequent changes to the source values do not affect the array.
            </remarks>
            <example>
            <code>
                var listOfInts = new List&lt;int&gt; { 1, 2, 3 };
                var arrayValue = LdValue.Convert.Int.ArrayFrom(arrayOfInts);
            </code>
            </example>
            <param name="values">a sequence of elements of the specified type</param>
            <returns>a struct representing a JSON array, or <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> if the
            parameter was null</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Converter`1.ArrayOf(`0[])">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> as an array, from a sequence of this type.
            </summary>
            <remarks>
            Values are copied, so subsequent changes to the source values do not affect the array.
            </remarks>
            <example>
            <code>
                var arrayValue = LdValue.Convert.Int.ArrayOf(1, 2, 3);
            </code>
            </example>
            <param name="values">any number of elements of the specified type</param>
            <returns>a struct representing a JSON array</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.LdValue.Converter`1.ObjectFrom(System.Collections.Generic.IReadOnlyDictionary{System.String,`0})">
            <summary>
            Initializes an <see cref="T:LaunchDarkly.Sdk.LdValue"/> as a JSON object, from a dictionary containing
            values of this type.
            </summary>
            <remarks>
            Values are copied, so subsequent changes to the source values do not affect the array.
            </remarks>
            <example>
            <code>
                var dictionaryOfInts = new Dictionary&lt;string, int&gt; { { "a", 1 }, { "b", 2 } };
                var objectValue = LdValue.Convert.Int.ObjectFrom(dictionaryOfInts);
            </code>
            </example>
            <param name="dictionary">a dictionary with string keys and values of the specified type</param>
            <returns>a struct representing a JSON object, or <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> if the
            parameter was null</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.LdValue.Convert">
            <summary>
            Predefined instances of <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> for commonly used types.
            </summary>
            <remarks>
            These are mostly useful for methods that convert <see cref="T:LaunchDarkly.Sdk.LdValue"/> to or from a
            collection of some type, such as <see cref="M:LaunchDarkly.Sdk.LdValue.Converter`1.ArrayOf(`0[])"/> and
            <see cref="M:LaunchDarkly.Sdk.LdValue.AsList``1(LaunchDarkly.Sdk.LdValue.Converter{``0})"/>.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValue.Convert.Bool">
            <summary>
            A <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> for the <see langword="bool"/> type.
            </summary>
            <remarks>
            Its behavior is consistent with <see cref="M:LaunchDarkly.Sdk.LdValue.Of(System.Boolean)"/> and
            <see cref="P:LaunchDarkly.Sdk.LdValue.AsBool"/>.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValue.Convert.Int">
            <summary>
            A <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> for the <see langword="int"/> type.
            </summary>
            <remarks>
            Its behavior is consistent with <see cref="M:LaunchDarkly.Sdk.LdValue.Of(System.Int32)"/> and
            <see cref="P:LaunchDarkly.Sdk.LdValue.AsInt"/>.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValue.Convert.Long">
            <summary>
            A <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> for the <see langword="long"/> type.
            </summary>
            <remarks>
            <para>
            Its behavior is consistent with <see cref="M:LaunchDarkly.Sdk.LdValue.Of(System.Int64)"/> and
            <see cref="P:LaunchDarkly.Sdk.LdValue.AsLong"/>.
            </para>
            <para>
            Note that the LaunchDarkly service, and most of the SDKs, represent numeric values internally
            in 64-bit floating-point, which has slightly less precision than a signed 64-bit
            <see langword="long"/>; therefore, the full range of <see langword="long"/> values cannot be
            accurately represented. If you need to set a user attribute to a numeric value with more
            significant digits than will fit in a <see langword="double"/>, it is best to encode it as a string.
            </para>
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValue.Convert.Float">
            <summary>
            A <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> for the <see langword="float"/> type.
            </summary>
            <remarks>
            Its behavior is consistent with <see cref="M:LaunchDarkly.Sdk.LdValue.Of(System.Single)"/> and
            <see cref="P:LaunchDarkly.Sdk.LdValue.AsFloat"/>.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValue.Convert.Double">
            <summary>
            A <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> for the <see langword="double"/> type.
            </summary>
            <remarks>
            Its behavior is consistent with <see cref="M:LaunchDarkly.Sdk.LdValue.Of(System.Double)"/> and
            <see cref="P:LaunchDarkly.Sdk.LdValue.AsDouble"/>.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValue.Convert.String">
            <summary>
            A <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> for the <see cref="T:System.String"/> type.
            </summary>
            <remarks>
            Its behavior is consistent with <see cref="M:LaunchDarkly.Sdk.LdValue.Of(System.String)"/> and
            <see cref="P:LaunchDarkly.Sdk.LdValue.AsString"/>.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.LdValue.Convert.Json">
            <summary>
            A <see cref="T:LaunchDarkly.Sdk.LdValue.Converter`1"/> that indicates the value is an <see cref="T:LaunchDarkly.Sdk.LdValue"/>
            and does not need to be converted.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.UnixMillisecondTime">
            <summary>
            An instant measured in milliseconds since the Unix epoch.
            </summary>
            <remarks>
            <para>
            LaunchDarkly services internally use this method of representing a date/timestamp as an
            integer. For instance, it is used for the creation time property of an analytics event.
            You do not need to refer to this type during normal usage of LaunchDarkly SDKs, but it
            is public and supported for convenience.
            </para>
            <para>
            When converting to or from JSON, it is encoded as an integer.
            </para>
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.UnixMillisecondTime.Epoch">
            <summary>
            The instant that defines the beginning of Unix time.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.UnixMillisecondTime.Value">
            <summary>
            The millisecond time value.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.UnixMillisecondTime.AsDateTime">
            <summary>
            Converts this value to a <c>DateTime</c>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.UnixMillisecondTime.Now">
            <summary>
            Gets the current date/time as a <c>UnixMillisecondTime</c>.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.UnixMillisecondTime.OfMillis(System.Int64)">
            <summary>
            Creates a <c>UnixMillisecondTime</c> value.
            </summary>
            <param name="millis">the millisecond time value</param>
            <returns>a <c>UnixMillisecondTime</c></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.UnixMillisecondTime.FromDateTime(System.DateTime)">
            <summary>
            Converts a <c>DateTime</c> to <c>UnixMillisecondTime</c>.
            </summary>
            <param name="dateTime">a <c>DateTime</c></param>
            <returns>a <c>UnixMillisecondTime</c></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.UnixMillisecondTime.PlusMillis(System.Int64)">
            <summary>
            Computes a new time based on a offset in milliseconds from this one.
            </summary>
            <param name="millis">a positive or negative number of milliseconds</param>
            <returns>a new <c>UnixMillisecondTime</c></returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.User">
            <summary>
            Attributes of a user for whom you are evaluating feature flags.
            </summary>
            <remarks>
            <para>
            <see cref="T:LaunchDarkly.Sdk.User"/> contains any user-specific properties that may be used in feature flag
            configurations to produce different flag variations for different users. You may define
            these properties however you wish.
            </para>
            <para>
            User supports only a subset of the behaviors that are available with the newer
            <see cref="T:LaunchDarkly.Sdk.Context"/> type. A User is equivalent to an individual Context that has a
            <see cref="P:LaunchDarkly.Sdk.Context.Kind"/> of <see cref="F:LaunchDarkly.Sdk.ContextKind.Default"/> ("user"); it also has
            more constraints on attribute values than a Context does (for instance, built-in attributes
            such as <see cref="P:LaunchDarkly.Sdk.User.Email"/> can only have string values). Older LaunchDarkly SDKs only
            had the User model, and the User type has been retained for backward compatibility, but it
            may be removed in a future SDK version; also, the SDK will always convert a User to a
            Context internally, which has some overhead. Therefore, developers are recommended to
            migrate toward using Context.
            </para>
            <para>
            The only mandatory property of User is the <see cref="P:LaunchDarkly.Sdk.User.Key"/>, which must uniquely identify
            each user. For authenticated users, this may be a username or e-mail address. For anonymous
            users, this could be an IP address or session ID.
            </para>
            <para>
            Besides the mandatory key, <see cref="T:LaunchDarkly.Sdk.User"/> supports two kinds of optional attributes:
            built-in attributes (e.g. <see cref="P:LaunchDarkly.Sdk.User.Name"/> and <see cref="P:LaunchDarkly.Sdk.User.Country"/>) and custom
            attributes. The built-in attributes have specific allowed value types; also, two of them
            (<see cref="P:LaunchDarkly.Sdk.User.Name"/> and <see cref="P:LaunchDarkly.Sdk.User.Anonymous"/>) have special meanings in LaunchDarkly.
            Custom attributes have flexible value types, and can have any names that do not conflict
            with built-in attributes.
            </para>
            <para>
            Both built-in attributes and custom attributes can be referenced in targeting rules, and
            are included in analytics data.
            </para>
            <para>
            Instances of <c>User</c> are immutable once created. They can be created with the factory method
            <see cref="M:LaunchDarkly.Sdk.User.WithKey(System.String)"/>, or using a builder pattern with <see cref="M:LaunchDarkly.Sdk.User.Builder(System.String)"/>
            or <see cref="M:LaunchDarkly.Sdk.User.Builder(LaunchDarkly.Sdk.User)"/>.
            </para>
            <para>
            For converting this type to or from JSON, see <see cref="N:LaunchDarkly.Sdk.Json"/>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.Key">
            <summary>
            The unique key for the user.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.IPAddress">
            <summary>
            The IP address of the user.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.Country">
            <summary>
            The country code for the user.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.FirstName">
            <summary>
            The user's first name.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.LastName">
            <summary>
            The user's last name.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.Name">
            <summary>
            The user's full name.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.Avatar">
            <summary>
            The user's avatar.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.Email">
            <summary>
            The user's email address.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.Anonymous">
            <summary>
            Whether or not the user is anonymous.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.Custom">
            <summary>
            Custom attributes for the user.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.User.PrivateAttributeNames">
            <summary>
            Used internally to track which attributes are private.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.User.Builder(System.String)">
            <summary>
            Creates an <see cref="T:LaunchDarkly.Sdk.IUserBuilder"/> for constructing a user object using a fluent syntax.
            </summary>
            <remarks>
            This is the only method for building a <see cref="T:LaunchDarkly.Sdk.User"/> if you are setting properties
            besides the <see cref="P:LaunchDarkly.Sdk.User.Key"/>. The <see cref="T:LaunchDarkly.Sdk.IUserBuilder"/> has methods for setting
            any number of properties, after which you call <see cref="M:LaunchDarkly.Sdk.IUserBuilder.Build"/> to get the
            resulting <see cref="T:LaunchDarkly.Sdk.User"/> instance.
            </remarks>
            <example>
            <code>
                var user = User.Builder("my-key").Name("Bob").Email("test@example.com").Build();
            </code>
            </example>
            <param name="key">a <see langword="string"/> that uniquely identifies a user</param>
            <returns>a builder object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.User.Builder(LaunchDarkly.Sdk.User)">
            <summary>
            Creates an <see cref="T:LaunchDarkly.Sdk.IUserBuilder"/> for constructing a user object, with its initial
            properties copied from an existeing user.
            </summary>
            <remarks>
            This is the same as calling <c>User.Builder(fromUser.Key)</c> and then calling the
            <see cref="T:LaunchDarkly.Sdk.IUserBuilder"/> methods to set each of the individual properties from their current
            values in <c>fromUser</c>. Modifying the builder does not affect the original <see cref="T:LaunchDarkly.Sdk.User"/>.
            </remarks>
            <example>
            <code>
                var user1 = User.Builder("my-key").FirstName("Joe").LastName("Schmoe").Build();
                var user2 = User.Builder(user1).FirstName("Jane").Build();
                // this is equvalent to: user2 = User.Builder("my-key").FirstName("Jane").LastName("Schmoe").Build();
            </code>
            </example>
            <param name="fromUser">the user to copy</param>
            <returns>a builder object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.User.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Collections.Immutable.ImmutableDictionary{System.String,LaunchDarkly.Sdk.LdValue},System.Collections.Immutable.ImmutableHashSet{System.String})">
            <summary>
            Creates a user by specifying all properties.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.User.WithKey(System.String)">
            <summary>
            Creates a user with the given key.
            </summary>
            <param name="key">a <see langword="string"/> that uniquely identifies a user</param>
            <returns>a <see cref="T:LaunchDarkly.Sdk.User"/> instance</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.User.GetAttribute(LaunchDarkly.Sdk.UserAttribute)">
            <summary>
            Gets the value of a user attribute, if present.
            </summary>
            <remarks>
            This can be either a built-in attribute or a custom one. It returns the value using the
            <see cref="T:LaunchDarkly.Sdk.LdValue"/> type, which can have any type that is supported in JSON. If the
            attribute does not exist, it returns <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/>.
            </remarks>
            <param name="attribute">the attribute to get</param>
            <returns>the attribute value or <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.User.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.User.Equals(LaunchDarkly.Sdk.User)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.User.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.UserAttribute">
            <summary>
            Represents a built-in or custom attribute name supported by <see cref="T:LaunchDarkly.Sdk.User"/>.
            </summary>
            <remarks>
            <para>
            Application code rarely needs to use this type; it is used internally by the SDK for
            efficiency in flag evaluations. It can also be used as a reference for the constant
            names of built-in attributes such as <see cref="F:LaunchDarkly.Sdk.UserAttribute.Email"/>. However, in the newer
            <see cref="T:LaunchDarkly.Sdk.Context"/> model, there are very few reserved attribute names, so the
            equivalent of <see cref="F:LaunchDarkly.Sdk.UserAttribute.Email"/> would simply be a custom attribute called "email".
            </para>
            <para>
            For a fuller description of user attributes and how they can be referenced in feature
            flag rules, read the reference guides on
            <a href="https://docs.launchdarkly.com/home/users/attributes">Setting user attributes</a>
            and <a href="https://docs.launchdarkly.com/home/flags/targeting-users">Targeting users</a>.
            </para>
            </remarks>
            <seealso cref="T:LaunchDarkly.Sdk.User"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.UserAttribute.AttributeName">
            <summary>
            The case-sensitive attribute name.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.UserAttribute.BuiltIn">
            <summary>
            True for a built-in attribute or false for a custom attribute.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.UserAttribute.Key">
            <summary>
            Represents the user key attribute.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.UserAttribute.IPAddress">
            <summary>
            Represents the IP address attribute.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.UserAttribute.Email">
            <summary>
            Represents the user email attribute.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.UserAttribute.Name">
            <summary>
            Represents the full name attribute.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.UserAttribute.Avatar">
            <summary>
            Represents the avatar URL attribute.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.UserAttribute.FirstName">
            <summary>
            Represents the first name attribute.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.UserAttribute.LastName">
            <summary>
            Represents the last name attribute.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.UserAttribute.Country">
            <summary>
            Represents the country attribute.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.UserAttribute.Anonymous">
            <summary>
            Represents the anonymous attribute.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.UserAttribute.ForName(System.String)">
            <summary>
            Returns a UserAttribute instance for the specified attribute name.
            </summary>
            <param name="name">the attribute name</param>
            <returns>a <see cref="T:LaunchDarkly.Sdk.UserAttribute"/></returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.IUserBuilder">
            <summary>
            A mutable object that uses the Builder pattern to specify properties for a <see cref="T:LaunchDarkly.Sdk.User"/> object.
            </summary>
            <remarks>
            <para>
            Obtain an instance of this class by calling <see cref="M:LaunchDarkly.Sdk.User.Builder(System.String)"/>.
            </para>
            <para>
            All of the builder methods for setting a user attribute return a reference to the same builder, so they can be
            chained together (see example). Some of them have the return type <see cref="T:LaunchDarkly.Sdk.IUserBuilderCanMakeAttributePrivate"/>
            rather than <see cref="T:LaunchDarkly.Sdk.IUserBuilder"/>; those are the user attributes that can be designated as private.
            </para>
            </remarks>
            <example>
            <code>
                var user = User.Builder("my-key")
                    .Name("Bob")
                    .Email("test@example.com")
                    .Build();
            </code>
            </example>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Build">
            <summary>
            Creates a <see cref="T:LaunchDarkly.Sdk.User"/> based on the properties that have been set on the builder.
            Modifying the builder after this point does not affect the returned <see cref="T:LaunchDarkly.Sdk.User"/>.
            </summary>
            <returns>the configured <see cref="T:LaunchDarkly.Sdk.User"/> object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Key(System.String)">
            <summary>
            Sets the unique key for a user.
            </summary>
            <param name="key">the key</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.IPAddress(System.String)">
            <summary>
            Sets the IP address for a user.
            </summary>
            <param name="ipAddress">the IP address for the user</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Country(System.String)">
            <summary>
            Sets the country identifier for a user.
            </summary>
            <remarks>
            This is commonly either a 2- or 3-character standard country code, but LaunchDarkly does not validate
            this property or restrict its possible values.
            </remarks>
            <param name="country">the country for the user</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.FirstName(System.String)">
            <summary>
            Sets the first name for a user.
            </summary>
            <param name="firstName">the first name for the user</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.LastName(System.String)">
            <summary>
            Sets the last name for a user.
            </summary>
            <param name="lastName">the last name for the user</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Name(System.String)">
            <summary>
            Sets the full name for a user.
            </summary>
            <param name="name">the name for the user</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Avatar(System.String)">
            <summary>
            Sets the avatar URL for a user.
            </summary>
            <param name="avatar">the avatar URL for the user</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Email(System.String)">
            <summary>
            Sets the email address for a user.
            </summary>
            <param name="email">the email address for the user</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Anonymous(System.Boolean)">
            <summary>
            Sets whether this user is anonymous, meaning that the user key will not appear on your LaunchDarkly dashboard.
            </summary>
            <param name="anonymous">true if the user is anonymous</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Custom(System.String,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Adds a custom attribute whose value is a JSON value of any kind.
            </summary>
            <remarks>
            <para>
            The rules for allowable data types in custom attributes are the same as for flag
            variation values. For more details, see our documentation on
            <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag value types</see>.
            </para>
            <para>
            When set to one of the <a href="https://docs.launchdarkly.com/home/flags/targeting-users#targeting-rules-based-on-user-attributes">built-in
            user attribute keys</a>, this custom attribute will be ignored.
            </para>
            </remarks>
            <example>
            <code>
                var arrayOfIntsValue = LdValue.FromValues(new int[] { 1, 2, 3 });
                var user = User.Builder("key").Custom("numbers", arrayOfIntsValue).Build();
            </code>
            </example>
            <param name="name">the key for the custom attribute</param>
            <param name="value">the value for the custom attribute</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Custom(System.String,System.Boolean)">
            <summary>
            Adds a custom attribute with a boolean value.
            </summary>
            <remarks>
            When set to one of the <see href="https://docs.launchdarkly.com/home/flags/targeting-users#targeting-rules-based-on-user-attributes">built-in
            user attribute keys</see>, this custom attribute will be ignored.
            </remarks>
            <param name="name">the key for the custom attribute</param>
            <param name="value">the value for the custom attribute</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Custom(System.String,System.String)">
            <summary>
            Adds a custom attribute with a string value.
            </summary>
            <remarks>
            When set to one of the <see href="https://docs.launchdarkly.com/home/flags/targeting-users#targeting-rules-based-on-user-attributes">built-in
            user attribute keys</see>, this custom attribute will be ignored.
            </remarks>
            <param name="name">the key for the custom attribute</param>
            <param name="value">the value for the custom attribute</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Custom(System.String,System.Int32)">
            <summary>
            Adds a custom attribute with an integer value.
            </summary>
            <remarks>
            When set to one of the <see href="https://docs.launchdarkly.com/home/flags/targeting-users#targeting-rules-based-on-user-attributes">built-in
            user attribute keys</see>, this custom attribute will be ignored.
            </remarks>
            <param name="name">the key for the custom attribute</param>
            <param name="value">the value for the custom attribute</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Custom(System.String,System.Int64)">
            <summary>
            Adds a custom attribute with a <see langword="long"/> value.
            </summary>
            <remarks>
            <para>
            Numeric values in custom attributes have some precision limitations, the same as for
            numeric values in flag variations. For more details, see our documentation on
            <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag value types</see>.
            </para>
            <para>
            When set to one of the <see href="https://docs.launchdarkly.com/home/flags/targeting-users#targeting-rules-based-on-user-attributes">built-in
            user attribute keys</see>, this custom attribute will be ignored.
            </para>
            </remarks>
            <param name="name">the key for the custom attribute</param>
            <param name="value">the value for the custom attribute</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Custom(System.String,System.Single)">
            <summary>
            Adds a custom attribute with a floating-point value.
            </summary>
            <remarks>
            <para>
            Numeric values in custom attributes have some precision limitations, the same as for
            numeric values in flag variations. For more details, see our documentation on
            <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag value types</see>.
            </para>
            <para>
            When set to one of the <see href="https://docs.launchdarkly.com/home/flags/targeting-users#targeting-rules-based-on-user-attributes">built-in
            user attribute keys</see>, this custom attribute will be ignored.
            </para>
            </remarks>
            <param name="name">the key for the custom attribute</param>
            <param name="value">the value for the custom attribute</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilder.Custom(System.String,System.Double)">
            <summary>
            Adds a custom attribute with a <see langword="double"/> value.
            </summary>
            <remarks>
            <para>
            Numeric values in custom attributes have some precision limitations, the same as for
            numeric values in flag variations. For more details, see our documentation on
            <see href="https://docs.launchdarkly.com/sdk/concepts/flag-types">flag value types</see>.
            </para>
            <para>
            When set to one of the <see href="https://docs.launchdarkly.com/home/flags/targeting-users#targeting-rules-based-on-user-attributes">built-in
            user attribute keys</see>, this custom attribute will be ignored.
            </para>
            </remarks>
            <param name="name">the key for the custom attribute</param>
            <param name="value">the value for the custom attribute</param>
            <returns>the same builder</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.IUserBuilderCanMakeAttributePrivate">
            <summary>
            An extension of <see cref="T:LaunchDarkly.Sdk.IUserBuilder"/> that allows attributes to be made private via
            the <see cref="M:LaunchDarkly.Sdk.IUserBuilderCanMakeAttributePrivate.AsPrivateAttribute"/> method.
            </summary>
            <remarks>
            <see cref="T:LaunchDarkly.Sdk.IUserBuilder"/> setter methods for attribute that can be made private always
            return this interface, rather than returning <see cref="T:LaunchDarkly.Sdk.IUserBuilder"/>. See
            <see cref="M:LaunchDarkly.Sdk.IUserBuilderCanMakeAttributePrivate.AsPrivateAttribute"/> for more details.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.IUserBuilderCanMakeAttributePrivate.AsPrivateAttribute">
            <summary>
            Marks the last attribute that was set on this builder as being a private attribute: that is, its value will not be
            sent to LaunchDarkly.
            </summary>
            <remarks>
            <para>
            This action only affects analytics events that are generated by this particular user object. To mark some (or all)
            user attributes as private for <i>all</i> users, use the configuration properties <c>PrivateAttributeName</c>
            and <c>AllAttributesPrivate</c>.
            </para>
            <para>
            Not all attributes can be made private: <see cref="M:LaunchDarkly.Sdk.IUserBuilder.Key(System.String)"/> and <see cref="M:LaunchDarkly.Sdk.IUserBuilder.Anonymous(System.Boolean)"/>
            cannot be private. This is enforced by the compiler, since the builder methods for attributes that can be made private are
            the only ones that return <see cref="T:LaunchDarkly.Sdk.IUserBuilderCanMakeAttributePrivate"/>; therefore, you cannot write an expression
            like <c>User.Builder("user-key").AsPrivateAttribute()</c>.
            </para>
            </remarks>
            <example>
            <para>
            In this example, <c>FirstName</c> and <c>LastName</c> are marked as private, but <c>Country</c> is not.
            </para>
            <code>
                var user = User.Builder("user-key")
                    .FirstName("Pierre").AsPrivateAttribute()
                    .LastName("Menard").AsPrivateAttribute()
                    .Country("ES")
                    .Build();
            </code>
            </example>
            <returns>the same builder</returns>
        </member>
    </members>
</doc>
