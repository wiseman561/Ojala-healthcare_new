<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LaunchDarkly.ServerSdk</name>
    </assembly>
    <members>
        <member name="T:LaunchDarkly.Sdk.Server.Components">
            <summary>
            Provides factories for the standard implementations of LaunchDarkly component interfaces.
            </summary>
            <remarks>
            Some of the configuration options in <see cref="T:LaunchDarkly.Sdk.Server.ConfigurationBuilder"/> affect the entire SDK, but others are
            specific to one area of functionality, such as how the SDK receives feature flag updates or processes
            analytics events. For the latter, the standard way to specify a configuration is to call one of the
            static methods in <see cref="T:LaunchDarkly.Sdk.Server.Components"/> (such as <see cref="M:LaunchDarkly.Sdk.Server.Components.StreamingDataSource"/>),
            apply any desired configuration change to the object that that method returns (such as
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder.InitialReconnectDelay(System.TimeSpan)"/>), and then use the
            corresponding method in <see cref="T:LaunchDarkly.Sdk.Server.ConfigurationBuilder"/> (such as
            <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataSource(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataSource})"/>) to use that
            configured component in the SDK.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Components.BigSegments(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore})">
            <summary>
            Returns a configuration builder for the SDK's Big Segments feature.
            </summary>
            <remarks>
            <para>
            "Big Segments" are a specific type of segments. For more information, read the LaunchDarkly
            documentation about segments: https://docs.launchdarkly.com/home/users/segments
            </para>
            <para>
            After configuring this object, use <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.BigSegments(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration})"/>
            to store it in your SDK configuration. For example, using the Redis integration:
            </para>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .BigSegments(Components.BigSegments(Redis.DataStore().Prefix("app1"))
                        .ContextCacheSize(2000))
                    .Build();
            </code>
            <para>
            You must always specify the <paramref name="storeConfig"/> parameter, to tell the SDK what database
            you are using. Several database integrations exist for the LaunchDarkly SDK, each with its own
            behavior and options specific to that database; this is described via some implementation of
            <c>IComponentConfigurer&lt;IBigSegmentStore&gt;</c>. The <see cref="T:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder"/>
            adds configuration options for aspects of SDK behavior that are independent of the database. In the
            example above, <code>Prefix</code> is an option specifically for the Redis integration, whereas
            <code>ContextCacheSize</code> is an option that can be used for any data store type.
            </para>
            </remarks>
            <param name="storeConfig">the factory/configuration builder for the underlying data store</param>
            <returns>a configuration builder</returns>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Components.ExternalUpdatesOnly">
            <summary>
            Returns a configuration object that disables direct connection with LaunchDarkly for feature
            flag updates.
            </summary>
            <remarks>
            Passing this to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataSource(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataSource})"/> causes the SDK
            not to retrieve feature flag data from LaunchDarkly, regardless of any other configuration. This is
            normally done if you are using the <a href="https://docs.launchdarkly.com/home/relay-proxy">Relay Proxy</a>
            in "daemon mode", where an external process-- the Relay Proxy-- connects to LaunchDarkly and populates
            a persistent data store with the feature flag data. The data store could also be populated by
            another process that is running the LaunchDarkly SDK. If there is no external process updating
            the data store, then the SDK will not have any feature flag data and will return application
            default values only.
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .DataSource(Components.ExternalUpdatesOnly)
                    .DataStore(Components.PersistentDataStore(Redis.DataStore())) // assuming the Relay Proxy is using Redis
                    .Build();
            </code>
            </example>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Components.HttpConfiguration">
            <summary>
            Returns a configuration builder for the SDK's networking configuration.
            </summary>
            <remarks>
            Passing this to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Http(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration})"/>, after setting any desired properties on
            the builder, applies this configuration to all HTTP/HTTPS requests made by the SDK.
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .Http(
                        Components.HttpConfiguration()
                            .ConnectTimeout(TimeSpan.FromMilliseconds(3000))
                    )
                    .Build();
            </code>
            </example>
            <returns>a configuration builder</returns>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Components.InMemoryDataStore">
            <summary>
            Returns a factory for the default in-memory implementation of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/>.
            </summary>
            <remarks>
            Since it is the default, you do not normally need to call this method, unless you need to create
            a data store instance for testing purposes.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Components.Logging">
            <summary>
            Returns a configuration builder for the SDK's logging configuration.
            </summary>
            <remarks>
            <para>
            Passing this to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Logging(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration})" />,
            after setting any desired properties on the builder, applies this configuration to the SDK.
            </para>
            <para>
            The default behavior, if you do not change any properties, is to send log output to
            <see cref="P:System.Console.Error"/>, with a minimum level of <c>Info</c> (that is, <c>Debug</c> logging
            is disabled).
            </para>
            <para>
            For more about how logging works in the SDK, see the <a href="https://docs.launchdarkly.com/sdk/features/logging#net">SDK
            SDK reference guide</a>.
            </para>
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder("my-sdk-key")
                    .Logging(Components.Logging().Level(LogLevel.Warn)))
                    .Build();
            </code>
            </example>
            <returns>a configuration builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Logging(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration})" />
            <seealso cref="M:LaunchDarkly.Sdk.Server.Components.Logging(LaunchDarkly.Logging.ILogAdapter)"/>
            <seealso cref="P:LaunchDarkly.Sdk.Server.Components.NoLogging" />
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Components.Logging(LaunchDarkly.Logging.ILogAdapter)">
            <summary>
            Returns a configuration builder for the SDK's logging configuration, specifying the logging implementation.
            </summary>
            <remarks>
            <para>
            This is a shortcut for calling <see cref="M:LaunchDarkly.Sdk.Server.Components.Logging"/> and then
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Adapter(LaunchDarkly.Logging.ILogAdapter)"/>, to specify a logging implementation
            other than the default one. For instance, in a .NET Core application you can use
            <c>LaunchDarkly.Logging.Logs.CoreLogging</c> to use the standard .NET Core logging framework.
            </para>
            <para>
            If you do not also specify a minimum logging level with <see cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Level(LaunchDarkly.Logging.LogLevel)"/>,
            or with some other filtering mechanism that is defined by an external logging framework, then the
            log output will show all logging levels including <c>Debug</c>.
            </para>
            <para>
            For more about log adapters, see <see cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Adapter(LaunchDarkly.Logging.ILogAdapter)"/>.
            </para>
            <para>
            For more about how logging works in the SDK, see the <a href="https://docs.launchdarkly.com/sdk/features/logging#net">SDK
            SDK reference guide</a>.
            </para>
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .Logging(Components.Logging(Logs.CoreLogging(coreLoggingFactory)))
                    .Build();
            </code>
            </example>
            <param name="adapter">an <c>ILogAdapter</c> for the desired logging implementation</param>
            <returns>a configuration builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Logging(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration})" />
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Adapter(LaunchDarkly.Logging.ILogAdapter)" />
            <seealso cref="M:LaunchDarkly.Sdk.Server.Components.Logging"/>
            <seealso cref="P:LaunchDarkly.Sdk.Server.Components.NoLogging" />
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Components.NoEvents">
            <summary>
            Returns a configuration object that disables analytics events.
            </summary>
            <remarks>
            Passing this to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Events(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor})"/> causes
            the SDK to discard all analytics events and not send them to LaunchDarkly, regardless of
            any other configuration.
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .Events(Components.NoEvents)
                    .Build();
            </code>
            </example>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Components.NoLogging">
            <summary>
            A configuration object that disables logging.
            </summary>
            <remarks>
            This is the same as <c>Logging(LaunchDarkly.Logging.Logs.None)</c>.
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .Logging(Components.NoLogging)
                    .Build();
            </code>
            </example>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Components.PersistentDataStore(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore})">
            <summary>
            Returns a configurable factory for a persistent data store.
            </summary>
            <remarks>
            <para>
            This method takes a configuration builder that is provided by
            some persistent data store implementation (i.e. a database integration), and converts
            it to a <see cref="T:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder"/> which can be used to add
            caching behavior. You can then pass the <see cref="T:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder"/>
            object to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataStore(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataStore})"/> to use this
            configuration in the SDK. Example usage:
            </para>
            <code>
                var myStore = Components.PersistentDataStore(Redis.FeatureStore())
                    .CacheTtl(TimeSpan.FromSeconds(45));
                var config = Configuration.Builder(sdkKey)
                    .DataStore(myStore)
                    .Build();
            </code>
            <para>
            The method is overloaded because some persistent data store implementations
            use <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/> while others use
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync"/>.
            </para>
            </remarks>
            <param name="storeConfig">the configuration builder/factory for the underlying data store</param>
            <returns>a configuration builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Components.PersistentDataStore(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync})">
            <summary>
            Returns a configurable factory for a persistent data store.
            </summary>
            <remarks>
            <para>
            This method takes a configuration builder that is provided by
            some persistent data store implementation (i.e. a database integration), and converts
            it to a <see cref="T:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder"/> which can be used to add
            caching behavior. You can then pass the <see cref="T:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder"/>
            object to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataStore(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataStore})"/> to use this
            configuration in the SDK. Example usage:
            </para>
            <code>
                var myStore = Components.PersistentDataStore(Redis.FeatureStore())
                    .CacheTtl(TimeSpan.FromSeconds(45));
                var config = Configuration.Builder(sdkKey)
                    .DataStore(myStore)
                    .Build();
            </code>
            <para>
            The method is overloaded because some persistent data store implementations
            use <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/> while others use
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync"/>.
            </para>
            </remarks>
            <param name="storeConfig">the configuration builder/factory for the underlying data store</param>
            <returns>a configuration builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Components.PollingDataSource">
            <summary>
            Returns a configurable factory for using polling mode to get feature flag data.
            </summary>
            <remarks>
            <para>
            This is not the default behavior; by default, the SDK uses a streaming connection to receive feature flag
            data from LaunchDarkly. In polling mode, the SDK instead makes a new HTTP request to LaunchDarkly at regular
            intervals. HTTP caching allows it to avoid redundantly downloading data if there have been no changes, but
            polling is still less efficient than streaming and should only be used on the advice of LaunchDarkly support.
            </para>
            <para>
            To use polling mode, call this method to obtain a builder, change its properties with the
            <see cref="T:LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder"/> methods, and pass it to
            <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataSource(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataSource})"/>.
            </para>
            <para>
            Setting <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Offline(System.Boolean)"/> to <see langword="true"/> will superseded this
            setting and completely disable network requests.
            </para>
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .DataSource(Components.PollingDataSource()
                        .PollInterval(TimeSpan.FromSeconds(45)))
                    .Build();
            </code>
            </example>
            <returns>a builder for setting polling connection properties</returns>
            <see cref="M:LaunchDarkly.Sdk.Server.Components.StreamingDataSource"/>
            <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataSource(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataSource})"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Components.ServiceEndpoints">
            <summary>
            Returns a builder for configuring custom service URIs.
            </summary>
            <remarks>
            <para>
            Passing this to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.ServiceEndpoints(LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder)" />,
            after setting any desired properties on the builder, applies this configuration to the SDK.
            </para>
            <para>
            Most applications will never need to use this method. The main use case is when connecting
            to a <a href="https://docs.launchdarkly.com/home/advanced/relay-proxy">LaunchDarkly
            Relay Proxy</a> instance. For more information, see <see cref="T:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder"/>.
            </para>
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(mobileKey)
                    .ServiceEndpoints(Components.ServiceEndpoints().RelayProxy("http://my-relay-hostname:80"))
                    .Build();
            </code>
            </example>
            <returns>a configuration builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.ServiceEndpoints(LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder)" />
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Components.StreamingDataSource">
            <summary>
            Returns a configurable factory for using streaming mode to get feature flag data.
            </summary>
            <remarks>
            <para>
            By default, the SDK uses a streaming connection to receive feature flag data from LaunchDarkly. To use
            the default behavior, you do not need to call this method. However, if you want to customize the behavior
            of the connection, call this method to obtain a builder, change its properties with the
            <see cref="T:LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder"/> methods, and pass it to
            <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataSource(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataSource})"/>.
            </para>
            <para>
            Setting <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Offline(System.Boolean)"/> to <see langword="true"/> will superseded this
            setting and completely disable network requests.
            </para>
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .DataSource(Components.StreamingDataSource()
                        .InitialReconnectDelay(TimeSpan.FromMilliseconds(500)))
                    .Build();
            </code>
            </example>
            <returns>a builder for setting streaming connection properties</returns>
            <see cref="M:LaunchDarkly.Sdk.Server.Components.PollingDataSource"/>
            <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataSource(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataSource})"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Components.SendEvents">
            <summary>
            Returns a configuration builder for analytics event delivery.
            </summary>
            <remarks>
            <para>
            The default configuration has events enabled with default settings. If you want to
            customize this behavior, call this method to obtain a builder, change its properties
            with the <see cref="T:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder"/> methods, and pass it to
            <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Events(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor})"/>.
            </para>
            <para>
            To completely disable sending analytics events, use <see cref="P:LaunchDarkly.Sdk.Server.Components.NoEvents"/> instead.
            </para>
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .Events(Components.SendEvents()
                        .Capacity(5000)
                        .FlushInterval(TimeSpan.FromSeconds(2)))
                    .Build();
            </code>
            </example>
            <returns>a builder for setting event properties</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Configuration">
            <summary>
            Configuration options for <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/>. This class should normally be constructed with
            <see cref="M:LaunchDarkly.Sdk.Server.Configuration.Builder(System.String)"/>.
            </summary>
            <remarks>
            Instances of <see cref="T:LaunchDarkly.Sdk.Server.Configuration"/> are immutable once created. They can be created with the factory method
            <see cref="M:LaunchDarkly.Sdk.Server.Configuration.Default(System.String)"/>, or using a builder pattern with <see cref="M:LaunchDarkly.Sdk.Server.Configuration.Builder(System.String)"/>
            or <see cref="M:LaunchDarkly.Sdk.Server.Configuration.Builder(LaunchDarkly.Sdk.Server.Configuration)"/>.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.BigSegments">
            <summary>
            A builder for <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.DataSource">
            <summary>
            A factory object that creates an implementation of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSource"/>, which will
            receive feature flag data.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.DataStore">
            <summary>
            A factory object that creates an implementation of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/>, to be used
            for holding feature flags and related data received from LaunchDarkly.
            </summary>
            <remarks>
            The default is <see cref="P:LaunchDarkly.Sdk.Server.Components.InMemoryDataStore"/>, but you may provide a custom
            implementation.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.DiagnosticOptOut">
            <summary>
            True if diagnostic events have been disabled.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.Events">
            <summary>
            A factory object that creates an implementation of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor"/>, which will
            process all analytics events.
            </summary>
            <remarks>
            The default is <see cref="M:LaunchDarkly.Sdk.Server.Components.SendEvents"/>, but you may provide a custom
            implementation.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.Http">
            <summary>
            A builder that creates an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration"/>, defining the SDK's networking
            behavior.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.Logging">
            <summary>
            A builder that creates a <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration"/>, defining the SDK's
            logging configuration.
            </summary>
            <remarks>
            SDK components should not use this property directly; instead, the SDK client will use it to create a
            logger instance which will be in <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext"/>.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.Offline">
            <summary>
            Whether or not this client is offline. If true, no calls to Launchdarkly will be made.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.SdkKey">
            <summary>
            The SDK key for your LaunchDarkly environment.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.ServiceEndpoints">
            <summary>
            Defines the base service URIs used by SDK components.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Configuration.StartWaitTime">
            <summary>
            How long the client constructor will block awaiting a successful connection to
            LaunchDarkly.
            </summary>
            <remarks>
            Setting this to 0 will not block and will cause the constructor to return immediately. The
            default value is 10 seconds.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Configuration.Default(System.String)">
            <summary>
            Creates a configuration with all parameters set to the default.
            </summary>
            <param name="sdkKey">the SDK key for your LaunchDarkly environment</param>
            <returns>a <c>Configuration</c> instance</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Configuration.Builder(System.String)">
            <summary>
            Creates a <see cref="T:LaunchDarkly.Sdk.Server.ConfigurationBuilder"/> for constructing a configuration object using a fluent syntax.
            </summary>
            <remarks>
            This is the only method for building a <see cref="T:LaunchDarkly.Sdk.Server.Configuration"/> if you are setting properties
            besides the <c>SdkKey</c>. The <see cref="T:LaunchDarkly.Sdk.Server.ConfigurationBuilder"/> has methods for setting any number of
            properties, after which you call <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Build"/> to get the resulting
            <c>Configuration</c> instance.
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder("my-sdk-key")
                    .StartWaitTime(TimeSpan.FromSeconds(5))
                    .Build();
            </code>
            </example>
            <param name="sdkKey">the SDK key for your LaunchDarkly environment</param>
            <returns>a builder object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Configuration.Builder(LaunchDarkly.Sdk.Server.Configuration)">
            <summary>
            Creates an <see cref="T:LaunchDarkly.Sdk.Server.ConfigurationBuilder"/> based on an existing configuration.
            </summary>
            <remarks>
            Modifying properties of the builder will not affect the original configuration object.
            </remarks>
            <example>
            <code>
                var configWithCustomEventProperties = Configuration.Builder(originalConfig)
                    .Events(Components.SendEvents().Capacity(50000))
                    .Build();
            </code>
            </example>
            <param name="fromConfiguration">the existing configuration</param>
            <returns>a builder object</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.ConfigurationBuilder">
            <summary>
            A mutable object that uses the Builder pattern to specify properties for a <see cref="T:LaunchDarkly.Sdk.Server.Configuration"/> object.
            </summary>
            <remarks>
            Obtain an instance of this class by calling <see cref="M:LaunchDarkly.Sdk.Server.Configuration.Builder(System.String)"/>.
            
            All of the builder methods for setting a configuration property return a reference to the same builder, so they can be
            chained together.
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder("my-sdk-key")
                    .StartWaitTime(TimeSpan.FromSeconds(5))
                    .Events(Components.SendEvents().Capacity(50000))
                    .Build();
            </code>
            </example>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Build">
            <summary>
            Creates a <see cref="T:LaunchDarkly.Sdk.Server.Configuration"/> based on the properties that have been set on the builder.
            Modifying the builder after this point does not affect the returned <see cref="T:LaunchDarkly.Sdk.Server.Configuration"/>.
            </summary>
            <returns>the configured <c>Configuration</c> object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.BigSegments(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration})">
            <summary>
            Sets the configuration of the SDK's Big Segments feature.
            </summary>
            <remarks>
            <para>
            "Big Segments" are a specific type of user segments. For more information, read the LaunchDarkly
            documentation about user segments: https://docs.launchdarkly.com/home/users/segments
            </para>
            <para>
            If you are using this feature, you will normally specify a database implementation that matches how
            the LaunchDarkly Relay Proxy is configured, since the Relay Proxy manages the Big Segment data.
            </para>
            <para>
            By default, there is no implementation and Big Segments cannot be evaluated. In this case, any flag
            evaluation that references a Big Segment will behave as if no users are included in any Big
            Segments, and the <see cref="T:LaunchDarkly.Sdk.EvaluationReason"/> associated with any such flag evaluation will have
            a <see cref="P:LaunchDarkly.Sdk.EvaluationReason.BigSegmentsStatus"/> of <see cref="F:LaunchDarkly.Sdk.BigSegmentsStatus.NotConfigured"/>.
            </para>
            </remarks>
            <example>
            <code>
                // This example uses the Redis integration
                var config = Configuration.Builder(sdkKey)
                    .BigSegments(Components.BigSegments(Redis.DataStore().Prefix("app1"))
                        .ContextCacheSize(2000))
                    .Build();
            </code>
            </example>
            <param name="bigSegmentsConfig">a configuration factory object returned by
            <see cref="M:LaunchDarkly.Sdk.Server.Components.BigSegments(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore})"/></param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataSource(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataSource})">
            <summary>
            Sets the implementation of the component that receives feature flag data from LaunchDarkly,
            using a factory object.
            </summary>
            <remarks>
            <para>
            Depending on the implementation, the factory may be a builder that allows you to set other
            configuration options as well.
            </para>
            <para>
            The default is <see cref="M:LaunchDarkly.Sdk.Server.Components.StreamingDataSource"/>. You may instead use
            <see cref="M:LaunchDarkly.Sdk.Server.Components.PollingDataSource"/>, <see cref="P:LaunchDarkly.Sdk.Server.Components.ExternalUpdatesOnly"/>, or a
            test fixture such as <see cref="M:LaunchDarkly.Sdk.Server.Integrations.FileData.DataSource"/>. See those methods for
            details on how to configure them.
            </para>
            </remarks>
            <param name="dataSourceConfig">the factory object</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataStore(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataStore})">
            <summary>
            Sets the data store implementation to be used for holding feature flags
            and related data received from LaunchDarkly.
            </summary>
            <remarks>
            <para>
            The default is <see cref="P:LaunchDarkly.Sdk.Server.Components.InMemoryDataStore"/>, but you may choose to use a custom
            implementation such as a database integration. For the latter, you will normally
            use <see cref="M:LaunchDarkly.Sdk.Server.Components.PersistentDataStore(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore})"/> in
            conjunction with some specific type for that integration.
            </para>
            <para>
            This is specified as a factory because the SDK normally manages the lifecycle of the
            data store; it will create an instance from the factory when an <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/>
            is created, and dispose of that instance when disposing of the client.
            </para>
            </remarks>
            <param name="dataStoreConfig">the factory object</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DiagnosticOptOut(System.Boolean)">
            <summary>
              Set to true to opt out of sending diagnostic events.
            </summary>
            <remarks>
              <para>
                Unless the diagnosticOptOut field is set to true, the client will send some
                diagnostics data to the LaunchDarkly servers in order to assist in the development
                of future SDK improvements. These diagnostics consist of an initial payload
                containing some details of SDK in use, the SDK's configuration, and the platform the
                SDK is being run on, as well as payloads sent periodically with information on
                irregular occurrences such as dropped events.
              </para>
            </remarks>
            <param name="diagnosticOptOut">true to disable diagnostic events</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Events(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor})">
            <summary>
            Sets the implementation of the component that processes analytics events.
            </summary>
            <remarks>
            The default is <see cref="M:LaunchDarkly.Sdk.Server.Components.SendEvents"/>, but you may choose to set it to a customized
            <see cref="T:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder"/>, a custom implementation (for instance, a test fixture), or
            disable events with <see cref="P:LaunchDarkly.Sdk.Server.Components.NoEvents"/>.
            </remarks>
            <param name="eventsConfig">a builder/factory object for event configuration</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Http(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration})">
            <summary>
            Sets the SDK's networking configuration, using a builder object that is obtained from
            <see cref="M:LaunchDarkly.Sdk.Server.Components.HttpConfiguration"/>, which has methods for setting individual HTTP-related
            properties.
            </summary>
            <param name="httpConfig">a builder object for HTTP configuration</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Logging(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration})">
            <summary>
            Sets the SDK's logging configuration, using a builder object that is obtained from
            <see cref="M:LaunchDarkly.Sdk.Server.Components.Logging"/> which has methods for setting individual logging-related properties. 
            </summary>
            <remarks>
            <para>
            As a shortcut for disabling logging, you may use <see cref="P:LaunchDarkly.Sdk.Server.Components.NoLogging"/> instead. If all you
            want to do is to set the basic logging destination, and you do not need to set other logging properties,
            you can use <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Logging(LaunchDarkly.Logging.ILogAdapter)"/>.
            </para>
            <para>
            For more about how logging works in the SDK, see the <a href="https://docs.launchdarkly.com/sdk/features/logging#net">SDK
            SDK reference guide</a>.
            </para>
            </remarks>
            <example>
                var config = Configuration.Builder("my-sdk-key")
                    .Logging(Components.Logging().Level(LogLevel.Warn)))
                    .Build();
            </example>
            <param name="loggingConfig">a builder object for logging configuration</param>
            <returns>the same builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Components.Logging" />
            <seealso cref="M:LaunchDarkly.Sdk.Server.Components.Logging(LaunchDarkly.Logging.ILogAdapter)"/>
            <seealso cref="P:LaunchDarkly.Sdk.Server.Components.NoLogging" />
            <seealso cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Logging(LaunchDarkly.Logging.ILogAdapter)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Logging(LaunchDarkly.Logging.ILogAdapter)">
            <summary>
            Sets the SDK's logging destination.
            </summary>
            <remarks>
            <para>
            This is a shortcut for <c>Logging(Components.Logging(logAdapter))</c>. You can use it when you
            only want to specify the basic logging destination, and do not need to set other log properties.
            </para>
            <para>
            For more about how logging works in the SDK, see the <a href="https://docs.launchdarkly.com/sdk/features/logging#net">SDK
            SDK reference guide</a>.
            </para>
            </remarks>
            <example>
                var config = Configuration.Builder("my-sdk-key")
                    .Logging(Logs.ToWriter(Console.Out))
                    .Build();
            </example>
            <param name="logAdapter">an <c>ILogAdapter</c> for the desired logging implementation</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Offline(System.Boolean)">
            <summary>
            Sets whether or not this client is offline. If true, no calls to Launchdarkly will be made.
            </summary>
            <param name="offline">true if the client should remain offline</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.SdkKey(System.String)">
            <summary>
            Sets the SDK key for your LaunchDarkly environment.
            </summary>
            <param name="sdkKey">the SDK key</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.ServiceEndpoints(LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder)">
            <summary>
            Sets the SDK's service URIs, using a configuration builder obtained from
            <see cref="M:LaunchDarkly.Sdk.Server.Components.ServiceEndpoints"/>.
            </summary>
            <remarks>
            This overwrites any previous options set with <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.ServiceEndpoints(LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder)"/>.
            If you want to set multiple options, set them on the same <see cref="T:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder"/>.
            </remarks>
            <param name="serviceEndpointsBuilder">the subconfiguration builder object</param>
            <returns>the main configuration builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Components.ServiceEndpoints"/>
            <seealso cref="T:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.StartWaitTime(System.TimeSpan)">
            <summary>
            Sets how long the client constructor will block awaiting a successful connection to
            LaunchDarkly.
            </summary>
            <remarks>
            Setting this to 0 will not block and will cause the constructor to return
            immediately. The default value is 5 seconds.
            </remarks>
            <param name="startWaitTime">the length of time to wait</param>
            <returns>the same builder</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.DataModel">
            <summary>
            Contains information about the internal data model for feature flags and user segments.
            </summary>
            <remarks>
            The details of the data model are not public to application code (although of course developers can easily
            look at the code or the data) so that changes to LaunchDarkly SDK implementation details will not be breaking
            changes to the application. Therefore, most of the members of this class are internal. The public members
            provide a high-level description of model objects so that custom integration code or test code can store or
            serialize them.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.DataModel.Features">
            <summary>
            The <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/> instance that describes feature flag data.
            </summary>
            <remarks>
            Applications should not need to reference this object directly. It is public so that custom integrations
            and test code can serialize or deserialize data or inject it into a data store.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.DataModel.Segments">
            <summary>
            The <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/> instance that describes user segment data.
            </summary>
            <remarks>
            Applications should not need to reference this object directly. It is public so that custom integrations
            and test code can serialize or deserialize data or inject it into a data store.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.DataModel.AllDataKinds">
            <summary>
            An enumeration of all supported <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/>s.
            </summary>
            <remarks>
            Applications should not need to reference this object directly. It is public so that custom data store
            implementations can determine ahead of time what kinds of model objects may need to be stored, if
            necessary.
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.FeatureFlagsState">
            <summary>
            A snapshot of the state of all feature flags with regard to a specific user. See
            calling <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.AllFlagsState(LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.Server.FlagsStateOption[])"/>.
            </summary>
            <remarks>
            Serializing this object to JSON using <c>System.Text.Json</c> or <see cref="T:LaunchDarkly.Sdk.Json.LdJsonSerialization"/>
            will produce the appropriate data structure for bootstrapping the LaunchDarkly JavaScript client.
            Using <c>Newtonsoft.Json</c> will not work correctly without special handling; see
            <see cref="N:LaunchDarkly.Sdk.Json"/> for details.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.FeatureFlagsState.Valid">
            <summary>
            True if this object contains a valid snapshot of feature flag state, or false if the
            state could not be computed (for instance, because the client was offline or there was no user).
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.FeatureFlagsState.Builder(LaunchDarkly.Sdk.Server.FlagsStateOption[])">
            <summary>
            Returns a builder for constructing a new instance of this class. May be useful in testing.
            </summary>
            <param name="options">the same options that can be passed to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.AllFlagsState(LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.Server.FlagsStateOption[])"/></param>
            <returns>a new <see cref="T:LaunchDarkly.Sdk.Server.FeatureFlagsStateBuilder"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.FeatureFlagsState.GetFlagValueJson(System.String)">
            <summary>
            Returns the value of an individual feature flag at the time the state was recorded.
            </summary>
            <param name="key">the feature flag key</param>
            <returns>the flag's JSON value; <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> if the flag returned
            the default value, or if there was no such flag</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.FeatureFlagsState.GetFlagReason(System.String)">
            <summary>
            Returns the evaluation reason of an individual feature flag (as returned by
            <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariation(System.String,LaunchDarkly.Sdk.Context,System.Boolean)"/>, etc.) at the time the state
            was recorded.
            </summary>
            <param name="key">the feature flag key</param>
            <returns>the evaluation reason; null if reasons were not recorded, or if there was no
            such flag</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.FeatureFlagsState.ToValuesJsonMap">
            <summary>
            Returns a dictionary of flag keys to flag values.
            </summary>
            <remarks>
            <para>
            If a flag would have evaluated to the default value, its value will be
            <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/>.
            </para>
            <para>
            Do not use this method if you are passing data to the front end to "bootstrap" the
            JavaScript client. Instead, serialize the <see cref="T:LaunchDarkly.Sdk.Server.FeatureFlagsState"/> object to JSON
            using <c>JsonConvert.SerializeObject()</c>.
            </para>
            </remarks>
            <returns>a dictionary of flag keys to flag values</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.FeatureFlagsState.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.FeatureFlagsState.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.FeatureFlagsStateBuilder">
            <summary>
            A builder for constructing <see cref="T:LaunchDarkly.Sdk.Server.FeatureFlagsState"/> instances.
            </summary>
            <remarks>
            This may be useful in test code. Use <see cref="M:LaunchDarkly.Sdk.Server.FeatureFlagsState.Builder(LaunchDarkly.Sdk.Server.FlagsStateOption[])"/> to create a new builder.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.FeatureFlagsStateBuilder.Build">
            <summary>
            Creates a <see cref="T:LaunchDarkly.Sdk.Server.FeatureFlagsState"/> with the properties that have been set on the builder.
            </summary>
            <returns>a state object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.FeatureFlagsStateBuilder.Valid(System.Boolean)">
            <summary>
            Allows the state object to be marked as not valid (i.e. an error occurred, so flags could not be evaluated).
            </summary>
            <param name="valid">true if valid, false if invalid (default is valid)</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.FeatureFlagsStateBuilder.AddFlag(System.String,LaunchDarkly.Sdk.EvaluationDetail{LaunchDarkly.Sdk.LdValue})">
            <summary>
            Adds the result of a flag evaluation.
            </summary>
            <param name="flagKey">the flag key</param>
            <param name="result">the evaluation result</param>
            <returns></returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.FlagsStateOption">
            <summary>
            Optional parameters that can be passed to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.AllFlagsState(LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.Server.FlagsStateOption[])"/>.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.FlagsStateOption.ToString">
            <summary>
            Returns the string representation of this option.
            </summary>
            <returns>the string representation</returns>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.FlagsStateOption.ClientSideOnly">
            <summary>
            Specifies that only flags marked for use with the client-side SDK should be included in the
            state object. By default, all flags are included.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.FlagsStateOption.WithReasons">
            <summary>
            Specifies that evaluation reasons should be included in the state object (as returned by
            <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Boolean)"/>, etc.). By default, they
            are not included.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.FlagsStateOption.DetailsOnlyForTrackedFlags">
            <summary>
            Specifies that any flag metadata that is normally only used for event generation - such as flag versions and
            evaluation reasons - should be omitted for any flag that does not have event tracking or debugging turned on.
            This reduces the size of the JSON data if you are passing the flag state to the front end.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.ILdClientExtensions">
            <summary>
            Convenience methods that extend the <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.ILdClient"/> interface.
            </summary>
            <remarks>
            <para>
            These allow you to do the following:
            </para>
            <list type="bullet">
            <item><description>
                Treat a string-valued flag as if it referenced values of an <c>enum</c> type.
            </description></item>
            <item><description>
                Call <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.ILdClient"/> methods with the <see cref="T:LaunchDarkly.Sdk.User"/> type instead of
                <see cref="T:LaunchDarkly.Sdk.Context"/>. The SDK's preferred type for identifying an evaluation context,
                when evaluating flags or generating analytics events, is <see cref="T:LaunchDarkly.Sdk.Context"/>; older
                versions of the SDK used only the simpler <see cref="T:LaunchDarkly.Sdk.User"/> model. These extension
                methods provide backward compatibility with application code that used the
                <see cref="T:LaunchDarkly.Sdk.User"/> type. Each of them simply converts the User to a Context with
                <see cref="M:LaunchDarkly.Sdk.Context.FromUser(LaunchDarkly.Sdk.User)"/> and calls the equivalent ILdClient method.
                For instance, <c>client.BoolVariation(flagKey, user, false)</c> is exactly
                equivalent to <c>client.BoolVariation(flagKey, Context.FromUser(user), false)</c>.
            </description></item>
            </list>
            <para>
            These are implemented outside of <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.ILdClient"/> and <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/> because they do not
            rely on any implementation details of <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/>; they are decorators that would work equally
            well with a stub or test implementation of the interface.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.EnumVariation``1(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.Context,``0)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariation(System.String,LaunchDarkly.Sdk.Context,System.String)"/>, but converts the
            flag's string value to an enum value.
            </summary>
            <remarks>
            <para>
            If the flag has a value that is not one of the allowed enum value names, or is not a string,
            <c>defaultValue</c> is returned.
            </para>
            <para>
            Note that there is no type constraint to guarantee that T really is an enum type, because that is
            a C# 7.3 feature that is unavailable in older versions of .NET Standard. If you try to use a
            non-enum type, you will simply receive the default value back.
            </para>
            </remarks>
            <typeparam name="T">the enum type</typeparam>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag (as an enum value)</param>
            <returns>the variation for the given user, or <c>defaultValue</c> if the flag cannot
            be evaluated or does not have a valid enum value</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.EnumVariation``1(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,``0)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariation(System.String,LaunchDarkly.Sdk.Context,System.String)"/>, but converts the
            flag's string value to an enum value.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.EnumVariation``1(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.Context,``0)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <typeparam name="T">the enum type</typeparam>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag (as an enum value)</param>
            <returns>the variation for the given user, or <c>defaultValue</c> if the flag cannot
            be evaluated or does not have a valid enum value</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.EnumVariationDetail``1(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.Context,``0)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.String)"/>, but converts the
            flag's string value to an enum value.
            </summary>
            <remarks>
            <para>
            If the flag has a value that is not one of the allowed enum value names, or is not a string,
            <c>defaultValue</c> is returned.
            </para>
            <para>
            Note that there is no type constraint to guarantee that T really is an enum type, because that is
            a C# 7.3 feature that is unavailable in older versions of .NET Standard. If you try to use a
            non-enum type, you will simply receive the default value back.
            </para>
            </remarks>
            <typeparam name="T">the enum type</typeparam>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag (as an enum value)</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.BoolVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Boolean)">
            <summary>
            Calculates the boolean value of a feature flag for a given user.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariation(System.String,LaunchDarkly.Sdk.Context,System.Boolean)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariation(System.String,LaunchDarkly.Sdk.Context,System.Boolean)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.BoolVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Boolean)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.BoolVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Boolean)">
            <summary>
            Calculates the boolean value of a feature flag for a given user, and returns an object that
            describes the way the value was determined.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Boolean)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Boolean)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.BoolVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Boolean)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.IntVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Int32)">
            <summary>
            Calculates the integer value of a feature flag for a given user.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.IntVariation(System.String,LaunchDarkly.Sdk.Context,System.Int32)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.IntVariation(System.String,LaunchDarkly.Sdk.Context,System.Int32)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.IntVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Int32)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.IntVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Int32)">
            <summary>
            Calculates the integer value of a feature flag for a given user, and returns an object that
            describes the way the value was determined.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.IntVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Int32)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.IntVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Int32)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.IntVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Int32)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.FloatVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Single)">
            <summary>
            Calculates the single-precision floating-point numeric value of a feature flag for a
            given user.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariation(System.String,LaunchDarkly.Sdk.Context,System.Single)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariation(System.String,LaunchDarkly.Sdk.Context,System.Single)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.FloatVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Single)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.DoubleVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Double)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.FloatVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Single)">
            <summary>
            Calculates the single-precision floating-point numeric value of a feature flag for a
            given user, and returns an object that describes the way the value was determined.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Single)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Single)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.FloatVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Single)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.DoubleVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Double)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.DoubleVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Double)">
            <summary>
            Calculates the double-precision floating-point numeric value of a feature flag for a
            given user.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariation(System.String,LaunchDarkly.Sdk.Context,System.Double)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariation(System.String,LaunchDarkly.Sdk.Context,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.DoubleVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.FloatVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Single)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.DoubleVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Double)">
            <summary>
            Calculates the double-precision floating-point numeric value of a feature flag for a
            given user, and returns an object that describes the way the value was determined.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Double)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.DoubleVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.FloatVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Single)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.StringVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.String)">
            <summary>
            Calculates the string value of a feature flag for a given user.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariation(System.String,LaunchDarkly.Sdk.Context,System.String)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariation(System.String,LaunchDarkly.Sdk.Context,System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.StringVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.StringVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.String)">
            <summary>
            Calculates the string value of a feature flag for a given user, and returns an object that
            describes the way the value was determined.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.String)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.StringVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.JsonVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Calculates the value of a feature flag for a given user as any JSON value type.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.JsonVariation(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.JsonVariation(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.JsonVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.JsonVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Calculates the value of a feature flag for a given user as any JSON value type, and
            returns an object that describes the way the value was determined.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.JsonVariationDetail(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="user">the user attributes </param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.JsonVariationDetail(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.JsonVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Identify(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,LaunchDarkly.Sdk.User)">
            <summary>
            Reports details about a user.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Identify(LaunchDarkly.Sdk.Context)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="user">the user; should not be null (a null reference will cause an error
            to be logged and no event will be sent</param>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Identify(LaunchDarkly.Sdk.Context)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User)">
            <summary>
            Tracks that an application-defined event occurred.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="name">the name of the event</param>
            <param name="user">the user associated with the event; should not be null (a null reference
            will cause an error to be logged and no event will be sent</param>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue,System.Double)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Tracks that an application-defined event occurred.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="name">the name of the event</param>
            <param name="user">the user associated with the event</param>
            <param name="data">additional data associated with the event, if any</param>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue,System.Double)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue,System.Double)">
            <summary>
            Tracks that an application-defined event occurred, and provides an additional numeric value for
            custom metrics.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue,System.Double)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="name">the name of the event</param>
            <param name="user">the user associated with the event</param>
            <param name="data">additional data associated with the event; use <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> if
            not applicable</param>
            <param name="metricValue">a numeric value used by the LaunchDarkly experimentation feature in
            numeric custom metrics</param>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.AllFlagsState(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.Server.FlagsStateOption[])">
            <summary>
            Returns an object that encapsulates the state of all feature flags for a given user, which
            can be passed to front-end code.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.AllFlagsState(LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.Server.FlagsStateOption[])"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="user">the user attributes</param>
            <param name="options">optional <see cref="T:LaunchDarkly.Sdk.Server.FlagsStateOption"/> values affecting how the state is
            computed-- for instance, to filter the set of flags to only include the client-side-enabled ones</param>
            <returns>a <see cref="T:LaunchDarkly.Sdk.Server.FeatureFlagsState"/> object (will never be null; see
            <see cref="P:LaunchDarkly.Sdk.Server.FeatureFlagsState.Valid"/></returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.AllFlagsState(LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.Server.FlagsStateOption[])"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.SecureModeHash(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,LaunchDarkly.Sdk.User)">
            <summary>
            Creates a hash string that can be used by the JavaScript SDK to identify a user.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.SecureModeHash(LaunchDarkly.Sdk.Context)"/>, but using the
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </remarks>
            <param name="client">the client instance</param>
            <param name="user">the user attributes</param>
            <returns>the hash, or null if the hash could not be calculated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.SecureModeHash(LaunchDarkly.Sdk.Context)"/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder">
            <summary>
            Contains methods for configuring the SDK's Big Segments behavior.
            </summary>
            <remarks>
            <para>
            "Big Segments" are a specific type of segments. For more information, read the LaunchDarkly
            documentation about segments: https://docs.launchdarkly.com/home/users/segments
            </para>
            <para>
            If you want to set non-default values for any of these properties, create a builder with
            <see cref="M:LaunchDarkly.Sdk.Server.Components.BigSegments(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore})"/>, change its properties with the
            methods of this class, and pass it to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.BigSegments(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration})"/>:
            </para>
            </remarks>
            <example>
            <code>
                // This example uses the Redis integration
                var config = Configuration.Builder(sdkKey)
                    .BigSegments(Components.BigSegments(Redis.DataStore().Prefix("app1"))
                        .ContextCacheSize(2000))
                    .Build();
            </code>
            </example>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.DefaultContextCacheSize">
            <summary>
            Default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.ContextCacheSize(System.Int32)"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.DefaultContextCacheTime">
            <summary>
            Default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.ContextCacheTime(System.TimeSpan)"/>: five seconds.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.DefaultStatusPollInterval">
            <summary>
            Default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.StatusPollInterval(System.TimeSpan)"/>: five seconds.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.DefaultStaleAfter">
            <summary>
            Default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.StaleAfter(System.TimeSpan)"/>: two minutes.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.ContextCacheSize(System.Int32)">
            <summary>
            Sets the maximum number of contexts whose Big Segment state will be cached by the SDK
            at any given time.
            </summary>
            <remarks>
            <para>
            To reduce database traffic, the SDK maintains a least-recently-used cache by context key. When a feature
            flag that references a Big Segment is evaluated for some context that is not currently in the cache, the
            SDK queries the database for all Big Segment memberships of that context, and stores them together in a
            single cache entry. If the cache is full, the oldest entry is dropped.
            </para>
            <para>
            A higher value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.ContextCacheSize(System.Int32)"/> means that database queries for Big Segments will
            be done less often for recently-referenced contexts, if the application has many contexts, at the cost of
            increased memory used by the cache.
            </para>
            <para>
            Cache entries can also expire based on the setting of <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.ContextCacheTime(System.TimeSpan)"/>.
            </para>
            </remarks>
            <param name="contextCacheSize">the maximum number of context states to cache</param>
            <returns>the builder</returns>
            <seealso cref="F:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.DefaultContextCacheSize"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.ContextCacheTime(System.TimeSpan)">
            <summary>
            Sets the maximum length of time that the Big Segment state for a context will be cached
            by the SDK.
            </summary>
            <remarks>
            <para>
            See <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.ContextCacheSize(System.Int32)"/> for more about this cache. A higher value for
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.ContextCacheTime(System.TimeSpan)"/> means that database queries for the Big Segment state of any
            given context will be done less often, but that changes to segment membership may not be detected as soon.
            </para>
            </remarks>
            <param name="contextCacheTime">the cache TTL</param>
            <returns>the builder</returns>
            <seealso cref="F:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.DefaultContextCacheTime"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.StatusPollInterval(System.TimeSpan)">
            <summary>
            Sets the interval at which the SDK will poll the Big Segment store to make sure
            it is available and to determine how long ago it was updated.
            </summary>
            <param name="statusPollInterval">the status polling interval (any value less than or
            equal to zero will be changed to <see cref="F:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.DefaultStatusPollInterval"/>)</param>
            <returns>the builder</returns>
            <seealso cref="F:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.DefaultStatusPollInterval"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.StaleAfter(System.TimeSpan)">
            <summary>
            Sets the maximum length of time between updates of the Big Segments data before the data
            is considered out of date.
            </summary>
            <remarks>
            <para>
            Normally, the LaunchDarkly Relay Proxy updates a timestamp in the Big Segments store at intervals to
            confirm that it is still in sync with the LaunchDarkly data, even if there have been no changes to the
            data. If the timestamp falls behind the current time by the amount specified in
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.StaleAfter(System.TimeSpan)"/>, the SDK assumes that something is not working correctly in this
            process and that the data may not be accurate.
            </para>
            <para>
            While in a stale state, the SDK will still continue using the last known data, but
            <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.IBigSegmentStoreStatusProvider.Status"/> will return true in its Stale property, and any
            <see cref="T:LaunchDarkly.Sdk.EvaluationReason"/> generated from a feature flag that references a Big Segment will have
            a <see cref="P:LaunchDarkly.Sdk.EvaluationReason.BigSegmentsStatus"/> of <see cref="F:LaunchDarkly.Sdk.BigSegmentsStatus.Stale"/>.
            </para>
            </remarks>
            <param name="staleAfter">the time limit for marking the data as stale (any value less
            than or equal to zero will be changed to <see cref="F:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.DefaultStaleAfter"/>)</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.Build(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder">
            <summary>
            Contains methods for configuring delivery of analytics events.
            </summary>
            <remarks>
            The SDK normally buffers analytics events and sends them to LaunchDarkly at intervals. If you want
            to customize this behavior, create a builder with <see cref="M:LaunchDarkly.Sdk.Server.Components.SendEvents"/>, change its
            properties with the methods of this class, and pass it to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Events(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor})"/>.
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .Events(
                        Components.SendEvents().Capacity(5000).FlushInterval(TimeSpan.FromSeconds(2))
                    )
                    .Build();
            </code>
            </example>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DefaultCapacity">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.Capacity(System.Int32)"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DefaultDiagnosticRecordingInterval">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DiagnosticRecordingInterval(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DefaultFlushInterval">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.FlushInterval(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DefaultContextKeysCapacity">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.ContextKeysCapacity(System.Int32)"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DefaultContextKeysFlushInterval">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.ContextKeysFlushInterval(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.MinimumDiagnosticRecordingInterval">
            <summary>
            The minimum value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DiagnosticRecordingInterval(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.AllAttributesPrivate(System.Boolean)">
            <summary>
            Sets whether or not all optional context attributes should be hidden from LaunchDarkly.
            </summary>
            <remarks>
            If this is <see langword="true"/>, all contextattribute values (other than the key) will be private, not just
            the attributes specified in <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.PrivateAttributes(System.String[])"/> or on a per-context basis with
            <see cref="T:LaunchDarkly.Sdk.ContextBuilder"/> methods. By default, it is <see langword="false"/>.
            </remarks>
            <param name="allAttributesPrivate">true if all context attributes should be private</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.Capacity(System.Int32)">
            <summary>
            Sets the capacity of the events buffer.
            </summary>
            <remarks>
            <para>
            The client buffers up to this many events in memory before flushing. If the capacity is exceeded before
            the buffer is flushed (see <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.FlushInterval(System.TimeSpan)"/>), events will be discarded. Increasing the
            capacity means that events are less likely to be discarded, at the cost of consuming more memory.
            </para>
            <para>
            The default value is <see cref="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DefaultCapacity"/>. A zero or negative value will be changed to the default.
            </para>
            </remarks>
            <param name="capacity">the capacity of the event buffer</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DiagnosticRecordingInterval(System.TimeSpan)">
            <summary>
            Sets the interval at which periodic diagnostic data is sent.
            </summary>
            <remarks>
            The default value is <see cref="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DefaultDiagnosticRecordingInterval"/>; the minimum value is
            <see cref="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.MinimumDiagnosticRecordingInterval"/>. This property is ignored if
            <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DiagnosticOptOut(System.Boolean)"/> is set to <see langword="true"/>.
            </remarks>
            <param name="diagnosticRecordingInterval">the diagnostics interval</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.FlushInterval(System.TimeSpan)">
            <summary>
            Sets the interval between flushes of the event buffer.
            </summary>
            <remarks>
            Decreasing the flush interval means that the event buffer is less likely to reach capacity.
            The default value is <see cref="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DefaultFlushInterval"/>. A zero or negative value will be changed to
            the default.
            </remarks>
            <param name="flushInterval">the flush interval</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.PrivateAttributes(System.String[])">
            <summary>
            Marks a set of attribute names or subproperties as private.
            </summary>
            <remarks>
            <para>
            Any contexts sent to LaunchDarkly with this configuration active will have attributes with these
            names removed. This is in addition to any attributes that were marked as private for an
            individual context with <see cref="T:LaunchDarkly.Sdk.ContextBuilder"/> methods.
            </para>
            <para>
            If and only if a parameter starts with a slash, it is interpreted as a slash-delimited path that
            can denote a nested property within a JSON object. For instance, "/address/street" means that if
            there is an attribute called "address" that is a JSON object, and one of the object's properties
            is "street", the "street" property will be redacted from the analytics data but other properties
            within "address" will still be sent. This syntax also uses the JSON Pointer convention of escaping
            a literal slash character as "~1" and a tilde as "~0".
            </para>
            <para>
            This method replaces any previous <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.PrivateAttributes(System.String[])"/> that were set on the
            same builder, rather than adding to them.
            </para>
            </remarks>
            <param name="attributes">a set of names or paths that will be removed from context data sent to
            LaunchDarkly</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.ContextKeysCapacity(System.Int32)">
            <summary>
            Sets the number of context keys that the event processor can remember at any one time.
            </summary>
            <remarks>
            To avoid sending duplicate context details in analytics events, the SDK maintains a cache of
            recently seen contexts, expiring at an interval set by <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.ContextKeysFlushInterval(System.TimeSpan)"/>.
            The default value for the size of this cache is <see cref="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DefaultContextKeysCapacity"/>. A zero or
            negative value will be changed to the default.
            </remarks>
            <param name="contextKeysCapacity">the maximum number of context keys to remember</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.ContextKeysFlushInterval(System.TimeSpan)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.ContextKeysFlushInterval(System.TimeSpan)">
            <summary>
            Sets the interval at which the event processor will reset its cache of known context keys.
            </summary>
            <remarks>
            The default value is <see cref="F:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DefaultContextKeysFlushInterval"/>. A zero or negative value will be
            changed to the default.
            </remarks>
            <param name="contextKeysFlushInterval">the flush interval</param>
            <returns>the builder</returns>
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.ContextKeysCapacity(System.Int32)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.Build(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.DescribeConfiguration(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.FileData">
            <summary>
            Integration between the LaunchDarkly SDK and file data.
            </summary>
            <remarks>
            <para>
            The file data source allows you to use local files as a source of feature flag state. This would
            typically be used in a test environment, to operate using a predetermined feature flag state
            without an actual LaunchDarkly connection. See <see cref="M:LaunchDarkly.Sdk.Server.Integrations.FileData.DataSource"/> for details.
            </para>
            <para>
            This is different from {@link TestData}, which allows you to simulate flag configurations
            programmatically rather than using a file.
            </para>
            </remarks>
            <seealso cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.FileData.DataSource">
            <summary>
            Creates a builder for configuring the file data source.
            </summary>
            <remarks>
            <para>
            To use this component, call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.FileData.DataSource"/> to obtain a factory object, call one or
            methods to configure it, and then add it to your LaunchDarkly client configuration. At a
            minimum, you will want to call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.FilePaths(System.String[])"/> to specify
            your data file(s); you can also use <see cref="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.AutoUpdate(System.Boolean)"/> to
            specify that flags should be reloaded when a file is modified. See <see cref="T:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder"/>
            for all configuration options.
            </para>
            <code>
                var fileSource = FileData.DataSource()
                    .FilePaths("./testData/flags.json")
                    .AutoUpdate(true);
                var config = Configuration.Builder("sdkKey")
                    .DataSource(fileSource)
                    .Build();
            </code>
            <para>
            This will cause the client <i>not</i> to connect to LaunchDarkly to get feature flags. The
            client may still make network connections to send analytics events, unless you have disabled
            this with <c>configuration.EventProcessor(Components.NullEventProcessor)</c>.
            </para>
            <para>
            Flag data files are JSON by default (although it is possible to specify a parser for another format,
            such as YAML; see <see cref="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.Parser(System.Func{System.String,System.Object})"/>). They
            contain an object with three possible properties:
            </para>
            <list type="bullet">
            <item><description><c>flags</c>: Feature flag definitions.</description></item>
            <item><description><c>flagVersions</c>: Simplified feature flags that contain only a value.</description></item>
            <item><description><c>segments</c>: Segment definitions.</description></item>
            </list>
            <para>
            The format of the data in <c>flags</c> and <c>segments</c> is defined by the LaunchDarkly application
            and is subject to change. Rather than trying to construct these objects yourself, it is simpler
            to request existing flags directly from the LaunchDarkly server in JSON format, and use this
            output as the starting point for your file. In Linux you would do this:
            </para>
            <code>
                curl -H "Authorization: {your sdk key}" https://sdk.launchdarkly.com/sdk/latest-all
            </code>
            <para>
            The output will look something like this (but with many more properties):
            </para>
            <code>
            {
                "flags": {
                    "flag-key-1": {
                        "key": "flag-key-1",
                        "on": true,
                        "variations": [ "a", "b" ]
                    }
                },
                "segments": {
                    "segment-key-1": {
                        "key": "segment-key-1",
                        "includes": [ "user-key-1" ]
                    }
                }
            }
            </code>
            <para>
            Data in this format allows the SDK to exactly duplicate all the kinds of flag behavior supported
            by LaunchDarkly. However, in many cases you will not need this complexity, but will just want to
            set specific flag keys to specific values. For that, you can use a much simpler format:
            </para>
            <code>
            {
                "flagValues": {
                    "my-string-flag-key": "value-1",
                    "my-boolean-flag-key": true,
                    "my-integer-flag-key": 3
                }
            }
            </code>
            <para>
            It is also possible to specify both <c>flags</c> and <c>flagValues</c>, if you want some flags
            to have simple values and others to have complex behavior. However, it is an error to use the
            same flag key or segment key more than once, either in a single file or across multiple files.
            </para>
            <para>
            If the data source encounters any error in any file-- malformed content, a missing file, or a
            duplicate key-- it will not load flags from any of the files.
            </para>
            </remarks>
            <returns>a <see cref="T:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder"/></returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder">
            <summary>
            A builder for configuring the file data source.
            </summary>
            <remarks>
            To use the file data source, obtain a new instance of this class with <see cref="M:LaunchDarkly.Sdk.Server.Integrations.FileData.DataSource"/>;
            call the builder method {@link #filePaths(String...)} to specify file path(s), and/or
            {@link #classpathResources(String...)} to specify classpath data resources; then pass the resulting
            object to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataSource(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataSource})"/>.
            </remarks>
            <seealso cref="T:LaunchDarkly.Sdk.Server.Integrations.FileData"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.FilePaths(System.String[])">
            <summary>
            Adds any number of source files for loading flag data, specifying each file path as a string.
            </summary>
            <remarks>
            <para>
            The files will not actually be loaded until the LaunchDarkly client starts up.
            </para>
            <para>
            Files are normally expected to contain JSON; see <see cref="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.Parser(System.Func{System.String,System.Object})"/> for alternatives.
            </para>
            </remarks>
            <param name="paths">path(s) to the source file(s); may be absolute or relative to the current working directory</param>
            <returns>the same factory object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.Parser(System.Func{System.String,System.Object})">
            <summary>
            Specifies an alternate parsing function to use for non-JSON source files.
            </summary>
            <remarks>
            <para>
            By default, the file data source attempts to parse files as JSON objects. You may wish to use another format,
            such as YAML. To avoid bringing in additional dependencies that might conflict with application dependencies,
            the LaunchDarkly SDK does not import a YAML parser, but you can use <c>Parser</c> to specify a parser of
            your choice.
            </para>
            <para>
            The function you provide should take a string and return an <c>object</c> which should contain only the basic
            types that can be represented in JSON: so, for instance, string values should be <c>string</c>, arrays should
            be <c>List</c>, and objects with key-value pairs should be <c>Dictionary&lt;string, object&gt;</c>. It should
            throw an exception if it can't parse the data.
            </para>
            <para>
            The file data source will still try to parse files as JSON if their first non-whitespace character is '{',
            but if that fails, it will use the custom parser.
            </para>
            <para>
            Here is an example of how you would do this with the <c>YamlDotNet</c> package. Note the use of a
            <c>DeserializerBuilder</c> configuration method to tell the parser that it should interpret a property like
            <c>on: true</c> or <c>variation: 3</c> as a boolean or integer rather than a string; YAML syntax is very
            flexible, so how you configure the parser will depend on how you are formatting the file, but data types do
            matter in flag configurations so you do not want it to simply read every property as a string.
            </para>
            <code>
                var yaml = new DeserializerBuilder()
                    .WithAttemptingUnquotedStringTypeDeserialization()
                    .Build();
                var source = FileData.DataSource()
                    .FilePaths(myYamlFilePath)
                    .Parser(s => yaml.Deserialize&lt;object&gt;(s));
            </code>
            </remarks>
            <param name="parseFn">the parsing function</param>
            <returns>the same factory object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.FileReader(LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.IFileReader)">
            <summary>
            Specifies an alternate file reader which can support custom OS error handling and retry logic.
            </summary>
            <param name="fileReader">The flag file reader.</param>
            <returns>the same factory object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.AutoUpdate(System.Boolean)">
            <summary>
            Specifies whether the data source should watch for changes to the source file(s) and reload flags
            whenever there is a change.
            </summary>
            <remarks>
            <para>
            This option is off by default: unless you set this option to <c>true</c>, files will only be loaded once.
            </para>
            <para>
            Whenever possible, you should update a file's entire contents in one atomic operation; in Unix-like OSes,
            that can be done by creating a temporary file, writing to it, and then renaming it to replace the original
            file. In Windows, that is not always possible, so FileDataSource might detect an update before the file has
            been fully written; in that case it will retry until it succeeds.
            </para>
            <para>
            Note that auto-updating may not work if any of the files you specified has an invalid directory path.
            </para>
            </remarks>
            <param name="autoUpdate">true if flags should be reloaded whenever a source file changes</param>
            <returns>the same factory object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.DuplicateKeysHandling(LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.DuplicateKeysHandling)">
            <summary>
            Specifies how to handle keys that are duplicated across files.
            </summary>
            <remarks>
            <para>
            By default, the file data source will throw if keys are duplicated across files.
            </para>
            </remarks>
            <param name="duplicateKeysHandling">how duplicate keys should be handled</param>
            <returns>the same factory object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.SkipMissingPaths(System.Boolean)">
            <summary>
            Specifies to ignore missing file paths instead of treating them as an error.
            </summary>
            <param name="skipMissingPaths">If <c>true</c>, missing file paths will be skipped,
            otherwise they will be treated as an error</param>
            <returns>the same factory object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.Build(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.FileDataTypes">
            <summary>
            Types that are used in configuring <see cref="T:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder"/>.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.DuplicateKeysHandling">
            <summary>
            Determines how duplicate feature flag or segment keys are handled.
            </summary>
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.DuplicateKeysHandling(LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.DuplicateKeysHandling)"/>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.DuplicateKeysHandling.Throw">
            <summary>
            An exception will be thrown if keys are duplicated across files.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.DuplicateKeysHandling.Ignore">
            <summary>
            Keys that are duplicated across files will be ignored, and the first occurrence will be used.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.IFileReader">
            <summary>
            Interface for customizing how data files are read.
            </summary>
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.FileReader(LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.IFileReader)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.IFileReader.ReadAllText(System.String)">
            <summary>
            Opens a text file, reads all lines of the file, and then closes the file.
            </summary>
            <param name="path">The file to open for reading.</param>
            <returns>A string containing all lines of the file.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The file specified in path was not found.</exception>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder">
            <summary>
            Contains methods for configuring the SDK's networking behavior.
            </summary>
            <remarks>
            <para>
            If you want to set non-default values for any of these properties, create a builder with
            <see cref="M:LaunchDarkly.Sdk.Server.Components.HttpConfiguration"/>, change its properties with the methods of this class, and
            pass it to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Http(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration})"/>:
            </para>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .Http(
                        Components.HttpConfiguration()
                            .ConnectTimeout(TimeSpan.FromMilliseconds(3000))
                    )
                    .Build();
            </code>
            </example>
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.DefaultConnectTimeout">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.ConnectTimeout(System.TimeSpan)"/>: two seconds.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.DefaultReadTimeout">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.ReadTimeout(System.TimeSpan)"/>: 10 seconds.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.DefaultResponseStartTimeout">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.ResponseStartTimeout(System.TimeSpan)"/>: 10 seconds.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.ConnectTimeout(System.TimeSpan)">
            <summary>
            Sets the network connection timeout.
            </summary>
            <remarks>
            <para>
            This is the time allowed for the underlying HTTP client to connect to the
            LaunchDarkly server, for any individual network connection.
            </para>
            <para>
            It is not the same as <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.StartWaitTime(System.TimeSpan)"/>, which
            limits the time for initializing the SDK regardless of how many individual HTTP requests
            are done in that time.
            </para>
            <para>
            Not all .NET platforms support setting a connection timeout. It is implemented as
            a property of <c>System.Net.Http.SocketsHttpHandler</c> in .NET Core 2.1+ and .NET
            5+, but is unavailable in .NET Framework and .NET Standard. On platforms where it
            is not supported, only <see cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.ResponseStartTimeout(System.TimeSpan)"/> will be used.
            </para>
            <para>
            Also, since this is implemented only in <c>SocketsHttpHandler</c>, if you have
            specified some other HTTP handler implementation with <see cref="T:System.Net.Http.HttpMessageHandler"/>,
            the <see cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.ConnectTimeout(System.TimeSpan)"/> here will be ignored.
            </para>
            </remarks>
            <param name="connectTimeout">the timeout</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.ResponseStartTimeout(System.TimeSpan)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.CustomHeader(System.String,System.String)">
            <summary>
            Specifies a custom HTTP header that should be added to all SDK requests.
            </summary>
            <remarks>
            This may be helpful if you are using a gateway or proxy server that requires a specific header in
            requests. You may add any number of headers.
            </remarks>
            <param name="name">the header name</param>
            <param name="value">the header value</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.MessageHandler(System.Net.Http.HttpMessageHandler)">
            <summary>
            Specifies a custom HTTP message handler implementation.
            </summary>
            <remarks>
            This is mainly useful for testing, to cause the SDK to use custom logic instead of actual HTTP requests,
            but can also be used to customize HTTP behavior on platforms where .NET's default handler is not optimal.
            </remarks>
            <param name="messageHandler">the message handler, or null to use the platform's default handler</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.Proxy(System.Net.IWebProxy)">
            <summary>
            Sets an HTTP proxy for making connections to LaunchDarkly.
            </summary>
            <remarks>
            <para>
            This is ignored if you have specified a custom message handler with <see cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.MessageHandler(System.Net.Http.HttpMessageHandler)"/>,
            since proxy behavior is implemented by the message handler.
            </para>
            <para>
            Note that this is not the same as the <see href="https://docs.launchdarkly.com/home/relay-proxy">LaunchDarkly
            Relay Proxy</see>, which would be set with
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.RelayProxy(System.Uri)"/>.
            </para>
            </remarks>
            <example>
            <code>
                // Example of using an HTTP proxy with basic authentication
                
                var proxyUri = new Uri("http://my-proxy-host:8080");
                var proxy = new System.Net.WebProxy(proxyUri);
                var credentials = new System.Net.CredentialCache();
                credentials.Add(proxyUri, "Basic",
                    new System.Net.NetworkCredential("username", "password"));
                proxy.Credentials = credentials;
                
                var config = Configuration.Builder("my-sdk-key")
                    .Http(
                        Components.HttpConfiguration().Proxy(proxy)
                    )
                    .Build();
            </code>
            </example>
            <param name="proxy">any implementation of <c>System.Net.IWebProxy</c></param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.ReadTimeout(System.TimeSpan)">
            <summary>
            Sets the socket read timeout.
            </summary>
            <remarks>
            Sets the socket timeout. This is the amount of time without receiving data on a connection that the
            SDK will tolerate before signaling an error. This does <i>not</i> apply to the streaming connection
            used by <see cref="M:LaunchDarkly.Sdk.Server.Components.StreamingDataSource"/>, which has its own non-configurable read timeout
            based on the expected behavior of the LaunchDarkly streaming service.
            </remarks>
            <param name="readTimeout">the socket read timeout</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.ResponseStartTimeout(System.TimeSpan)">
            <summary>
            Sets the maximum amount of time to wait for the beginning of an HTTP response.
            </summary>
            <remarks>
            <para>
            This limits how long the SDK will wait from the time it begins trying to make a
            network connection for an individual HTTP request to the time it starts receiving
            any data from the server. It is equivalent to the <c>Timeout</c> property in
            <c>HttpClient</c>.
            </para>
            <para>
            It is not the same as <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.StartWaitTime(System.TimeSpan)"/>, which
            limits the time for initializing the SDK regardless of how many individual HTTP requests
            are done in that time.
            </para>
            </remarks>
            <param name="responseStartTimeout">the timeout</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.ConnectTimeout(System.TimeSpan)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.Wrapper(System.String,System.String)">
            <summary>
            For use by wrapper libraries to set an identifying name for the wrapper being used.
            </summary>
            <remarks>
            This will be included in a header during requests to the LaunchDarkly servers to allow recording
            metrics on the usage of these wrapper libraries.
            </remarks>
            <param name="wrapperName">an identifying name for the wrapper library</param>
            <param name="wrapperVersion">version string for the wrapper library</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.Build(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.DescribeConfiguration(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder">
            <summary>
            Contains methods for configuring the SDK's logging behavior.
            </summary>
            <remarks>
            <para>
            If you want to set non-default values for any of these properties, create a builder with
            <see cref="M:LaunchDarkly.Sdk.Server.Components.Logging"/>, change its properties with the methods of this class, and pass it
            to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Logging(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration})" />.
            </para>
            <para>
            By default, the SDK has the following logging behavior:
            </para>
            <list type="bullet">
            <item><description> Log messages are written to standard output. To change this, use a log adapter as
            described in <see cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Adapter(LaunchDarkly.Logging.ILogAdapter)"/> and <see cref="M:LaunchDarkly.Sdk.Server.Components.Logging(LaunchDarkly.Logging.ILogAdapter)"/>. </description></item>
            <item><description> The lowest enabled log level is <see cref="F:LaunchDarkly.Logging.LogLevel.Info"/>,
            so <see cref="F:LaunchDarkly.Logging.LogLevel.Debug"/> messages are not shown. To change this, use
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Level(LaunchDarkly.Logging.LogLevel)"/>. </description></item>
            <item><description> The base logger name is <c>LaunchDarkly.Sdk</c>. See <see cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.BaseLoggerName(System.String)"/>
            for more about logger names and how to change the name. </description></item>
            </list>
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder("my-sdk-key")
                    .Logging(Components.Logging().Level(LogLevel.Warn))
                    .Build();
            </code>
            </example>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.DefaultLogDataSourceAsErrorAfter">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.LogDataSourceOutageAsErrorAfter(System.Nullable{System.TimeSpan})"/>: one minute.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.#ctor">
            <summary>
            Creates a new builder with default properties.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.BaseLoggerName(System.String)">
            <summary>
            Specifies a custom base logger name.
            </summary>
            <remarks>
            <para>
            Logger names are used to give context to the log output, indicating that it is from the
            LaunchDarkly SDK instead of another component, or indicating a more specific area of
            functionality within the SDK. The default console logging implementation shows the logger
            name in brackets, for instance:
            </para>
            <code>
                [LaunchDarkly.Sdk.DataSource] INFO: Reconnected to LaunchDarkly stream
            </code>
            <para>
            If you are using an adapter for a third-party logging framework such as NUnit (see
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Adapter(LaunchDarkly.Logging.ILogAdapter)"/>), most frameworks have a mechanism for filtering log
            output by the logger name.
            </para>
            <para>
            By default, the SDK uses a base logger name of <c>LaunchDarkly.Sdk</c>. Messages will be
            logged either under this name, or with a suffix to indicate what general area of
            functionality is involved:
            </para>
            <list type="bullet">
            <item><description> <c>.DataSource</c>: problems or status messages regarding how the SDK gets
            feature flag data from LaunchDarkly. </description></item>
            <item><description> <c>.DataStore</c>: problems or status messages regarding how the SDK stores its
            feature flag data (for instance, if you are using a database). </description></item>
            <item><description> <c>.Evaluation</c>: problems in evaluating a feature flag or flags, which were
            caused by invalid flag data or incorrect usage of the SDK rather than for instance a
            database problem. </description></item>
            <item><description> <c>.Events</c> problems or status messages regarding the SDK's delivery of
            analytics event data to LaunchDarkly. </description></item>
            </list>
            <para>
            Setting <c>BaseLoggerName</c> to a non-null value overrides the default. The SDK still
            adds the same suffixes to the name, so for instance if you set it to <c>"LD"</c>, the
            example message above would show <c>[LD.DataSource]</c>.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Adapter(LaunchDarkly.Logging.ILogAdapter)">
            <summary>
            Specifies the implementation of logging to use.
            </summary>
            <remarks>
            <para>
            The <a href="https://github.com/launchdarkly/dotnet-logging"><c>LaunchDarkly.Logging</c></a> API defines the
            <c>ILogAdapter</c> interface to specify where log output should be sent. By default, it is set to
            <c>Logs.ToConsole</c>, meaning that output will be sent to <c>Console.Error</c>. You may use other
            <c>LaunchDarkly.Logging.Logs</c> methods, or a custom implementation, to handle log output differently.
            For instance, in .NET Core, specify <c>Logs.CoreLogging</c> to use the standard .NET Core logging framework.
            </para>
            <para>
            For more about logging adapters, see the <a href="https://docs.launchdarkly.com/sdk/features/logging#net">SDK
            reference guide</a>, the <a href="https://launchdarkly.github.io/dotnet-logging/html/N_LaunchDarkly_Logging.htm">API
            documentation</a> for <c>LaunchDarkly.Logging</c>, and the
            <a href="https://github.com/launchdarkly/dotnet-logging-adapters">third-party adapters</a> that
            LaunchDarkly provides (you can also create your own adapter using the <c>LaunchDarkly.Logging</c> API).
            </para>
            <para>
            If you don't need to customize any options other than the adapter, you can call
            <see cref="M:LaunchDarkly.Sdk.Server.Components.Logging(LaunchDarkly.Logging.ILogAdapter)"/> as a shortcut rather than using
            <see cref="T:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder"/>.
            </para>
            </remarks>
            <example>
            <code>
                // This example configures the SDK to use the standard .NET Core log framework
                // (Microsoft.Extensions.Logging).
                var config = Configuration.Builder("my-sdk-key")
                    .Logging(Components.Logging().Adapter(Logs.CoreLogging(coreLoggingFactory)))
                    .Build();
            </code>
            </example>
            <param name="adapter">an <c>ILogAdapter</c> for the desired logging implementation</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Level(LaunchDarkly.Logging.LogLevel)">
            <summary>
            Specifies the lowest level of logging to enable.
            </summary>
            <remarks>
            <para>
            This adds a log level filter that is applied regardless of what implementation of logging is
            being used, so that log messages at lower levels are suppressed. For instance, setting the
            minimum level to <see cref="F:LaunchDarkly.Logging.LogLevel.Info"/> means that <c>Debug</c>-level output is disabled.
            External logging frameworks may also have their own mechanisms for setting a minimum log level.
            </para>
            <para>
            If you did not specify an <see cref="T:LaunchDarkly.Logging.ILogAdapter"/> at all, so it is using the default <c>Console.Error</c>
            destination, then the default minimum logging level is <c>Info</c>.
            </para>
            <para>
            If you did specify an <see cref="T:LaunchDarkly.Logging.ILogAdapter"/>, then the SDK does not apply a level filter by
            default. This is so as not to interfere with any other configuration that you may have set up
            in an external logging framework. However, you can still use this method to set a higher level
            so that any messages below that level will not be sent to the external framework at all.
            </para>
            </remarks>
            <param name="minimumLevel">the lowest level of logging to enable</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.LogDataSourceOutageAsErrorAfter(System.Nullable{System.TimeSpan})">
            <summary>
            Sets the time threshold, if any, after which the SDK will log a data source outage at <c>Error</c>
            level instead of <c>Warn</c> level.
            </summary>
            <remarks>
            <para>
            A data source outage means that an error condition, such as a network interruption or an error from
            the LaunchDarkly service, is preventing the SDK from receiving feature flag updates. Many outages are
            brief and the SDK can recover from them quickly; in that case it may be undesirable to log an
            <c>Error</c> line, which might trigger an unwanted automated alert depending on your monitoring
            tools. So, by default, the SDK logs such errors at <c>Warn</c> level. However, if the amount of time
            specified by this method elapses before the data source starts working again, the SDK will log an
            additional message at <c>Error</c> level to indicate that this is a sustained problem.
            </para>
            <para>
            The default is <see cref="F:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.DefaultLogDataSourceAsErrorAfter"/>. Setting it to <see langword="null"/>
            will disable this feature, so you will only get <c>Warn</c> messages.
            </para>
            </remarks>
            <param name="interval">the error logging threshold, or null</param>
            <returns>the same builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Build(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder">
            <summary>
            A configurable data store factory that adds caching behavior to a persistent data
            store implementation.
            </summary>
            <remarks>
            <para>
            For a persistent data store (e.g. a database integration), the store implementation will
            provide an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer`1"/> for <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/> or
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync"/> that implements the specific data store behavior. The
            SDK then provides additional options for caching; those are defined by this type, which is returned
            by <see cref="M:LaunchDarkly.Sdk.Server.Components.PersistentDataStore(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore})"/> or
            <see cref="M:LaunchDarkly.Sdk.Server.Components.PersistentDataStore(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync})"/>. Example usage:
            </para>
            <code>
                var myStore = Components.PersistentDataStore(Redis.FeatureStore())
                    .CacheTtl(TimeSpan.FromSeconds(45));
                var config = Configuration.Builder(sdkKey)
                    .DataStore(myStore)
                    .Build();
            </code>
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.DefaultTtl">
            <summary>
            The default cache expiration time.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.NoCaching">
            <summary>
            Specifies that the SDK should <i>not</i> use an in-memory cache for the persistent data store.
            </summary>
            <remarks>
            This means that every feature flag evaluation will trigger a data store query.
            </remarks>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.CacheTime(System.TimeSpan)">
            <summary>
            Specifies the cache TTL. Items will expire from the cache after this amount of time from the
            time when they were originally cached.
            </summary>
            <remarks>
            <para>
            If the value is <c>TimeSpan.Zero</c>, caching is disabled (equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.NoCaching"/>).
            </para>
            <para>
            If the value is <c>System.Threading.Timeout.InfiniteTimeSpan</c> (or any negative number), data is
            cached forever (equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.CacheForever"/>).
            </para>
            </remarks>
            <param name="cacheTime">the cache TTL</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.CacheMillis(System.Int32)">
            <summary>
            Shortcut for calling <see cref="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.CacheTime(System.TimeSpan)"/> with a time span in milliseconds.
            </summary>
            <param name="millis">the cache TTL in milliseconds</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.CacheSeconds(System.Int32)">
            <summary>
            Shortcut for calling <see cref="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.CacheTime(System.TimeSpan)"/> with a time span in seconds.
            </summary>
            <param name="seconds">the cache TTL in seconds</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.CacheMaximumEntries(System.Nullable{System.Int32})">
            <summary>
            Specifies the maximum number of entries that can be held in the cache at a time.
            </summary>
            <remarks>
            <para>
            If this limit is exceeded, older entries will be evicted from the cache to make room
            for new ones.
            </para>
            <para>
            If this is null, there is no limit on the number of entries.
            </para>
            </remarks>
            <param name="maximumEntries">the maximum number of entries, or null for no limit</param>
            <returns>an updated factory object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.CacheForever">
            <summary>
            Specifies that the in-memory cache should never expire.
            </summary>
            <remarks>
            <para>
            In this mode, data will be written to both the underlying persistent store and the cache,
            but will only ever be read <i>from</i> the persistent store if the SDK is restarted.
            </para>
            <para>
            Use this mode with caution: it means that in a scenario where multiple processes are sharing
            the database, and the current process loses connectivity to LaunchDarkly while other processes
            are still receiving updates and writing them to the database, the current process will have
            stale data.
            </para>
            </remarks>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.Build(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.DescribeConfiguration(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder">
            <summary>
            Contains methods for configuring the polling data source.
            </summary>
            <remarks>
            <para>
            Polling is not the default behavior; by default, the SDK uses a streaming connection to receive feature flag
            data from LaunchDarkly. In polling mode, the SDK instead makes a new HTTP request to LaunchDarkly at regular
            intervals. HTTP caching allows it to avoid redundantly downloading data if there have been no changes, but
            polling is still less efficient than streaming and should only be used on the advice of LaunchDarkly support.
            </para>
            <para>
            To use polling mode, create a builder with <see cref="M:LaunchDarkly.Sdk.Server.Components.PollingDataSource"/>, change its properties
            with the methods of this class, and pass it to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataSource(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataSource})"/>.
            </para>
            <para>
            Setting <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Offline(System.Boolean)"/> to <see langword="true"/> will supersede this
            setting and completely disable network requests.
            </para>
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .DataSource(Components.PollingDataSource()
                        .PollInterval(TimeSpan.FromSeconds(45)))
                    .Build();
            </code>
            </example>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder.DefaultPollInterval">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder.PollInterval(System.TimeSpan)"/>: 30 seconds.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder.PollInterval(System.TimeSpan)">
            <summary>
            Sets the interval at which the SDK will poll for feature flag updates.
            </summary>
            <remarks>
            The default and minimum value is <see cref="F:LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder.DefaultPollInterval"/>. Values less than this will
            be set to the default.
            </remarks>
            <param name="pollInterval">the polling interval</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder.Build(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder.DescribeConfiguration(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder">
             <summary>
             Contains methods for configuring the SDK's service URIs.
             </summary>
             <remarks>
             <para>
             If you want to set non-default values for any of these properties, create a builder with
             <see cref="M:LaunchDarkly.Sdk.Server.Components.ServiceEndpoints"/>, change its properties with the methods of this class, and pass it
             to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.ServiceEndpoints(LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder)" />.
             </para>
             <para>
             The default behavior, if you do not change any of these properties, is that the SDK will connect
             to the standard endpoints in the LaunchDarkly production service. There are several use cases for
             changing these properties:
             </para>
             <list type="bullet">
             <item><description>
             You are using the <a href="https://docs.launchdarkly.com/home/advanced/relay-proxy">LaunchDarkly
             Relay Proxy</a>. In this case, set <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.RelayProxy(System.Uri)"/> to the base URI of the Relay Proxy
             instance. Note that this is not the same as a regular HTTP proxy, which would be set with
             <see cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.Proxy(System.Net.IWebProxy)"/>.
             </description></item>
             <item><description>
             You are connecting to a private instance of LaunchDarkly, rather than the standard production
             services. In this case, there will be custom base URIs for each service, so you must set
             <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Streaming(System.Uri)"/>, <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Polling(System.Uri)"/>, and <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Events(System.Uri)"/>.
             </description></item>
             <item><description>
             You are connecting to a test fixture that simulates the service endpoints. In this case, you
             may set the base URIs to whatever you want, although the SDK will still set the URI paths to
             the expected paths for LaunchDarkly services.
             </description></item>
             </list>
             <para>
             Each of the setter methods can be called with either a <see cref="T:System.Uri"/> or an equivalent
             string. Passing a string that is not a valid URI will cause an immediate
             <see cref="T:System.UriFormatException"/>
             </para>
             <para>
             If you are using a private instance and you set some of the base URIs, but not all of them,
             the SDK will log an error and may not work properly. The only exception is if you have explicitly
             disabled the SDK's use of one of the services: for instance, if you have disabled analytics
             events with <see cref="P:LaunchDarkly.Sdk.Server.Components.NoEvents"/>, you do not have to set <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Events(System.Uri)"/>.
             </para>
             </remarks>
             <example>
             <code >
                 // Example of specifying a Relay Proxy instance
                 var config = Configuration.Builder(sdkKey)
                     .ServiceEndpoints(Components.ServiceEndpoints()
                         .RelayProxy("http://my-relay-hostname:8080"))
                     .Build();
            
                 // Example of specifying a private LaunchDarkly instance
                 var config = Configuration.Builder(sdkKey)
                     .ServiceEndpoints(Components.ServiceEndpoints()
                         .Streaming("https://stream.mycompany.launchdarkly.com")
                         .Polling("https://app.mycompany.launchdarkly.com")
                         .Events("https://events.mycompany.launchdarkly.com"))
                     .Build();
             </code>
             </example>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Events(System.Uri)">
            <summary>
            Sets a custom base URI for the events service.
            </summary>
            <remarks>
            You should only call this method if you are using a private instance or a test fixture
            (see <see cref="T:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder"/>). If you are using the LaunchDarkly Relay Proxy,
            call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.RelayProxy(System.Uri)"/> instead.
            </remarks>
            <example>
                var config = Configuration.Builder(sdkKey)
                    .ServiceEndpoints(Components.ServiceEndpoints()
                        .Streaming("https://stream.mycompany.launchdarkly.com")
                        .Polling("https://app.mycompany.launchdarkly.com")
                        .Events("https://events.mycompany.launchdarkly.com"))
                    .Build();
            </example>
            <param name="eventsBaseUri">the base URI of the events service; null to use the default</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Events(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Events(System.String)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Events(System.Uri)"/>, specifying the URI as a string.
            </summary>
            <param name="eventsBaseUri">the base URI of the events service, or
            <see langword="null"/> to reset to the default</param>
            <returns>the same builder</returns>
            <exception cref="T:System.UriFormatException">if the string is not null and is not a valid URI</exception>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Events(System.Uri)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Polling(System.Uri)">
            <summary>
            Sets a custom base URI for the polling service.
            </summary>
            <remarks>
            You should only call this method if you are using a private instance or a test fixture
            (see <see cref="T:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder"/>). If you are using the LaunchDarkly Relay Proxy,
            call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.RelayProxy(System.Uri)"/> instead.
            </remarks>
            <example>
                var config = Configuration.Builder(sdkKey)
                    .ServiceEndpoints(Components.ServiceEndpoints()
                        .Streaming("https://stream.mycompany.launchdarkly.com")
                        .Polling("https://app.mycompany.launchdarkly.com")
                        .Events("https://events.mycompany.launchdarkly.com"))
                    .Build();
            </example>
            <param name="pollingBaseUri">the base URI of the polling service; null to use the default</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Polling(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Polling(System.String)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Polling(System.Uri)"/>, specifying the URI as a string.
            </summary>
            <param name="pollingBaseUri">the base URI of the polling service, or
            <see langword="null"/> to reset to the default</param>
            <returns>the same builder</returns>
            <exception cref="T:System.UriFormatException">if the string is not null and is not a valid URI</exception>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Polling(System.Uri)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.RelayProxy(System.Uri)">
            <summary>
            Specifies a single base URI for a Relay Proxy instance.
            </summary>
            <remarks>
            <para>
            When using the <see href="https://docs.launchdarkly.com/home/relay-proxy">LaunchDarkly Relay Proxy</see>,
            the SDK only needs to know the single base URI of the Relay Proxy, which will provide all of the
            proxied service endpoints.
            </para>
            <para>
            Note that this is not the same as a regular HTTP proxy, which would be set with
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.Proxy(System.Net.IWebProxy)"/>.
            </para>
            </remarks>
            <example>
            <code>
                var relayUri = new Uri("http://my-relay-hostname:8080");
                var config = Configuration.Builder(sdkKey)
                    .ServiceEndpoints(Components.ServiceEndpoints().RelayProxy(relayUri))
                    .Build();
            </code>
            </example>
            <param name="relayProxyBaseUri">the Relay Proxy base URI, or
            <see langword="null"/> to reset to default endpoints</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.RelayProxy(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.RelayProxy(System.String)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.RelayProxy(System.Uri)"/>, specifying the URI as a string.
            </summary>
            <param name="relayProxyBaseUri">the Relay Proxy base URI, or
            <see langword="null"/> to reset to default endpoints</param>
            <returns>the same builder</returns>
            <exception cref="T:System.UriFormatException">if the string is not null and is not a valid URI</exception>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.RelayProxy(System.Uri)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Streaming(System.Uri)">
            <summary>
            Sets a custom base URI for the streaming service.
            </summary>
            <remarks>
            You should only call this method if you are using a private instance or a test fixture
            (see <see cref="T:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder"/>). If you are using the LaunchDarkly Relay Proxy,
            call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.RelayProxy(System.Uri)"/> instead.
            </remarks>
            <example>
                var config = Configuration.Builder(sdkKey)
                    .ServiceEndpoints(Components.ServiceEndpoints()
                        .Streaming("https://stream.mycompany.launchdarkly.com")
                        .Polling("https://app.mycompany.launchdarkly.com")
                        .Events("https://events.mycompany.launchdarkly.com"))
                    .Build();
            </example>
            <param name="streamingBaseUri">the base URI of the streaming service; null to use the default</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Streaming(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Streaming(System.String)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Streaming(System.Uri)"/>, specifying the URI as a string.
            </summary>
            <param name="streamingBaseUri">the base URI of the streaming service, or
            <see langword="null"/> to reset to the default</param>
            <returns>the same builder</returns>
            <exception cref="T:System.UriFormatException">if the string is not null and is not a valid URI</exception>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Streaming(System.Uri)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.Build">
            <summary>
            Called internally by the SDK to create a configuration instance. Applications do not need
            to call this method.
            </summary>
            <returns>the configuration object</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder">
            <summary>
            Contains methods for configuring the streaming data source.
            </summary>
            <remarks>
            <para>
            By default, the SDK uses a streaming connection to receive feature flag data from LaunchDarkly. If you want
            to customize the behavior of the connection, create a builder with <see cref="M:LaunchDarkly.Sdk.Server.Components.StreamingDataSource"/>,
            change its properties with the methods of this class, and pass it to <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataSource(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataSource})"/>.
            </para>
            <para>
            Setting <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Offline(System.Boolean)"/> to <see langword="true"/> will supersede this
            setting and completely disable network requests.
            </para>
            </remarks>
            <example>
            <code>
                var config = Configuration.Builder(sdkKey)
                    .DataSource(Components.PollingDataSource()
                        .PollInterval(TimeSpan.FromSeconds(45)))
                    .Build();
            </code>
            </example>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder.DefaultInitialReconnectDelay">
            <summary>
            The default value for <see cref="M:LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder.InitialReconnectDelay(System.TimeSpan)"/>: 1000 milliseconds.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder.InitialReconnectDelay(System.TimeSpan)">
            <summary>
            Sets the initial reconnect delay for the streaming connection.
            </summary>
            <remarks>
            <para>
            The streaming service uses a backoff algorithm (with jitter) every time the connection needs
            to be reestablished.The delay for the first reconnection will start near this value, and then
            increase exponentially for any subsequent connection failures.
            </para>
            <para>
            The default value is <see cref="F:LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder.DefaultInitialReconnectDelay"/>.
            </para>
            </remarks>
            <param name="initialReconnectDelay">the reconnect time base value</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder.Build(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder.DescribeConfiguration(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.TestData">
             <summary>
             A mechanism for providing dynamically updatable feature flag state in a simplified form to an SDK
             client in test scenarios.
             </summary>
             <remarks>
             <para>
             Unlike <see cref="T:LaunchDarkly.Sdk.Server.Integrations.FileData"/>, this mechanism does not use any external resources. It provides only
             the data that the application has put into it using the <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Update(LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder)"/> method.
             </para>
             <para>
             The example code below uses a simple boolean flag, but more complex configurations are possible using
             the methods of the <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder"/> that is returned by <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Flag(System.String)"/>.
             <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder"/> supports many of the ways a flag can be configured on the LaunchDarkly
             dashboard, but does not currently support 1. rule operators other than "in" and "not in", or 2.
             percentage rollouts.
             </para>
             <para>
             If the same <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData"/> instance is used to configure multiple <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/>
             instances, any changes made to the data will propagate to all of the <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/>s.
             </para>
             </remarks>
             <example>
             <code>
                 var td = TestData.DataSource();
                 td.Update(td.Flag("flag-key-1").BooleanFlag().VariationForAll(true));
            
                 var config = Configuration.Builder("sdk-key")
                     .DataSource(td)
                     .Build();
                 var client = new LdClient(config);
            
                 // flags can be updated at any time:
                 td.update(testData.flag("flag-key-2")
                     .VariationForUser("some-user-key", true)
                     .FallthroughVariation(false));
             </code>
             </example>
             <seealso cref="T:LaunchDarkly.Sdk.Server.Integrations.FileData"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.DataSource">
            <summary>
            Creates a new instance of the test data source.
            </summary>
            <remarks>
            See <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData"/> for details.
            </remarks>
            <returns>a new configurable test data source</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Flag(System.String)">
            <summary>
            Creates or copies a <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder"/> for building a test flag configuration.
            </summary>
            <remarks>
            <para>
            If this flag key has already been defined in this <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData"/> instance, then
            the builder starts with the same configuration that was last provided for this flag.
            </para>
            <para>
            Otherwise, it starts with a new default configuration in which the flag has <c>true</c>
            and <c>false</c> variations, is <c>true</c> for all contexts when targeting is turned on
            and <c>false</c> otherwise, and currently has targeting turned on. You can change any
            of those properties, and provide more complex behavior, using the
            <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder"/> methods.
            </para>
            <para>
            Once you have set the desired configuration, pass the builder to
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Update(LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder)"/>.
            </para>
            </remarks>
            <param name="key">the flag key</param>
            <returns>a flag configuration builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Update(LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Update(LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder)">
            <summary>
            Updates the test data with the specified flag configuration.
            </summary>
            <remarks>
            <para>
            This has the same effect as if a flag were added or modified on the LaunchDarkly dashboard.
            It immediately propagates the flag change to any <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/> instance(s) that
            you have already configured to use this <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData"/>. If no <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/>
            has been started yet, it simply adds this flag to the test data which will be provided to any
            <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/> that you subsequently configure.
            </para>
            <para>
            Any subsequent changes to this <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder"/> instance do not affect the test data,
            unless you call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Update(LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder)"/> again.
            </para>
            </remarks>
            <param name="flagBuilder">a flag configuration builder</param>
            <returns>the same <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData"/> instance</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Flag(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.UsePreconfiguredFlag(LaunchDarkly.Sdk.Server.Internal.Model.FeatureFlag)">
            <summary>
            For SDK tests only - inserts a full feature flag data model object into the test data.
            </summary>
            <remarks>
            This fully replaces any existing flag with the same key, and immediately propagates the change
            to any LdClient instance(s) using the data source.
            </remarks>
            <param name="flag">a flag instance</param>
            <returns>the same <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData"/> instance</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.UpdateStatus(LaunchDarkly.Sdk.Server.Interfaces.DataSourceState,System.Nullable{LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo})">
            <summary>
            Simulates a change in the data source status.
            </summary>
            <remarks>
            Use this if you want to test the behavior of application code that uses
            <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DataSourceStatusProvider"/> to track whether the data source is having
            problems (for example, a network failure interrupting the streaming connection). It does
            not actually stop the <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData"/> data source from working, so even if you have
            simulated an outage, calling <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Update(LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder)"/> will still send updates.
            </remarks>
            <param name="newState">one of the constants defined by <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState"/></param>
            <param name="newError">an optional <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo"/> instance</param>
            <returns></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Build(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <inheritdoc/>/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder">
            <summary>
            A builder for feature flag configurations to be used with <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData"/>.
            </summary>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Flag(System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Update(LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.BooleanFlag">
            <summary>
            A shortcut for setting the flag to use the standard boolean configuration.
            </summary>
            <remarks>
            This is the default for all new flags created with <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Flag(System.String)"/>.
            The flag will have two variations, <c>true</c> and <c>false</c> (in that order); it will
            return <c>false</c> whenever targeting is off, and <c>true</c> when targeting is on if
            no other settings specify otherwise.
            </remarks>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.On(System.Boolean)">
            <summary>
            Sets targeting to be on or off for this flag.
            </summary>
            <remarks>
            The effect of this depends on the rest of the flag configuration, just as it does on the
            real LaunchDarkly dashboard. In the default configuration that you get from calling
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.Flag(System.String)"/> with a new flag key, the flag will return <c>false</c>
            whenever targeting is off, and <c>true</c> when targeting is on.
            </remarks>
            <param name="on">true if targeting should be on</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.FallthroughVariation(System.Boolean)">
            <summary>
            Specifies the fallthrough variation for a boolean flag.
            </summary>
            <remarks>
            <para>
            The fallthrough is the value that is returned if targeting is on and the context was not
            matched by a more specific target or rule.
            </para>
            <para>
            If the flag was previously configured with other variations, this also changes it to a
            boolean flag.
            </para>
            </remarks>
            <param name="variation">true if the flag should return true by default when targeting is on</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.FallthroughVariation(System.Int32)">
            <summary>
            Specifies the index of the fallthrough variation.
            </summary>
            <remarks>
            The fallthrough is the value that is returned if targeting is on and the context was not
            matched by a more specific target or rule.
            </remarks>
            <param name="variationIndex">the desired fallthrough variation: 0 for the first, 1 for the second, etc.</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.OffVariation(System.Boolean)">
            <summary>
            Specifies the off variation for a boolean flag.
            </summary>
            <remarks>
            This is the variation that is returned whenever targeting is off.
            </remarks>
            <param name="variation">true if the flag should return true when targeting is off</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.OffVariation(System.Int32)">
            <summary>
            Specifies the index of the off variation.
            </summary>
            <remarks>
            This is the variation that is returned whenever targeting is off.
            </remarks>
            <param name="variationIndex">the desired off variation: 0 for the first, 1 for the second, etc.</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForAll(System.Boolean)">
            <summary>
            Sets the flag to always return the specified boolean variation for all contexts.
            </summary>
            <remarks>
            Targeting is switched on, any existing targets or rules are removed, and the flag's variations are
            set to <c>true</c> and <c>false</c>. The fallthrough variation is set to the specified value. The
            off variation is left unchanged.
            </remarks>
            <param name="variation">the desired true/false variation to be returned</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForAll(System.Int32)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.ValueForAll(LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForAll(System.Int32)">
            <summary>
            Sets the flag to always return the specified variation for all contexts.
            </summary>
            <remarks>
            The variation is specified by number, out of whatever variation values have already been
            defined. Targeting is switched on, and any existing targets or rules are removed. The fallthrough
            variation is set to the specified value. The off variation is left unchanged.
            </remarks>
            <param name="variationIndex">the desired variation: 0 for the first, 1 for the second, etc.</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForAll(System.Boolean)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.ValueForAll(LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.ValueForAll(LaunchDarkly.Sdk.LdValue)">
            <summary>
            Sets the flag to always return the specified variation value for all contexts.
            </summary>
            <remarks>
            The value may be of any JSON type, as defined by <see cref="T:LaunchDarkly.Sdk.LdValue"/>. This method changes the
            flag to have only a single variation, which is this value, and to return the same variation
            regardless of whether targeting is on or off. Any existing targets or rules are removed.
            </remarks>
            <param name="value">the desired value to be returned</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForAll(System.Boolean)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForAll(System.Int32)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForUser(System.String,System.Boolean)">
            <summary>
            Sets the flag to return the specified boolean variation for a specific user key (that is,
            for a context with that key whose context kind is "user") when targeting is on.
            </summary>
            <remarks>
            <para>
            This does not affect the flag's off variation that is used when targeting is off.
            </para>
            <para>
            If the flag was not already a boolean flag, this also changes it to a boolean flag.
            </para>
            </remarks>
            <param name="userKey">a user key</param>
            <param name="variation">the desired true/false variation to be returned for this user when
            targeting is on</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForUser(System.String,System.Int32)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForKey(LaunchDarkly.Sdk.ContextKind,System.String,System.Boolean)">
            <summary>
            Sets the flag to return the specified boolean variation for a specific context, identified
            by context kind and key, when targeting is on.
            </summary>
            <remarks>
            <para>
            This does not affect the flag's off variation that is used when targeting is off.
            </para>
            <para>
            If the flag was not already a boolean flag, this also changes it to a boolean flag.
            </para>
            </remarks>
            <param name="contextKind">the context kind</param>
            <param name="key">the context key</param>
            <param name="variation">the desired true/false variation to be returned for this context when
            targeting is on</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForKey(LaunchDarkly.Sdk.ContextKind,System.String,System.Int32)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForUser(System.String,System.Int32)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForUser(System.String,System.Int32)">
            <summary>
            Sets the flag to return the specified variation for a specific user key (that is,
            for a context with that key whose context kind is "user") when targeting is on.
            </summary>
            <remarks>
            This has no effect when targeting is turned off for the flag. The variation is specified
            by number, out of whatever variation values have already been defined.
            </remarks>
            <param name="userKey">a user key</param>
            <param name="variationIndex">the desired variation to be returned for this user when
            targeting is on: 0 for the first, 1 for the second, etc.</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForUser(System.String,System.Boolean)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForKey(LaunchDarkly.Sdk.ContextKind,System.String,System.Int32)">
            <summary>
            Sets the flag to return the specified variation for a specific context, identified
            by context kind and key, when targeting is on.
            </summary>
            <remarks>
            This has no effect when targeting is turned off for the flag. The variation is specified
            by number, out of whatever variation values have already been defined.
            </remarks>
            <param name="contextKind">the context kind</param>
            <param name="key">the context key</param>
            <param name="variationIndex">the desired variation to be returned for this context when
            targeting is on: 0 for the first, 1 for the second, etc.</param>
            <returns>the builder</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForKey(LaunchDarkly.Sdk.ContextKind,System.String,System.Boolean)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForUser(System.String,System.Int32)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.Variations(LaunchDarkly.Sdk.LdValue[])">
            <summary>
            Changes the allowable variation values for the flag.
            </summary>
            <remarks>
            The value may be of any JSON type, as defined by <see cref="T:LaunchDarkly.Sdk.LdValue"/>. For instance, a boolean flag
            normally has <c>LdValue.Of(true), LdValue.Of(false)</c>; a string-valued flag might have
            <c>LdValue.Of("red"), LdValue.Of("green")</c>; etc.
            </remarks>
            <param name="values">the desired variations</param>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.IfMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])">
            <summary>
            Starts defining a flag rule, using the "is one of" operator. This matching expression
            only applies to contexts of a specific kind.
            </summary>
            <remarks>
            <para>
            For example, this creates a rule that returns <c>true</c> if the name attribute for the
            "company" context is "Ella" or "Monsoon":
            </para>
            <example>
            <code>
                testData.Update(testData.Flag("flag-key")
                    .IfMatchContext("company", "name", LdValue.Of("Ella"), LdValue.Of("Monsoon"))
                    .ThenReturn(true));
            </code>
            </example>
            </remarks>
            <param name="contextKind">the context kind to match</param>
            <param name="attribute">the attribute to match against</param>
            <param name="values">values to compare to</param>
            <returns>a <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder"/>; call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Boolean)"/>
            or <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Int32)"/> to finish the rule, or add more tests with
            another method like <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.IfMatch(System.String,LaunchDarkly.Sdk.LdValue[])">
            <summary>
            Starts defining a flag rule, using the "is one of" operator. This is a shortcut for calling
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.IfMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])"/> with "user" as the context kind.
            </summary>
            <remarks>
            <para>
            For example, this creates a rule that returns <c>true</c> if the name is "Patsy" or "Edina":
            </para>
            <example>
            <code>
                testData.Update(testData.Flag("flag-key")
                    .IfMatch("name", LdValue.Of("Patsy"), LdValue.Of("Edina"))
                    .ThenReturn(true));
            </code>
            </example>
            </remarks>
            <param name="attribute">the user attribute to match against</param>
            <param name="values">values to compare to</param>
            <returns>a <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder"/>; call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Boolean)"/>
            or <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Int32)"/> to finish the rule, or add more tests with
            another method like <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndMatch(System.String,LaunchDarkly.Sdk.LdValue[])"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.IfNotMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])">
            <summary>
            Starts defining a flag rule, using the "is not one of" operator. This matching expression
            only applies to contexts of a specific kind.
            </summary>
            <remarks>
            <para>
            For example, this creates a rule that returns <c>true</c> if the name attribute for the
            "company" context is neither "Pendant" nor "Sterling Cooper":
            </para>
            <example>
            <code>
                testData.Update(testData.Flag("flag-key")
                    .IfNotMatchContext("company", "name", LdValue.Of("Pendant"), LdValue.Of("Sterling Cooper"))
                    .ThenReturn(true));
            </code>
            </example>
            </remarks>
            <param name="contextKind">the context kind to match</param>
            <param name="attribute">the attribute to match against</param>
            <param name="values">values to compare to</param>
            <returns>a <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder"/>; call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Boolean)"/>
            or <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Int32)"/> to finish the rule, or add more tests with
            another method like <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.IfNotMatch(System.String,LaunchDarkly.Sdk.LdValue[])">
            <summary>
            Starts defining a flag rule, using the "is not one of" operator. This is a shortcut for calling
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.IfNotMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])"/> with "user" as the context kind.
            </summary>
            <remarks>
            <para>
            For example, this creates a rule that returns <c>true</c> if the name is neither
            "Saffron" nor "Bubble":
            </para>
            <example>
            <code>
                testData.Update(testData.Flag("flag-key")
                    .IfNotMatch("name", LdValue.Of("Saffron"), LdValue.Of("Bubble"))
                    .ThenReturn(true));
            </code>
            </example>
            </remarks>
            <param name="attribute">the user attribute to match against</param>
            <param name="values">values to compare to</param>
            <returns>a <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder"/>; call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Boolean)"/>
            or <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Int32)"/> to finish the rule, or add more tests with
            another method like <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndMatch(System.String,LaunchDarkly.Sdk.LdValue[])"/></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.ClearRules">
            <summary>
            Removes any existing rules from the flag.
            </summary>
            <remarks>
            This undoes the effect of methods like <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.IfMatch(System.String,LaunchDarkly.Sdk.LdValue[])"/>.
            </remarks>
            <returns>the builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.ClearTargets">
            <summary>
            Removes any existing user/context targets from the flag.
            </summary>
            <remarks>
            This undoes the effect of methods like <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.VariationForUser(System.String,System.Boolean)"/>.
            </remarks>
            <returns>the builder</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder">
            <summary>
            A builder for feature flag rules to be used with <see cref="T:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder"/>.
            </summary>
            <remarks>
            <para>
            In the LaunchDarkly model, a flag can have any number of rules, and a rule can have any number of
            clauses. A clause is an individual test such as "name is 'X'". A rule matches a context if all of the
            rule's clauses match the context.
            </para>
            <para>
            To start defining a rule, use one of the flag builder's matching methods such as
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.IfMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])"/>. This defines the first clause for
            the rule. Optionally, you may add more clauses with the rule builder's methods such as
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])"/>. Finally, call <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Boolean)"/> or
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Int32)"/> to finish defining the rule.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])">
            <summary>
            Adds another clause, using the "is one of" operator. This matching expression
            only applies to contexts of a specific kind.
            </summary>
            <remarks>
            <para>
            For example, this creates a rule that returns <c>true</c> if the name attribute for the
            "company" context is "Ella" and the country is "gb":
            </para>
            <example>
            <code>
                testData.Update(testData.Flag("flag-key")
                    .IfMatchContext("company", "name", LdValue.Of("Ella"))
                    .AndMatchContext("company", "country", LdValue.Of("gb"))
                    .ThenReturn(true));
            </code>
            </example>
            </remarks>
            <param name="contextKind">the context kind to match</param>
            <param name="attribute">the attribute to match against</param>
            <param name="values">values to compare to</param>
            <returns>the rule builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndMatch(System.String,LaunchDarkly.Sdk.LdValue[])">
            <summary>
            Adds another clause, using the "is one of" operator. This is a shortcut for calling
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])"/> with "user" as the context kind.
            </summary>
            <remarks>
            <para>
            For example, this creates a rule that returns <c>true</c> if the name is "Patsy" and the
            country is "gb":
            </para>
            <example>
            <code>
                testData.Update(testData.Flag("flag-key")
                    .IfMatch("name", LdValue.Of("Patsy"))
                    .AndMatch("country", LdValue.Of("gb"))
                    .ThenReturn(true));
            </code>
            </example>
            </remarks>
            <param name="attribute">the user attribute to match against</param>
            <param name="values">values to compare to</param>
            <returns>the rule builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndNotMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])">
            <summary>
            Adds another clause, using the "is not one of" operator. This matching expression
            only applies to contexts of a specific kind.
            </summary>
            <remarks>
            <para>
            For example, this creates a rule that returns <c>true</c> if the name attribute for the
            "company" context is "Ella" and the country is not "gb":
            </para>
            <example>
            <code>
                testData.Update(testData.Flag("flag-key")
                    .IfMatchContext("company", "name", LdValue.Of("Ella"))
                    .AndNotMatchContext("company", "country", LdValue.Of("gb"))
                    .ThenReturn(true));
            </code>
            </example>
            </remarks>
            <param name="contextKind">the context kind to match</param>
            <param name="attribute">the attribute to match against</param>
            <param name="values">values to compare to</param>
            <returns>the rule builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndNotMatch(System.String,LaunchDarkly.Sdk.LdValue[])">
            <summary>
            Adds another clause, using the "is not one of" operator. This is a shortcut for calling
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.AndNotMatchContext(LaunchDarkly.Sdk.ContextKind,System.String,LaunchDarkly.Sdk.LdValue[])"/> with "user" as the context kind.
            </summary>
            <remarks>
            <para>
            For example, this creates a rule that returns <c>true</c> if the name is "Patsy" and the
            country is not "gb":
            </para>
            <example>
            <code>
                testData.Update(testData.Flag("flag-key")
                    .IfMatch("name", LdValue.Of("Patsy"))
                    .AndNotMatch("country", LdValue.Of("gb"))
                    .ThenReturn(true));
            </code>
            </example>
            </remarks>
            <param name="attribute">the user attribute to match against</param>
            <param name="values">values to compare to</param>
            <returns>the rule builder</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Boolean)">
            <summary>
            Finishes defining the rule, specifying the result value as a boolean.
            </summary>
            <param name="variation">the value to return if the rule matches the user</param>
            <returns></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.ThenReturn(System.Int32)">
            <summary>
            Finishes defining the rule, specifying the result as a variation index.
            </summary>
            <param name="variationIndex">the variation to return if the rule matches the user: 0 for the first, 1
            for the second, etc.</param>
            <returns>the flag builder</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.BigSegmentStoreStatus">
            <summary>
            Information about the status of a Big Segment store, provided by
            <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.IBigSegmentStoreStatusProvider"/>.
            </summary>
            <remarks>
            "Big Segments" are a specific type of user segments. For more information, read the LaunchDarkly
            documentation about user segments: https://docs.launchdarkly.com/home/users/segments
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.BigSegmentStoreStatus.Available">
            <summary>
            True if the Big Segment store is able to respond to queries, so that the SDK can
            evaluate whether a user is in a segment or not.
            </summary>
            <remarks>
            If this property is false, the store is not able to make queries (for instance, it may not have
            a valid database connection). In this case, the SDK will treat any reference to a Big Segment
            as if no users are included in that segment. Also, the <see cref="T:LaunchDarkly.Sdk.EvaluationReason"/>
            associated with any flag evaluation that references a Big Segment when the store is not
            available will have a <see cref="P:LaunchDarkly.Sdk.EvaluationReason.BigSegmentsStatus"/> of
            <see cref="F:LaunchDarkly.Sdk.BigSegmentsStatus.StoreError"/>.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.BigSegmentStoreStatus.Stale">
            <summary>
            True if the Big Segment store is available, but has not been updated within the amount of time
            specified by <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.StaleAfter(System.TimeSpan)"/>.
            </summary>
            <remarks>
            This may indicate that the LaunchDarkly Relay Proxy, which populates the store, has stopped
            running or has become unable to receive fresh data from LaunchDarkly. Any feature flag
            evaluations that reference a Big Segment will be using the last known data, which may be out
            of date.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.BigSegmentStoreStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus">
            <summary>
            Information about the data source's status and about the last status change.
            </summary>
            <seealso cref="P:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.Status"/>
            <seealso cref="E:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.StatusChanged"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.State">
            <summary>
            An enumerated value representing the overall current state of the data source.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.StateSince">
            <summary>
            The date/time that the value of <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.State"/> most recently changed.
            </summary>
            <remarks>
            The meaning of this depends on the current state:
            <list type="bullet">
            <item><description>For <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Initializing"/>, it is the time that the SDK started initializing.</description></item>
            <item><description>For <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Valid"/>, it is the time that the data source most recently entered a valid
            state, after previously having been either <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Initializing"/> or
            <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Interrupted"/>.</description></item>
            <item><description>For <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Interrupted"/>, it is the time that the data source most recently entered an
            error state, after previously having been <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Valid"/>.</description></item>
            <item><description>For <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Off"/>, it is the time that the data source encountered an unrecoverable error
            or that the SDK was explicitly shut down.</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.LastError">
            <summary>
            Information about the last error that the data source encountered, if any.
            </summary>
            <remarks>
            This property should be updated whenever the data source encounters a problem, even if it does not cause
            <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.State"/> to change. For instance, if a stream connection fails and the state changes to
            <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Interrupted"/>, and then subsequent attempts to restart the connection also fail, the
            state will remain <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Interrupted"/> but the error information will be updated each time--
            and the last error will still be reported in this property even if the state later becomes
            <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Valid"/>.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo">
            <summary>
            A description of an error condition that the data source encountered.
            </summary>
            <seealso cref="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.LastError"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.Kind">
            <summary>
            An enumerated value representing the general category of the error.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.StatusCode">
            <summary>
            The HTTP status code if the error was <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind.ErrorResponse"/>, or zero otherwise.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.Message">
            <summary>
            Any additional human-readable information relevant to the error.
            </summary>
            <remarks>
            The format of this message is subject to change and should not be relied on programmatically.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.Time">
            <summary>
            The date/time that the error occurred.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.FromException(System.Exception)">
            <summary>
            Constructs an instance based on an exception.
            </summary>
            <param name="e">the exception</param>
            <returns>an ErrorInfo</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.FromHttpError(System.Int32)">
            <summary>
            Constructs an instance based on an HTTP error status.
            </summary>
            <param name="statusCode">the status code</param>
            <returns>an ErrorInfo</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind">
            <summary>
            An enumeration describing the general type of an error reported in <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind.Unknown">
            <summary>
            An unexpected error, such as an uncaught exception, further described by <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.Message"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind.NetworkError">
            <summary>
            An I/O error such as a dropped connection.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind.ErrorResponse">
            <summary>
            The LaunchDarkly service returned an HTTP response with an error status, available with
            <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.StatusCode"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind.InvalidData">
            <summary>
            The SDK received malformed data from the LaunchDarkly service.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind.StoreError">
            <summary>
            The data source itself is working, but when it tried to put an update into the data store, the data
            store failed (so the SDK may not have the latest data).
            </summary>
            <remarks>
            Data source implementations do not need to report this kind of error; it will be automatically
            reported by the SDK whenever one of the update methods of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates"/> throws an
            exception.
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState">
            <summary>
            An enumeration of possible values for <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.State"/>.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Initializing">
            <summary>
            The initial state of the data source when the SDK is being initialized.
            </summary>
            <remarks>
            If it encounters an error that requires it to retry initialization, the state will remain at
            <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Initializing"/> until it either succeeds and becomes <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Valid"/>, or
            permanently fails and becomes <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Off"/>.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Valid">
            <summary>
            Indicates that the data source is currently operational and has not had any problems since the
            last time it received data.
            </summary>
            <remarks>
            In streaming mode, this means that there is currently an open stream connection and that at least
            one initial message has been received on the stream. In polling mode, it means that the last poll
            request succeeded.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Interrupted">
            <summary>
            Indicates that the data source encountered an error that it will attempt to recover from.
            </summary>
            <remarks>
            In streaming mode, this means that the stream connection failed, or had to be dropped due to some
            other error, and will be retried after a backoff delay. In polling mode, it means that the last poll
            request failed, and a new poll request will be made after the configured polling interval.
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Off">
            <summary>
            Indicates that the data source has been permanently shut down.
            </summary>
            <remarks>
            This could be because it encountered an unrecoverable error (for instance, the LaunchDarkly service
            rejected the SDK key; an invalid SDK key will never become valid), or because the SDK client was
            explicitly shut down.
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatusExtensions">
            <summary>
            Extension helper methods for use with data source status types.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatusExtensions.Identifier(LaunchDarkly.Sdk.Server.Interfaces.DataSourceState)">
            <summary>
            Returns a standardized string identifier for a <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState"/>.
            </summary>
            <remarks>
            These Java-style uppercase identifiers (<c>INITIALIZING</c>, <c>VALID</c>, etc.) may be used in
            logging for consistency across SDKs.
            </remarks>
            <param name="state">a state value</param>
            <returns>a string identifier</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatusExtensions.Identifier(LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind)">
            <summary>
            Returns a standardized string identifier for a <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind"/>.
            </summary>
            <remarks>
            These Java-style uppercase identifiers (<c>ERROR_RESPONSE</c>, <c>NETWORK_ERROR</c>, etc.) may be
            used in logging for consistency across SDKs.
            </remarks>
            <param name="errorKind">an error kind value</param>
            <returns>a string identifier</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.DataStoreStatus">
            <summary>
            Information about a data store status change.
            </summary>
            <seealso cref="T:LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.DataStoreStatus.Available">
            <summary>
            True if the SDK believes the data store is now available.
            </summary>
            <remarks>
            This property is normally true. If the SDK receives an exception while trying to query
            or update the data store, then it sets this property to false (notifying listeners, if
            any) and polls the store at intervals until a query succeeds. Once it succeeds, it sets
            the property back to true (again notifying listeners).
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.DataStoreStatus.RefreshNeeded">
            <summary>
            True if the store may be out of date due to a previous outage, so the SDK should attempt
            to refresh all feature flag data and rewrite it to the store.
            </summary>
            <remarks>
            This property is not meaningful to application code. It is used internally.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.DataStoreStatus.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.IBigSegmentStoreStatusProvider">
            <summary>
            An interface for querying the status of a Big Segment store.
            </summary>
            <remarks>
            <para>
            The Big Segment store is the component that receives information about Big Segments, normally
            from a database populated by the LaunchDarkly Relay Proxy. "Big Segments" are a specific type
            of user segments. For more information, read the LaunchDarkly documentation about user
            segments: https://docs.launchdarkly.com/home/users/segments
            </para>
            <para>
            An implementation of this interface is returned by <see cref="P:LaunchDarkly.Sdk.Server.LdClient.BigSegmentStoreStatusProvider"/>.
            Application code never needs to implement this interface.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.IBigSegmentStoreStatusProvider.Status">
            <summary>
            The current status of the store.
            </summary>
        </member>
        <member name="E:LaunchDarkly.Sdk.Server.Interfaces.IBigSegmentStoreStatusProvider.StatusChanged">
            <summary>
            An event for receiving notifications of status changes.
            </summary>
            <remarks>
            <para>
            Any handlers attached to this event will be notified whenever any property of the status has changed.
            See <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.BigSegmentStoreStatus"/>for an explanation of the meaning of each property and what
            could cause it to change.
            </para>
            <para>
            Notifications will be dispatched on a background task. It is the listener's responsibility to return
            as soon as possible so as not to block subsequent notifications.
            </para>
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider">
            <summary>
            An interface for querying the status of the SDK's data source.
            </summary>
            <remarks>
            <para>
            The data source is the component that receives updates to feature flag data. Normally this is a streaming
            connection, but it could be polling or file data depending on your configuration.
            </para>
            <para>
            An implementation of this interface is returned by <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DataSourceStatusProvider"/>.
            Application code never needs to implement this interface.
            </para>
            </remarks>
            <seealso cref="P:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DataSourceStatusProvider"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.Status">
            <summary>
            The current status of the data source.
            </summary>
            <remarks>
            <para>
            All of the built-in data source implementations are guaranteed to update this status whenever they
            successfully initialize, encounter an error, or recover after an error.
            </para>
            <para>
            For a custom data source implementation, it is the responsibility of the data source to report its
            status via <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates"/>; if it does not do so, the status will always be reported
            as <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Initializing"/>.
            </para>
            </remarks>
        </member>
        <member name="E:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.StatusChanged">
            <summary>
            An event for receiving notifications of status changes.
            </summary>
            <remarks>
            <para>
            Any handlers attached to this event will be notified whenever any property of the status has changed.
            See <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus"/>for an explanation of the meaning of each property and what could cause it
            to change.
            </para>
            <para>
            Notifications will be dispatched on a background task. It is the listener's responsibility to return
            as soon as possible so as not to block subsequent notifications.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.WaitFor(LaunchDarkly.Sdk.Server.Interfaces.DataSourceState,System.TimeSpan)">
             <summary>
             A synchronous method for waiting for a desired connection state.
             </summary>
             <remarks>
             <para>
             If the current state is already <paramref name="desiredState"/> when this method is called, it immediately
             returns. Otherwise, it blocks until 1. the state has become <paramref name="desiredState"/>, 2. the state
             has become <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Off"/> (since that is a permanent condition), or 3. the specified
             timeout elapses.
             </para>
             <para>
             A scenario in which this might be useful is if you want to create the <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/> without waiting
             for it to initialize, and then wait for initialization at a later time or on a different thread:
             </para>
             <code>
                 // create the client but do not wait
                 var config = Configuration.Builder("my-sdk-key").StartWaitTime(TimeSpan.Zero).Build();
                 var client = new LDClient(config);
            
                 // later, possibly on another thread:
                 var inited = client.DataSourceStatusProvider.WaitFor(DataSourceState.Valid,
                     TimeSpan.FromSeconds(10));
                 if (!inited) {
                     // do whatever is appropriate if initialization has timed out
                 }       
             </code>
             </remarks>
             <param name="desiredState">the desired connection state (normally this would be
             <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Valid"/>)</param>
             <param name="timeout">the maximum amount of time to wait-- or <see cref="F:System.TimeSpan.Zero"/> to block
             indefinitely</param>
             <returns>true if the connection is now in the desired state; false if it timed out, or if the state
             changed to <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Off"/> and that was not the desired state</returns>
             <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.WaitForAsync(LaunchDarkly.Sdk.Server.Interfaces.DataSourceState,System.TimeSpan)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.WaitForAsync(LaunchDarkly.Sdk.Server.Interfaces.DataSourceState,System.TimeSpan)">
             <summary>
             An asynchronous method for waiting for a desired connection state.
             </summary>
             <remarks>
             <para>
             This method behaves identically to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.WaitFor(LaunchDarkly.Sdk.Server.Interfaces.DataSourceState,System.TimeSpan)"/> except that it is asynchronous. The following
             example is the asynchronous equivalent of the example code shown for <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.WaitFor(LaunchDarkly.Sdk.Server.Interfaces.DataSourceState,System.TimeSpan)"/>:
             </para>
             <code>
                 // create the client but do not wait
                 var config = Configuration.Builder("my-sdk-key").StartWaitTime(TimeSpan.Zero).Build();
                 var client = new LDClient(config);
            
                 // later, possibly on another thread:
                 var inited = await client.DataSourceStatusProvider.WaitFor(DataSourceState.Valid,
                     TimeSpan.FromSeconds(10));
                 if (!inited) {
                     // do whatever is appropriate if initialization has timed out
                 }       
             </code>
             </remarks>
             <param name="desiredState">the desired connection state (normally this would be
             <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Valid"/>)</param>
             <param name="timeout">the maximum amount of time to wait-- or <see cref="F:System.TimeSpan.Zero"/> to block
             indefinitely</param>
             <returns>true if the connection is now in the desired state; false if it timed out, or if the state
             changed to <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Off"/> and that was not the desired state</returns>
             <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.WaitFor(LaunchDarkly.Sdk.Server.Interfaces.DataSourceState,System.TimeSpan)"/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider">
            <summary>
            An interface for querying the status of a persistent data store.
            </summary>
            <remarks>
            An implementation of this interface is returned by <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DataStoreStatusProvider"/>.
            Application code should not implement this interface.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider.Status">
            <summary>
            The current status of the store.
            </summary>
            <remarks>
            This is only meaningful for persistent stores, or any other <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/>
            implementation that makes use of the reporting mechanism provided by <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStoreUpdates"/>.
            For the default in-memory store, the status will always be reported as "available".
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider.StatusMonitoringEnabled">
            <summary>
            Indicates whether the current data store implementation supports status monitoring.
            </summary>
            <remarks>
            This is normally true for all persistent data stores, and false for the default in-memory store.
            A true value means that any status event listeners can expect to be notified if there is any
            error in storing data, and then notified again when the error condition is resolved. A false
            value means that the status is not meaningful and listeners should not expect to be notified.
            </remarks>
        </member>
        <member name="E:LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider.StatusChanged">
            <summary>
            An event for receiving notifications of status changes.
            </summary>
            <remarks>
            <para>
            Any handlers attached to this event will be notified whenever any property of the status has changed.
            See <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.DataStoreStatus"/>for an explanation of the meaning of each property and what could cause it
            to change.
            </para>
            <para>
            Notifications will be dispatched on a background task. It is the listener's responsibility to return
            as soon as possible so as not to block subsequent notifications.
            </para>
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker">
            <summary>
            An interface for tracking changes in feature flag configurations.
            </summary>
            <remarks>
            An implementation of this interface is returned by <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FlagTracker"/>.
            Application code never needs to implement this interface.
            </remarks>
        </member>
        <member name="E:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.FlagChanged">
            <summary>
            An event for receiving notifications of feature flag changes in general.
            </summary>
            <remarks>
            <para>
            This event is raised whenever the SDK receives any change to any feature flag's
            configuration, or to a segment that is referenced by a feature flag. If the
            updated flag is used as a prerequisite for other flags, the SDK assumes that those
            flags may now behave differently and sends flag change events for them as well.
            </para>
            <para>
            Note that this does not necessarily mean the flag's value has changed for any
            particular evaluation context, only that some part of the flag configuration was
            changed so that it <i>may</i> return a different value than it previously returned
            for some context. If you want to track flag value changes, use
            <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.FlagValueChangeHandler(System.String,LaunchDarkly.Sdk.Context,System.EventHandler{LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent})"/>.
            </para>
            <para>
            Change events only work if the SDK is actually connecting to LaunchDarkly (or
            using the file data source). If the SDK is only reading flags from a database
            (<see cref="P:LaunchDarkly.Sdk.Server.Components.ExternalUpdatesOnly"/>) then it cannot know when there is a
            change, because flags are read on an as-needed basis.
            </para>
            <para>
            Notifications will be dispatched on a background task. It is the listener's
            responsibility to return as soon as possible so as not to block subsequent
            notifications.
            </para>
            </remarks>
            <example>
                client.FlagTracker.FlagChanged += (sender, eventArgs) =>
                    {
                        System.Console.WriteLine("a flag has changed: " + eventArgs.Key);
                    };
            </example>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.FlagValueChangeHandler(System.String,LaunchDarkly.Sdk.Context,System.EventHandler{LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent})">
            <summary>
            Creates a handler for receiving notifications when a specific feature flag's value
            has changed for a specific evaluation context.
            </summary>
            <remarks>
            <para>
            When you call this method, it first immediately evaluates the feature flag. It then
            returns a new event handler which you can add to the <see cref="E:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.FlagChanged"/> event.
            Whenever the specified feature flag changes, it re-evaluates the flag for the same
            user, and calls your <paramref name="handler"/> if and only if the resulting value has
            changed. In other words, this method filters the more general <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.FlagChangeEvent"/>
            events to produce more specific <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent"/> events.
            </para>
            <para>
            All feature flag evaluations require an instance of <see cref="T:LaunchDarkly.Sdk.Context"/>. If the
            feature flag you are tracking does not have any targeting rules, you must still
            pass a dummy context such as <c>Context.New("for-global-flags")</c>. If you do not
            want the user to appear on your dashboard, use the <c>Anonymous</c> property:
            <c>Context.Builder("for-global-flags").Anonymous(true).Build()</c>.
            </para>
            </remarks>
            <example>
            <code>
                var flagKey = "my-important-flag";
                var contextForFlagEvaluation = Context.New("context-for-evaluation");
                var listenForNewValue = client.FlagTracker.FlagValueChangeHandler(
                    flagKey,
                    contextForFlagEvaluation,
                    (sender, changeArgs) =>
                        {
                            System.Console.WriteLine("flag '" + changeArgs.Key
                                + "' changed for " + contextForFlagEvaluation.Key
                                + " from " + changeArgs.OldValue
                                + " to " + changeArgs.NewValue);
                        });
                client.FlagTracker.FlagChanged += listenForNewValue;
            </code>
            </example>
            <param name="flagKey">the flag key to be evaluated</param>
            <param name="context">the evaluation context</param>
            <param name="handler">a handler that will receive a <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent"/>
            </param>
            <returns>a handler to be added to <see cref="E:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.FlagChanged"/></returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.IFlagTrackerExtensionMethods">
            <summary>
            Extension methods allowing <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker"/> to be used with the older
            <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.IFlagTrackerExtensionMethods.FlagValueChangeHandler(LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker,System.String,LaunchDarkly.Sdk.User,System.EventHandler{LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent})">
            <summary>
            Creates a handler for receiving notifications when a specific feature flag's value
            has changed for a specific user.
            </summary>
            <remarks>
            This is equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.FlagValueChangeHandler(System.String,LaunchDarkly.Sdk.Context,System.EventHandler{LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent})"/>,
            but using the <see cref="T:LaunchDarkly.Sdk.User"/> type instead of <see cref="T:LaunchDarkly.Sdk.Context"/>/.
            </remarks>
            <param name="flagTracker">the <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker"/></param>
            <param name="flagKey">the flag key to be evaluated</param>
            <param name="user">the user attributes</param>
            <param name="handler">a handler that will receive a <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent"/>
            </param>
            <returns>a handler to be added to <see cref="E:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.FlagChanged"/></returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.FlagChangeEvent">
            <summary>
            A parameter class used with <see cref="E:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.FlagChanged"/>.
            </summary>
            <remarks>
            This is not an analytics event to be sent to LaunchDarkly; it is a notification to the
            application.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.FlagChangeEvent.Key">
            <summary>
            The key of the feature flag whose configuration has changed.
            </summary>
            <remarks>
            The specified flag may have been modified directly, or this may be an indirect
            change due to a change in some other flag that is a prerequisite for this flag, or
            a user segment that is referenced in the flag's rules.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.FlagChangeEvent.#ctor(System.String)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="key">the key of the feature flag whose configuration has changed</param>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent">
            <summary>
            A parameter class used with <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.FlagValueChangeHandler(System.String,LaunchDarkly.Sdk.Context,System.EventHandler{LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent})"/>.
            </summary>
            <remarks>
            This is not an analytics event to be sent to LaunchDarkly; it is a notification to the
            application.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent.Key">
            <summary>
            The key of the feature flag whose configuration has changed.
            </summary>
            <remarks>
            The specified flag may have been modified directly, or this may be an indirect
            change due to a change in some other flag that is a prerequisite for this flag, or
            a user segment that is referenced in the flag's rules.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent.OldValue">
            <summary>
            The last known value of the flag for the specified user prior to the update.
            </summary>
            <remarks>
            <para>
            Since flag values can be of any JSON data type, this is represented as
            <see cref="T:LaunchDarkly.Sdk.LdValue"/>. That class has properties for converting to other .NET types,
            such as <see cref="P:LaunchDarkly.Sdk.LdValue.AsBool"/>.
            </para>
            <para>
            If the flag was deleted or could not be evaluated, this will be <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/>.
            there is no application default value parameter as there is for the <c>Variation</c>
            methods; it is up to your code to substitute whatever fallback value is appropriate.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent.NewValue">
            <summary>
            The new value of the flag for the specified user.
            </summary>
            <remarks>
            <para>
            Since flag values can be of any JSON data type, this is represented as
            <see cref="T:LaunchDarkly.Sdk.LdValue"/>. That class has properties for converting to other .NET types,
            such as <see cref="P:LaunchDarkly.Sdk.LdValue.AsBool"/>.
            </para>
            <para>
            If the flag was deleted or could not be evaluated, this will be <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/>.
            there is no application default value parameter as there is for the <c>Variation</c>
            methods; it is up to your code to substitute whatever fallback value is appropriate.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent.#ctor(System.String,LaunchDarkly.Sdk.LdValue,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="key">the key of the feature flag whose configuration has changed</param>
            <param name="oldValue">he last known value of the flag for the specified user prior to
            the update</param>
            <param name="newValue">he new value of the flag for the specified user</param>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.ILdClient">
            <summary>
            Interface defining the public methods of <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/>.
            </summary>
            <remarks>
            See also <see cref="T:LaunchDarkly.Sdk.Server.ILdClientExtensions"/>, which provides convenience methods that build upon
            this interface. In particular, for every <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.ILdClient"/> method that takes a
            <see cref="T:LaunchDarkly.Sdk.Context"/> parameter, there is an extension method that allows you to pass the
            older <see cref="T:LaunchDarkly.Sdk.User"/> type instead.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BigSegmentStoreStatusProvider">
            <summary>
            A mechanism for tracking the status of a Big Segment store.
            </summary>
            <remarks>
            The returned object has methods for checking whether the Big Segment store is (as far as the SDK
            knows) currently operational and tracking changes in this status. See
            <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.IBigSegmentStoreStatusProvider"/> for more about this functionality.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DataSourceStatusProvider">
            <summary>
            A mechanism for tracking the status of the data source.
            </summary>
            <remarks>
            The data source is the mechanism that the SDK uses to get feature flag configurations, such as a
            streaming connection (the default) or poll requests. The <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider"/>
            has methods for checking whether the data source is (as far as the SDK knows) currently operational,
            and tracking changes in this status. This property will never be null.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DataStoreStatusProvider">
            <summary>
            A mechanism for tracking the status of a persistent data store.
            </summary>
            <remarks>
            The <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider"/> has methods for checking whether the data store is (as
            far as the SDK knows) currently operational and tracking changes in this status. These are only
            relevant for a persistent data store; if you are using an in-memory data store, then this property
            is a stub object that always reports the store as operational.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FlagTracker">
            <summary>
            A mechanism for tracking changes in feature flag configurations.
            </summary>
            <remarks>
            The <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker"/> contains methods for requesting notifications about feature flag
            changes using an event listener model.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Initialized">
            <summary>
            Tests whether the client is ready to be used.
            </summary>
            <value>true if the client is ready, or false if it is still initializing</value>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariation(System.String,LaunchDarkly.Sdk.Context,System.Boolean)">
            <summary>
            Calculates the boolean value of a feature flag for a given context.
            </summary>
            <remarks>
            <para>
            If the flag variation does not have a boolean value, <c>defaultValue</c> is returned.
            </para>
            <para>
            If an error makes it impossible to evaluate the flag (for instance, the feature flag key
            does not match any existing flag), <c>defaultValue</c> is returned.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Boolean)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.BoolVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Boolean)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Boolean)">
            <summary>
            Calculates the boolean value of a feature flag for a given context, and returns an object that
            describes the way the value was determined.
            </summary>
            <remarks>
            <para>
            The <see cref="P:LaunchDarkly.Sdk.EvaluationDetail`1.Reason"/> property in the result will also be included
            in analytics events, if you are capturing detailed event data for this flag.
            </para>
            <para>
            The behavior is otherwise identical to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariation(System.String,LaunchDarkly.Sdk.Context,System.Boolean)"/>.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariation(System.String,LaunchDarkly.Sdk.Context,System.Boolean)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.BoolVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Boolean)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.IntVariation(System.String,LaunchDarkly.Sdk.Context,System.Int32)">
            <summary>
            Calculates the integer value of a feature flag for a given context.
            </summary>
            <remarks>
            <para>
            If the flag variation has a numeric value that is not an integer, it is rounded to the
            nearest integer. This rounding behavior may be changed in a future version of the SDK (for
            instance, to round toward zero like the usual float-to-int conversion in C#), so you should
            avoid relying on it.
            </para>
            <para>
            If the flag variation does not have a numeric value, <c>defaultValue</c> is returned.
            </para>
            <para>
            If an error makes it impossible to evaluate the flag (for instance, the feature flag key
            does not match any existing flag), <c>defaultValue</c> is returned.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.IntVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Int32)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.IntVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Int32)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.IntVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Int32)">
            <summary>
            Calculates the integer value of a feature flag for a given context, and returns an object that
            describes the way the value was determined.
            </summary>
            <remarks>
            <para>
            The <see cref="P:LaunchDarkly.Sdk.EvaluationDetail`1.Reason"/> property in the result will also be included
            in analytics events, if you are capturing detailed event data for this flag.
            </para>
            <para>
            The behavior is otherwise identical to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.IntVariation(System.String,LaunchDarkly.Sdk.Context,System.Int32)"/>.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.IntVariation(System.String,LaunchDarkly.Sdk.Context,System.Int32)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.IntVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Int32)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariation(System.String,LaunchDarkly.Sdk.Context,System.Single)">
            <summary>
            Calculates the single-precision floating-point numeric value of a feature flag for a
            given context.
            </summary>
            <remarks>
            <para>
            If the flag variation does not have a numeric value, <c>defaultValue</c> is returned.
            </para>
            <para>
            If an error makes it impossible to evaluate the flag (for instance, the feature flag key
            does not match any existing flag), <c>defaultValue</c> is returned.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Single)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariation(System.String,LaunchDarkly.Sdk.Context,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.FloatVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Single)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Single)">
            <summary>
            Calculates the single-precision floating-point numeric value of a feature flag for a
            given context, and returns an object that describes the way the value was determined.
            </summary>
            <remarks>
            <para>
            The <see cref="P:LaunchDarkly.Sdk.EvaluationDetail`1.Reason"/> property in the result will also be included
            in analytics events, if you are capturing detailed event data for this flag.
            </para>
            <para>
            The behavior is otherwise identical to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariation(System.String,LaunchDarkly.Sdk.Context,System.Single)"/>.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariation(System.String,LaunchDarkly.Sdk.Context,System.Single)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.FloatVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Single)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariation(System.String,LaunchDarkly.Sdk.Context,System.Double)">
            <summary>
            Calculates the double-precision floating-point numeric value of a feature flag for a
            given context.
            </summary>
            <remarks>
            <para>
            If the flag variation does not have a numeric value, <c>defaultValue</c> is returned.
            </para>
            <para>
            If an error makes it impossible to evaluate the flag (for instance, the feature flag key
            does not match any existing flag), <c>defaultValue</c> is returned.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariation(System.String,LaunchDarkly.Sdk.Context,System.Single)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.DoubleVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Double)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Double)">
            <summary>
            Calculates the double-precision floating-point numeric value of a feature flag for a
            given context, and returns an object that describes the way the value was determined.
            </summary>
            <remarks>
            <para>
            The <see cref="P:LaunchDarkly.Sdk.EvaluationDetail`1.Reason"/> property in the result will also be included
            in analytics events, if you are capturing detailed event data for this flag.
            </para>
            <para>
            The behavior is otherwise identical to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariation(System.String,LaunchDarkly.Sdk.Context,System.Double)"/>.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.DoubleVariation(System.String,LaunchDarkly.Sdk.Context,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FloatVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Single)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.DoubleVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.Double)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariation(System.String,LaunchDarkly.Sdk.Context,System.String)">
            <summary>
            Calculates the string value of a feature flag for a given context.
            </summary>
            <remarks>
            <para>
            If the flag variation does not have a string value, <c>defaultValue</c> is returned.
            </para>
            <para>
            Normally, the string value of a flag should not be null, since the LaunchDarkly UI
            does not allow you to assign a null value to a flag variation. However, since it may be
            possible to create a feature flag with a null variation by other means, and also since
            <c>defaultValue</c> is nullable, you should assume that the return value might be null.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.StringVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.String)">
            <summary>
            Calculates the string value of a feature flag for a given context, and returns an object that
            describes the way the value was determined.
            </summary>
            <remarks>
            <para>
            The <see cref="P:LaunchDarkly.Sdk.EvaluationDetail`1.Reason"/> property in the result will also be included
            in analytics events, if you are capturing detailed event data for this flag.
            </para>
            <para>
            The behavior is otherwise identical to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariation(System.String,LaunchDarkly.Sdk.Context,System.String)"/>.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.StringVariation(System.String,LaunchDarkly.Sdk.Context,System.String)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.StringVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.JsonVariation(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Calculates the value of a feature flag for a given context as any JSON value type.
            </summary>
            <remarks>
            <para>
            The type <see cref="T:LaunchDarkly.Sdk.LdValue"/> is used to represent any of the value types that can
            exist in JSON. Use <see cref="T:LaunchDarkly.Sdk.LdValue"/> methods to examine its type and value.
            </para>
            <para>
            If an error makes it impossible to evaluate the flag (for instance, the feature flag key
            does not match any existing flag), <c>defaultValue</c> is returned.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>the variation for the given context, or <c>defaultValue</c> if the flag cannot
            be evaluated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.JsonVariationDetail(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.JsonVariation(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.JsonVariationDetail(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Calculates the value of a feature flag for a given context as any JSON value type, and
            returns an object that describes the way the value was determined.
            </summary>
            <remarks>
            <para>
            The <see cref="P:LaunchDarkly.Sdk.EvaluationDetail`1.Reason"/> property in the result will also be included
            in analytics events, if you are capturing detailed event data for this flag.
            </para>
            <para>
            The behavior is otherwise identical to <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.JsonVariationDetail(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>.
            </para>
            </remarks>
            <param name="key">the unique feature key for the feature flag</param>
            <param name="context">the evaluation context</param>
            <param name="defaultValue">the default value of the flag</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.EvaluationDetail`1"/> object</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.JsonVariation(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.JsonVariationDetail(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Identify(LaunchDarkly.Sdk.Context)">
            <summary>
            Reports details about an evaluation context.
            </summary>
            <remarks>
            <para>
            This method simply creates an analytics event containing the context attributes, to
            that LaunchDarkly will know about that context if it does not already.
            </para>
            <para>
            Calling any evaluation method, such as <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.BoolVariation(System.String,LaunchDarkly.Sdk.Context,System.Boolean)"/>,
            also sends the context information to LaunchDarkly (if events are enabled), so you only
            need to use <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Identify(LaunchDarkly.Sdk.Context)"/> if you want to identify the context without
            evaluating a flag.
            </para>
            <para>
            Note that event delivery is asynchronous, so the event may not actually be sent until
            later; see <see cref="M:LaunchDarkly.Sdk.Server.LdClient.Flush"/>.
            </para>
            <para>
            For more information, see the
            <a href="https://docs.launchdarkly.com/sdk/features/identify#dotnet">Reference Guide</a>.
            </para>
            </remarks>
            <param name="context">the evaluation context</param>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Identify(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,LaunchDarkly.Sdk.User)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context)">
            <summary>
            Tracks that an application-defined event occurred.
            </summary>
            <remarks>
            <para>
            This method creates a "custom" analytics event containing the specified event name (key)
            and context attributes. You may attach arbitrary data to the event by calling
            <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/> instead.
            </para>
            <para>
            Note that event delivery is asynchronous, so the event may not actually be sent until
            later; see <see cref="M:LaunchDarkly.Sdk.Server.LdClient.Flush"/>.
            </para>
            </remarks>
            <param name="name">the name of the event</param>
            <param name="context">the evaluation context associated with the event</param>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)">
            <summary>
            Tracks that an application-defined event occurred.
            </summary>
            <remarks>
            <para>
            This method creates a "custom" analytics event containing the specified event name (key),
            context properties, and optional custom data. If you do not need custom data, pass
            <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> for the last parameter or simply omit the parameter.
            </para>
            <para>
            Note that event delivery is asynchronous, so the event may not actually be sent until
            later; see <see cref="M:LaunchDarkly.Sdk.Server.LdClient.Flush"/>.
            </para>
            </remarks>
            <param name="name">the name of the event</param>
            <param name="context">the evaluation context associated with the event</param>
            <param name="data">additional data associated with the event, if any</param>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue,System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue,System.Double)">
            <summary>
            Tracks that an application-defined event occurred, and provides an additional numeric value for
            custom metrics.
            </summary>
            <remarks>
            <para>
            This value is used by the LaunchDarkly experimentation feature in numeric custom metrics,
            and will also be returned as part of the custom event for Data Export.
            </para>
            <para>
            Note that event delivery is asynchronous, so the event may not actually be sent until
            later; see <see cref="M:LaunchDarkly.Sdk.Server.LdClient.Flush"/>.
            </para>
            </remarks>
            <param name="name">the name of the event</param>
            <param name="context">the evaluation context associated with the event</param>
            <param name="data">additional data associated with the event; use <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/> if
            not applicable</param>
            <param name="metricValue">a numeric value used by the LaunchDarkly experimentation feature in
            numeric custom metrics</param>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.Track(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,System.String,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.LdValue,System.Double)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.AllFlagsState(LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.Server.FlagsStateOption[])">
            <summary>
            Returns an object that encapsulates the state of all feature flags for a given context, which
            can be passed to front-end code.
            </summary>
            <remarks>
            <para>
            The object returned by this method contains the flag values as well as other metadata that
            is used by the LaunchDarkly JavaScript client, so it can be used for
            <see href="https://docs.launchdarkly.com/sdk/features/bootstrapping#javascript">bootstrapping</see>.
            </para>
            <para>
            This method will not send analytics events back to LaunchDarkly.
            </para>
            </remarks>
            <param name="context">the evaluation context</param>
            <param name="options">optional <see cref="T:LaunchDarkly.Sdk.Server.FlagsStateOption"/> values affecting how the state is
            computed-- for instance, to filter the set of flags to only include the client-side-enabled ones</param>
            <returns>a <see cref="T:LaunchDarkly.Sdk.Server.FeatureFlagsState"/> object (will never be null; see
            <seealso cref="P:LaunchDarkly.Sdk.Server.FeatureFlagsState.Valid"/></returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.AllFlagsState(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,LaunchDarkly.Sdk.User,LaunchDarkly.Sdk.Server.FlagsStateOption[])"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.SecureModeHash(LaunchDarkly.Sdk.Context)">
            <summary>
            Creates a hash string that can be used by the JavaScript SDK to identify a context.
            </summary>
            <remarks>
            See <see href="https://docs.launchdarkly.com/sdk/features/secure-mode#configuring-secure-mode-in-the-javascript-client-side-sdk">Secure mode</see> in
            the JavaScript SDK Reference.
            </remarks>
            <param name="context">the evaluation context</param>
            <returns>the hash, or null if the hash could not be calculated</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.ILdClientExtensions.SecureModeHash(LaunchDarkly.Sdk.Server.Interfaces.ILdClient,LaunchDarkly.Sdk.User)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Flush">
            <summary>
            Tells the client that all pending analytics events (if any) should be delivered as soon
            as possible. 
            </summary>
            <remarks>
            <para>
            This flush is asynchronous, so this method will return before it is complete. To wait for
            the flush to complete, use <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FlushAndWait(System.TimeSpan)"/> instead (or, if you are done
            with the SDK, <see cref="M:LaunchDarkly.Sdk.Server.LdClient.Dispose"/>).
            </para>
            <para>
            For more information, see: <a href="https://docs.launchdarkly.com/sdk/features/flush#net-server-side">
            Flushing Events</a>.
            </para>
            </remarks>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FlushAndWait(System.TimeSpan)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FlushAndWait(System.TimeSpan)">
            <summary>
            Tells the client to deliver any pending analytics events synchronously now.
            </summary>
            <remarks>
            <para>
            Unlike <see cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Flush"/>, this method waits for event delivery to finish. The timeout parameter, if
            greater than zero, specifies the maximum amount of time to wait. If the timeout elapses before
            delivery is finished, the method returns early and returns false; in this case, the SDK may still
            continue trying to deliver the events in the background.
            </para>
            <para>
            If the timeout parameter is zero or negative, the method waits as long as necessary to deliver the
            events. However, the SDK does not retry event delivery indefinitely; currently, any network error
            or server error will cause the SDK to wait one second and retry one time, after which the events
            will be discarded so that the SDK will not keep consuming more memory for events indefinitely.
            </para>
            <para>
            The method returns true if event delivery either succeeded, or definitively failed, before the
            timeout elapsed. It returns false if the timeout elapsed.
            </para>
            <para>
            This method is also implicitly called if you call <see cref="M:LaunchDarkly.Sdk.Server.LdClient.Dispose"/>. The difference is
            that FlushAndWait does not shut down the SDK client.
            </para>
            <para>
            For more information, see: <a href="https://docs.launchdarkly.com/sdk/features/flush#net-server-side">
            Flushing Events</a>.
            </para>
            </remarks>
            <param name="timeout">the maximum time to wait</param>
            <returns>true if completed, false if timed out</returns>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Flush"/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Interfaces.ServiceEndpoints">
            <summary>
            Specifies the base service URIs used by SDK components.
            </summary>
            <remarks>
            This class's properties are not public, since they are only read by the SDK.
            </remarks>
            <seealso cref="T:LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.BigSegments.BigSegmentStoreWrapper.GetMembership(System.String)">
            <summary>
            Called by the evaluator when it needs to get the Big Segment membership state for
            a context.
            </summary>
            <remarks>
            If there is a cached membership state for the context, it returns the cached state. Otherwise,
            it converts the user key into the hash string used by the BigSegmentStore, queries the store,
            and caches the result. The returned status value indicates whether the query succeeded, and
            whether the result (regardless of whether it was from a new query or the cache) should be
            considered "stale".
            </remarks>
            <param name="contextKey">the (unhashed) context key</param>
            <returns>the query result</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.BigSegments.BigSegmentStoreWrapper.GetStatus">
            <summary>
            Returns a BigSegmentStoreStatus describing whether the store seems to be available
            (that is, the last query to it did not return an error) and whether it is stale (that is, the last
            known update time is too far in the past).
            </summary>
            <remarks>
            If we have not yet obtained that information (the poll task has not executed yet), then this method
            immediately does a metadata query and waits for it to succeed or fail. This means that if an
            application using Big Segments evaluates a feature flag immediately after creating the SDK
            client, before the first status poll has happened, that evaluation may block for however long it
            takes to query the store.
            </remarks>
            <returns>the store status</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Internal.ComponentsImpl">
            <summary>
            This file contains the internal implementations of all non-configurable component factories whose
            public factory methods are in <see cref="T:LaunchDarkly.Sdk.Server.Components"/>.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Internal.DataSources.DataSourceUpdatesImpl">
            <summary>
            The data source will push updates into this component. We then apply any necessary
            transformations before putting them into the data store; currently that just means sorting
            the data set for Init().
            </summary>
            <remarks>
            This component is also responsible for receiving updates to the data source status, broadcasting
            them to any status listeners, and tracking the length of any period of sustained failure.
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Internal.DataSources.FileWatchingReloader">
            <summary>
            Implementation of file monitoring using FileSystemWatcher.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig">
            <summary>
            Internal abstraction of caching parameters used by <see cref="T:LaunchDarkly.Sdk.Server.Internal.DataStores.PersistentStoreWrapper"/>.
            </summary>
            <remarks>
            <para>
            Application code cannot see this class and instead uses the configuration methods on
            <see cref="T:LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder"/>.
            </para>
            </remarks>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.DefaultTtl">
            <summary>
            The default cache expiration time.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.Ttl">
            <summary>
            The cache expiration time. Caching is enabled if this is greater than zero.
            </summary>
            <remarks>
            If the value is negative (such as <see cref="F:System.Threading.Timeout.InfiniteTimeSpan"/>), data is cached
            forever (i.e. it will only be read again from the database if the SDK is restarted).
            </remarks>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.WithTtl(System.TimeSpan)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.WithTtlMillis(System.Double)"/>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.WithTtlSeconds(System.Double)"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.IsEnabled">
            <summary>
            True if caching is enabled.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.IsInfiniteTtl">
            <summary>
            True if caching is enabled and does not have a finite TTL.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.MaximumEntries">
            <summary>
            The maximum number of entries that can be held in the cache at a time.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.Disabled">
            <summary>
            Returns a parameter object indicating that caching should be disabled.
            </summary>
        </member>
        <member name="F:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.Enabled">
            <summary>
            Returns a parameter object indicating that caching should be enabled, using the
            default TTL of <see cref="F:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.DefaultTtl"/>.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.WithTtl(System.TimeSpan)">
            <summary>
            Specifies the cache TTL. Items will expire from the cache after this amount of time from the
            time when they were originally cached.
            </summary>
            <param name="ttl">the cache TTL; must be greater than zero</param>
            <returns>an updated parameters object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.WithTtlMillis(System.Double)">
            <summary>
            Shortcut for calling <see cref="M:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.WithTtl(System.TimeSpan)"/> with a TimeSpan in milliseconds.
            </summary>
            <param name="millis">the cache TTL in milliseconds</param>
            <returns>an updated parameters object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.WithTtlSeconds(System.Double)">
            <summary>
            Shortcut for calling <see cref="M:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.WithTtl(System.TimeSpan)"/> with a TimeSpan in seconds.
            </summary>
            <param name="seconds">the cache TTL in seconds</param>
            <returns>an updated parameters object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreCacheConfig.WithMaximumEntries(System.Nullable{System.Int32})">
            <summary>
            Specifies the maximum number of entries that can be held in the cache at a time.
            If this limit is exceeded, older entries will be evicted from the cache to make room
            for new ones.
            
            If this is null, there is no limit on the number of entries.
            </summary>
            <param name="maximumEntries">the maximum number of entries, or null for no limit</param>
            <returns>an updated parameters object</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Internal.DataStores.DataStoreSorter">
            <summary>
            Uses a dependency graph to determine the preferred ordering for feature flag updates.
            </summary>
            <remarks>
            <para>
            Some persistent data store implementations may not support atomic updates. In that case,
            it is desirable to add or update items in an order that will minimize the chance of an
            invalid intermediate state of the overall data set: for instance, if flag A has flag B
            as a prerequisite, then B should be added/updated before A.
            </para>
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Internal.DataStores.InMemoryDataStore">
            <summary>
            In-memory, thread-safe implementation of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/>.
            </summary>
            <remarks>
            Application code cannot see this implementation class and uses
            <see cref="P:LaunchDarkly.Sdk.Server.Components.InMemoryDataStore"/> instead.
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Internal.DataStores.PersistentDataStoreStatusManager">
            <summary>
            Used internally to encapsulate the data store status broadcasting mechanism
            for PersistentDataStoreWrapper.
            </summary>
            <remarks>
            This is currently only used by PersistentDataStoreWrapper, but encapsulating it
            in its own class helps with clarity and also lets us reuse this logic in tests.
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Internal.DataStores.PersistentStoreAsyncAdapter">
            <summary>
            Used internally by PersistentStoreWrapper to call asynchronous IPersistentDataStoreAsync
            methods from synchronous code. In the future, if the SDK internals are rewritten to
            use async/await, we may reverse this and instead put an adapter around synchronous
            methods.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Internal.DataStores.PersistentStoreWrapper">
            <summary>
            The SDK's internal implementation <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/> for persistent data stores.
            </summary>
            <remarks>
            <para>
            The basic data store behavior is provided by some implementation of
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/> or <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync"/>. This
            class adds the caching behavior that we normally want for any persistent data store.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.Evaluation.Evaluator.#ctor(System.Func{System.String,LaunchDarkly.Sdk.Server.Internal.Model.FeatureFlag},System.Func{System.String,LaunchDarkly.Sdk.Server.Internal.Model.Segment},System.Func{System.String,LaunchDarkly.Sdk.Server.Internal.BigSegments.BigSegmentsInternalTypes.BigSegmentsQueryResult},LaunchDarkly.Logging.Logger)">
            <summary>
            Constructs a new Evaluator.
            </summary>
            <param name="featureFlagGetter">a function that returns the stored FeatureFlag for a given key, or null if not found</param>
            <param name="segmentGetter">a function that returns the stored Segment for a given key, or null if not found </param>
            <param name="bigSegmentsGetter">a function that queries the Big Segments state for a user key, or null if not available</param>
            <param name="logger">log messages will be sent here</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.Evaluation.Evaluator.Evaluate(LaunchDarkly.Sdk.Server.Internal.Model.FeatureFlag@,LaunchDarkly.Sdk.Context@)">
            <summary>
            Evaluates a feature flag for a given user.
            </summary>
            <param name="flag">the flag; must not be null</param>
            <param name="context">the evaluation context</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.Server.Internal.Evaluation.EvaluatorTypes.EvalResult"/> containing the evaluation result as well as any events that were produced;
            the PrerequisiteEvents list will always be non-null</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.LRUCacheSet`1.Add(`0)">
            <summary>
            Adds a value to the set and returns true if it was already there.
            </summary>
            <param name="value">a value</param>
            <returns>true if it was already in the set</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.LRUCacheSet`1.Clear">
            <summary>
            Removes all values.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.Model.SemanticVersion.Parse(System.String,System.Boolean)">
            <summary>
            Attempts to parse a string as a semantic version according to the Semver 2.0.0 specification, except that
            the minor and patch versions may optionally be omitted.
            </summary>
            <param name="s">the input string</param>
            <param name="allowMissingMinorAndPatch">true if the parser should tolerate the absence of a minor and/or
            patch version; if absent, they will be treated as zero</param>
            <returns></returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Internal.Model.SemanticVersion.ComparePrecedence(LaunchDarkly.Sdk.Server.Internal.Model.SemanticVersion)">
            <summary>
            Compares this object with another SemanticVersion according to Semver 2.0.0 precedence rules.
            </summary>
            <param name="other">another SemanticVersion</param>
            <returns>0 if equal, -1 if the current object has lower precedence, or 1 if the current object has higher precedence</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.LdClient">
            <summary>
            A client for the LaunchDarkly API. Client instances are thread-safe. Applications should instantiate
            a single <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/> for the lifetime of their application.
            </summary>
            <remarks>
            See also <see cref="T:LaunchDarkly.Sdk.Server.ILdClientExtensions"/>, which provides convenience methods that build upon
            this API. In particular, for every <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/> method that takes a
            <see cref="T:LaunchDarkly.Sdk.Context"/> parameter, there is an extension method that allows you to pass the
            older <see cref="T:LaunchDarkly.Sdk.User"/> type instead.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.LdClient.BigSegmentStoreStatusProvider">
            <inheritdoc/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.LdClient.DataSourceStatusProvider">
            <inheritdoc/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.LdClient.DataStoreStatusProvider">
            <inheritdoc/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.LdClient.FlagTracker">
            <inheritdoc/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.LdClient.Initialized">
            <inheritdoc/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.LdClient.Version">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.#ctor(LaunchDarkly.Sdk.Server.Configuration)">
            <summary>
            Creates a new client to connect to LaunchDarkly with a custom configuration.
            </summary>
            <remarks>
            <para>
            Applications should instantiate a single instance for the lifetime of the application. In
            unusual cases where an application needs to evaluate feature flags from different LaunchDarkly
            projects or environments, you may create multiple clients, but they should still be retained
            for the lifetime of the application rather than created per request or per thread.
            </para>
            <para>
            Normally, the client will begin attempting to connect to LaunchDarkly as soon as you call the
            constructor. The constructor returns as soon as any of the following things has happened:
            </para>
            <list type="number">
            <item><description> It has successfully connected to LaunchDarkly and received feature flag data. In this
            case, <see cref="P:LaunchDarkly.Sdk.Server.LdClient.Initialized"/> will be true, and the <see cref="P:LaunchDarkly.Sdk.Server.LdClient.DataSourceStatusProvider"/>
            will return a state of <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Valid"/>. </description></item>
            <item><description> It has not succeeded in connecting within the <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.StartWaitTime(System.TimeSpan)"/>
            timeout (the default for this is 5 seconds). This could happen due to a network problem or a
            temporary service outage. In this case, <see cref="P:LaunchDarkly.Sdk.Server.LdClient.Initialized"/> will be false, and the
            <see cref="P:LaunchDarkly.Sdk.Server.LdClient.DataSourceStatusProvider"/> will return a state of <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Initializing"/>,
            indicating that the SDK will still continue trying to connect in the background. </description></item>
            <item><description> It has encountered an unrecoverable error: for instance, LaunchDarkly has rejected the
            SDK key. Since an invalid key will not become valid, the SDK will not retry in this case.
            <see cref="P:LaunchDarkly.Sdk.Server.LdClient.Initialized"/> will be false, and the <see cref="P:LaunchDarkly.Sdk.Server.LdClient.DataSourceStatusProvider"/> will
            return a state of <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Off"/>. </description></item>
            </list>
            <para>
            If you have specified <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.Offline(System.Boolean)"/> mode or
            <see cref="P:LaunchDarkly.Sdk.Server.Components.ExternalUpdatesOnly"/>, the constructor returns immediately without
            trying to connect to LaunchDarkly.
            </para>
            <para>
            Failure to connect to LaunchDarkly will never cause the constructor to throw an exception.
            Under any circumstance where it is not able to get feature flag data from LaunchDarkly (and
            therefore <see cref="P:LaunchDarkly.Sdk.Server.LdClient.Initialized"/> is false), if it does not have any other source of data
            (such as a persistent data store) then feature flag evaluations will behave the same as if
            the flags were not found: that is, they will return whatever default value is specified in
            your code.
            </para>
            </remarks>
            <param name="config">a client configuration object (which includes an SDK key)</param>
            <example>
            <code>
                var config = Configuration.Builder("my-sdk-key")
                    .AllAttributesPrivate(true)
                    .EventCapacity(1000)
                    .Build();
                var client = new LDClient(config);
            </code>
            </example>
            <seealso cref="M:LaunchDarkly.Sdk.Server.LdClient.#ctor(System.String)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.#ctor(System.String)">
            <summary>
            Creates a new client instance that connects to LaunchDarkly with the default configuration.
            </summary>
            <remarks>
            <para>
            If you need to specify any custom SDK options, use <see cref="M:LaunchDarkly.Sdk.Server.LdClient.#ctor(LaunchDarkly.Sdk.Server.Configuration)"/>
            instead.
            </para>
            <para>
            Applications should instantiate a single instance for the lifetime of the application. In
            unusual cases where an application needs to evaluate feature flags from different LaunchDarkly
            projects or environments, you may create multiple clients, but they should still be retained
            for the lifetime of the application rather than created per request or per thread.
            </para>
            <para>
            The constructor will never throw an exception, even if initialization fails. For more details
            about initialization behavior and how to detect error conditions, see
            <see cref="M:LaunchDarkly.Sdk.Server.LdClient.#ctor(LaunchDarkly.Sdk.Server.Configuration)"/>.
            </para>
            </remarks>
            <param name="sdkKey">the SDK key for your LaunchDarkly environment</param>
            <seealso cref="M:LaunchDarkly.Sdk.Server.LdClient.#ctor(LaunchDarkly.Sdk.Server.Configuration)"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.IsOffline">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.BoolVariation(System.String,LaunchDarkly.Sdk.Context,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.IntVariation(System.String,LaunchDarkly.Sdk.Context,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.FloatVariation(System.String,LaunchDarkly.Sdk.Context,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.DoubleVariation(System.String,LaunchDarkly.Sdk.Context,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.StringVariation(System.String,LaunchDarkly.Sdk.Context,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.JsonVariation(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.BoolVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.IntVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.FloatVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.DoubleVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.StringVariationDetail(System.String,LaunchDarkly.Sdk.Context,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.JsonVariationDetail(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.AllFlagsState(LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.Server.FlagsStateOption[])">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.SecureModeHash(LaunchDarkly.Sdk.Context)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.Track(System.String,LaunchDarkly.Sdk.Context)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.Track(System.String,LaunchDarkly.Sdk.Context,LaunchDarkly.Sdk.LdValue,System.Double)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.Identify(LaunchDarkly.Sdk.Context)">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.Dispose">
            <summary>
            Shuts down the client and releases any resources it is using.
            </summary>
            <remarks>
            <para>
            Unless it is offline, the client will attempt to deliver any pending analytics events before
            closing.
            </para>
            <para>
            Any components that were added by specifying a factory object
            (<see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.DataStore(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IDataStore})"/>, etc.)
            will also be disposed of by this method; their lifecycle is the same as the client's.
            </para>
            </remarks>
            <see cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.Flush">
            <inheritdoc/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.LdClient.FlushAndWait(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration">
            <summary>
            Encapsulates the SDK's configuration with regard to Big Segments.
            </summary>
            <remarks>
            <para>
            "Big Segments" are a specific type of segments. For more information, read the LaunchDarkly
            documentation about user segments: https://docs.launchdarkly.com/home/users/segments
            </para>
            <para>
            See <see cref="T:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder"/> for more details on these properties.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration.Store">
            <summary>
            The data store instance that is used for Big Segments data.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration.ContextCacheSize">
            <summary>
            The value set by <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.ContextCacheSize(System.Int32)"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration.ContextCacheTime">
            <summary>
            The value set by <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.ContextCacheTime(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration.StatusPollInterval">
            <summary>
            The value set by <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.StatusPollInterval(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration.StaleAfter">
            <summary>
            The value set by <see cref="M:LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.StaleAfter(System.TimeSpan)"/>.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration.#ctor(LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="store">value for Store</param>
            <param name="contextCacheSize">value for ContextCacheSize</param>
            <param name="contextCacheTime">value for ContextCacheTime</param>
            <param name="statusPollInterval">value for StatusPollInterval</param>
            <param name="staleAfter">value for StaleAfter</param>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes">
            <summary>
            Types that are used by the <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore"/> interface.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership">
            <summary>
            A query interface returned by <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore.GetMembershipAsync(System.String)"/>.
            </summary>
            <remarks>
            <para>
            It is associated with a single context, and provides the ability to check whether that
            context is included in or excluded from any number of Big Segments.
            </para>
            <para>
            This is an immutable snapshot of the state for this context at the time
            <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore.GetMembershipAsync(System.String)"/> was called. Calling
            <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership.CheckMembership(System.String)"/> should not cause the state to be queried again.
            The object should be safe for concurrent access by multiple threads.
            </para>
            </remarks>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.NewMembershipFromSegmentRefs(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership.CheckMembership(System.String)">
            <summary>
            Tests whether the context is explicitly included or explicitly excluded in the
            specified segment, or neither.
            </summary>
            <remarks>
            <para>
            The segment is identified by a <code>segmentRef</code> which is not the same as
            the segment key: it includes the key but also versioning information that the SDK
            will provide. The store implementation should not be concerned with the format of
            this.
            </para>
            <para>
            If the context is explicitly included (regardless of whether the context is also explicitly
            excluded or not-- that is, inclusion takes priority over exclusion), the method returns
            a <see langword="true"/> value.
            </para>
            <para>
            If the context is explicitly excluded, and is not explicitly included, the method returns
            a <see langword="false"/> value.
            </para>
            <para>
            If the context's status in the segment is undefined, the method returns
            <see langword="null"/>.
            </para>
            </remarks>
            <param name="segmentRef">a string representing the segment query</param>
            <returns>true/false membership state, or null if unspecified</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.NewMembershipFromSegmentRefs(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Convenience method for creating an implementation of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership"/>.
            </summary>
            <remarks>
            <para>
            This method is intended to be used by Big Segment store implementations; application code
            does not need to use it.
            </para>
            <para>
            Store implementations are free to implement <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership"/> in any way that they
            find convenient and efficient, depending on what format they obtain values in from the
            database, but this method provides a simple way to do it as long as there are enumerations
            of included and excluded segment references. As described in <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership"/>, a
            <code>segmentRef</code> is not the same as the key property in the segment data model; it
            includes the key but also versioning information that the SDK will provide. The store
            implementation should not be concerned with the format of this.
            </para>
            <para>
            The returned object's <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership.CheckMembership(System.String)"/> method will return
            <see langword="true"/> for any <code>segmentRef</code> that is in the included list,
            <see langword="false"/> for any <code>segmentRef</code> that is in the excluded list and
            not also in the included list (that is, inclusions override exclusions), and
            <see langword="null"/> for all others.
            </para>
            <para>
            The method is optimized to return a singleton empty membership object whenever the
            inclusion and exclusion lists are both empty.
            </para>
            <para>
            The returned object implements <see cref="M:System.Object.Equals(System.Object)"/> in such a way that it
            correctly tests equality when compared to any object returned from this factory method,
            but is always unequal to any other types of objects.
            </para>
            </remarks>
            <param name="includedSegmentRefs">the inclusion list (null is equivalent to an empty
            enumeration)</param>
            <param name="excludedSegmentRefs">the exclusion list (null is equivalent to an empty
            enumeration)</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership"/></returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.StoreMetadata">
            <summary>
            Values returned by <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore.GetMetadataAsync"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.StoreMetadata.LastUpToDate">
            <summary>
            The timestamp of the last update to the BigSegmentStore, if known.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes">
            <summary>
            Types that are used by the <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/> interface.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind">
            <summary>
            Represents a separately namespaced collection of storable data items.
            </summary>
            <remarks>
            <para>
            The SDK passes instances of this type to the data store to specify whether it is
            referring to a feature flag, a user segment, etc. The data store implementation
            should not look for a specific data kind (such as feature flags), but should treat
            all data kinds generically.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind.Name">
            <summary>
            A case-sensitive alphabetic string that uniquely identifies this data kind.
            </summary>
            <remarks>
            This is in effect a namespace for a collection of items of the same kind. Item
            keys must be unique within that namespace. Persistent data store implementations
            could use this string as part of a composite key or table name.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind.Serialize(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor)">
            <summary>
            Returns a serialized representation of an item of this kind.
            </summary>
            <remarks>
            The SDK uses this function to generate the data that is stored by an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/>.
            Store implementations normally do not need to call it, except in a special case described in the
            documentation for <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/> regarding deleted item placeholders.
            </remarks>
            <param name="item">an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor"/></param> describing the object to be serialized
            <returns>the serialized representation</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind.Deserialize(System.String)">
            <summary>
            Creates an item of this kind from its serialized representation.
            </summary>
            <remarks>
            <para>
            The SDK uses this function to translate data that is returned by an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/>.
            Store implementations normally do not need to call it, except in a special case described in the
            documentation for <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/> regarding updates.
            </para>
            <para>
            The returned <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor"/> has two properties: <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor.Item"/>,
            which is the deserialized object <i>or</i> a <see langword="null"/> value for a deleted item
            placeholder, and <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor.Version"/>, which provides the object's version number
            regardless of whether it is deleted or not.
            </para>
            </remarks>
            <param name="serializedData">the serialized representation</param>
            <returns>an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor"/> describing the deserialized object</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind.#ctor(System.String,System.Func{LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor,System.String},System.Func{System.String,LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor})">
            <summary>
            Constructor for use in testing.
            </summary>
            <remarks>
            Application code will not create <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/> instances; the SDK maintains
            its own instances for the storable data types that it uses.
            </remarks>
            <param name="name">value for the <c>Name</c> property</param>
            <param name="serializer">function to convert an item to a serialized string form</param>
            <param name="deserializer">function to convert an item from a serialized string form</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor">
            <summary>
            A versioned item (or placeholder) storeable in an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/>.
            </summary>
            <remarks>
            <para>
            This is used for data stores that directly store objects as-is, as the default
            in-memory store does. Items are typed as <see cref="T:System.Object"/>; the store should
            not know or care what the actual object is.
            </para>
            <para>
            For any given key within a <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/>, there can be either an existing
            item with a version, or a "tombstone" placeholder representing a deleted item (also
            with a version. Deleted item placeholders are used so that if an item is first
            updated with version N and then deleted with version N+1, but the SDK receives those
            changes out of order, version N will not overwrite the deletion.
            </para>
            <para>
            Persistent data stores use <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor"/> instead.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor.Version">
            <summary>
            The version number of this data, provided by the SDK.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor.Item">
            <summary>
            The data item, or null if this is a placeholder for a deleted item.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor.#ctor(System.Int32,System.Object)">
            <summary>
            Constructs an instance.
            </summary>
            <param name="version">the version number</param>
            <param name="item">the data item, or null for a deleted item</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor.Deleted(System.Int32)">
            <summary>
            Shortcut for constructing a deleted item placeholder.
            </summary>
            <param name="version">the version number</param>
            <returns>the item descriptor</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor">
            <summary>
            A versioned item (or placeholder) storeable in an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/>
            or <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync"/>.
            </summary>
            <remarks>
            <para>
            This is equivalent to <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor"/>, but is used for persistent data
            stores. The SDK will convert each data item to and from its serialized string form;
            the persistent data store deals only with the serialized form.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.Version">
            <summary>
            The version number of this data, provided by the SDK.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.Deleted">
            <summary>
            True if this is a placeholder (tombstone) for a deleted item.
            </summary>
            <remarks>
            If this is true, <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.SerializedItem"/> may still contain a string representing the
            deleted item, but the persistent store implementation has the option of not storing it if
            it can represent the placeholder in a more efficient way.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.SerializedItem">
            <summary>
            The data item's serialized representatation.
            </summary>
            <remarks>
            This will never be null; for a deleted item placeholder, it will contain a special value
            that can be stored if necessary (see <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.Deleted"/>).
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.#ctor(System.Int32,System.Boolean,System.String)">
            <summary>
            Constructs an instance.
            </summary>
            <param name="version">the version number</param>
            <param name="deleted">true if this is a deleted item placeholder</param>
            <param name="serializedItem">the serialized data item (will not be null)</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet`1">
            <summary>
            Wrapper for a set of storable items being passed to a data store.
            </summary>
            <remarks>
            Since the generic type signature for the data set is somewhat complicated (it is an
            ordered list of key-value pairs where each key is a <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/>, and
            each value is another ordered list of key-value pairs for the individual data items),
            this type simplifies the declaration of data store methods and makes it easier to
            see what the type represents.
            </remarks>
            <typeparam name="TDescriptor">will be <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor"/> or
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor"/></typeparam>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet`1.Data">
            <summary>
            The wrapped data set; may be empty, but will not be null.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.KeyedItems{`0}}})">
            <summary>
            Constructs an instance of this wrapper type.
            </summary>
            <param name="data">the data set</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet`1.Empty">
            <summary>
            Shortcut for constructing an empty data set.
            </summary>
            <returns>an instance containing no data</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.KeyedItems`1">
            <summary>
            Wrapper for a set of storable items being passed to a data store, within a
            single <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/>.
            </summary>
            <remarks>
            This type exists only to provide a simpler type signature for data store methods, and to
            make it easier to see what the type represents. In particular, unlike an
            <see cref="T:System.Collections.Generic.IDictionary`2"/>, the ordering of items may be significant
            (in the case of updates).
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.KeyedItems`1.Items">
            <summary>
            The wrapped data set; may be empty, but will not be null.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.KeyedItems`1.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,`0}})">
            <summary>
            Constructs an instance of this wrapper type.
            </summary>
            <param name="items">the data set</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.KeyedItems`1.Empty">
            <summary>
            Shortcut for constructing an empty data set.
            </summary>
            <returns>an instance containing no data</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes">
            <summary>
            Parameter types for use by <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor"/> implementations.
            </summary>
            <remarks>
            <para>
            Application code normally does not need to use these types or interact directly with any
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor"/> functionality. They are provided to allow a custom implementation
            or test fixture to be substituted for the SDK's normal analytics event logic.
            </para>
            <para>
            These types deliberately duplicate the corresponding parameter types that are defined in
            <c>LaunchDarkly.InternalSdk</c>. The point of this duplication is to keep all symbols from
            <c>LaunchDarkly.InternalSdk</c> out of the public SDK API so that application code will
            never depend on the implementation details in that assembly, which is versioned separately
            from the SDK and may change in backward-incompatible ways.
            </para>
            </remarks>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent">
            <summary>
            Parameters for <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor.RecordEvaluationEvent(LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent)"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.Timestamp">
            <summary>
            Date/timestamp of the event.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.Context">
            <summary>
            The evaluation context for the event. Some attributes may not be sent
            to LaunchDarkly if they are private.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.FlagKey">
            <summary>
            The unique key of the feature flag involved in the event.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.FlagVersion">
            <summary>
            The version of the flag.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.Variation">
            <summary>
            The variation index for the computed value of the flag.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.Value">
            <summary>
            The computed value of the flag.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.Default">
            <summary>
            The default value of the flag.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.Reason">
            <summary>
            An explanation of how the value was calculated, or null if the reason was not requested.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.PrerequisiteOf">
            <summary>
            The key of the flag that this flag is a prerequisite of, if any.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.TrackEvents">
            <summary>
            True if full-fidelity analytics events should be sent for this flag.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.DebugEventsUntilDate">
            <summary>
            If set, debug events are being generated until this date/time.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.IdentifyEvent">
            <summary>
            Parameters for <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor.RecordIdentifyEvent(LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.IdentifyEvent)"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.IdentifyEvent.Timestamp">
            <summary>
            Date/timestamp of the event.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.IdentifyEvent.Context">
            <summary>
            The evaluation context. Some attributes may not be sent to LaunchDarkly if they are private.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.CustomEvent">
            <summary>
            Parameters for <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor.RecordCustomEvent(LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.CustomEvent)"/>.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.CustomEvent.Timestamp">
            <summary>
            Date/timestamp of the event.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.CustomEvent.Context">
            <summary>
            The evaluation context. Some attributes may not be sent to LaunchDarkly if they are private.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.CustomEvent.EventKey">
            <summary>
            The event key.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.CustomEvent.Data">
            <summary>
            Custom data provided for the event.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.CustomEvent.MetricValue">
            <summary>
            An optional numeric value that can be used in analytics.
            </summary>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration">
            <summary>
            Encapsulates top-level HTTP configuration that applies to all SDK components.
            </summary>
            <remarks>
            Use <see cref="T:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder"/> to construct an instance.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ConnectTimeout">
            <summary>
            The network connection timeout.
            </summary>
            <remarks>
            <para>
            This is the time allowed for the underlying HTTP client to connect to the
            LaunchDarkly server, for any individual network connection.
            </para>
            <para>
            Not all .NET platforms support setting a connection timeout. It is implemented as
            a property of <c>System.Net.Http.SocketsHttpHandler</c> in .NET Core 2.1+ and .NET
            5+, but is unavailable in .NET Framework and .NET Standard. On platforms where it
            is not supported, only <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ResponseStartTimeout"/> will be used.
            </para>
            <para>
            Since this is implemented only in <c>SocketsHttpHandler</c>, if you have
            specified some other HTTP handler implementation with <see cref="T:System.Net.Http.HttpMessageHandler"/>,
            the <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ConnectTimeout"/> here will be ignored.
            </para>
            </remarks>
            <seealso cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ResponseStartTimeout"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.DefaultHeaders">
            <summary>
            HTTP headers to be added to all HTTP requests made by the SDK.
            </summary>
            <remarks>
            These include <c>Authorization</c>, <c>User-Agent</c>, and any headers that were
            specified with <see cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.CustomHeader(System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.MessageHandler">
            <summary>
            A custom handler for HTTP requests, or null to use the platform's default handler.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.Proxy">
            <summary>
            The proxy configuration, if any.
            </summary>
            <remarks>
            This is only present if a proxy was specified programmatically with
            <see cref="M:LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.Proxy(System.Net.IWebProxy)"/>, not if it was
            specified with an environment variable.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ReadTimeout">
            <summary>
            The network read timeout (socket timeout).
            </summary>
            <remarks>
            This is the amount of time without receiving data on a connection that the
            SDK will tolerate before signaling an error. This does <i>not</i> apply to
            the streaming connection used by <see cref="M:LaunchDarkly.Sdk.Server.Components.StreamingDataSource"/>,
            which has its own non-configurable read timeout based on the expected behavior
            of the LaunchDarkly streaming service.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ResponseStartTimeout">
            <summary>
            The maximum amount of time to wait for the beginning of an HTTP response.
            </summary>
            <remarks>
            <para>
            This limits how long the SDK will wait from the time it begins trying to make a
            network connection for an individual HTTP request to the time it starts receiving
            any data from the server. It is equivalent to the <c>Timeout</c> property in
            <c>HttpClient</c>.
            </para>
            <para>
            It is not the same as <see cref="M:LaunchDarkly.Sdk.Server.ConfigurationBuilder.StartWaitTime(System.TimeSpan)"/>,
            which limits the time for initializing the SDK regardless of how many individual HTTP
            requests are done in that time.
            </para>
            </remarks>
            <seealso cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ConnectTimeout"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.HttpProperties">
            <summary>
            Used internally by SDK code that uses the HttpProperties abstraction from LaunchDarkly.InternalSdk.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.#ctor(System.TimeSpan,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.Http.HttpMessageHandler,System.Net.IWebProxy,System.TimeSpan)">
            <summary>
            Constructs an instance, setting all properties.
            </summary>
            <param name="connectTimeout">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ConnectTimeout"/></param>
            <param name="defaultHeaders">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.DefaultHeaders"/></param>
            <param name="messageHandler">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.MessageHandler"/></param>
            <param name="proxy">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.Proxy"/></param>
            <param name="readTimeout">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ReadTimeout"/></param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.#ctor(System.TimeSpan,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Net.Http.HttpMessageHandler,System.Net.IWebProxy,System.TimeSpan,System.TimeSpan)">
            <summary>
            Constructs an instance, setting all properties.
            </summary>
            <param name="connectTimeout">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ConnectTimeout"/></param>
            <param name="defaultHeaders">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.DefaultHeaders"/></param>
            <param name="messageHandler">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.MessageHandler"/></param>
            <param name="proxy">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.Proxy"/></param>
            <param name="readTimeout">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ReadTimeout"/></param>
            <param name="responseStartTimeout">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.ResponseStartTimeout"/></param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.NewHttpClient">
            <summary>
            Helper method for creating an HTTP client instance using the configured properties.
            </summary>
            <returns>a client instance</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore">
            <summary>
            Interface for a read-only data store that allows querying of user membership in Big Segments.
            </summary>
            <remarks>
            <para>
            "Big Segments" are a specific type of user segments. For more information, read the LaunchDarkly
            documentation about user segments: https://docs.launchdarkly.com/home/users/segments
            </para>
            <para>
            All query methods of the store are asynchronous.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore.GetMembershipAsync(System.String)">
            <summary>
            Queries the store for a snapshot of the current segment state for a specific user.
            </summary>
            <remarks>
            <para>
            The userHash is a base64-encoded string produced by hashing the user key as defined by
            the Big Segments specification; the store implementation does not need to know the details
            of how this is done, because it deals only with already-hashed keys, but the string can be
            assumed to only contain characters that are valid in base64.
            </para>
            <para>
            If the store is working, but no membership state is found for this user, the method may
            return either <see langword="null"/> or an empty <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership"/>.
            It should not throw an exception unless there is an unexpected database error or the retrieved
            data is malformed.
            </para>
            </remarks>
            <param name="userHash">the hashed user identifier</param>
            <returns>the user's segment membership state or null</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore.GetMetadataAsync">
            <summary>
            Returns information about the overall state of the store.
            </summary>
            <remarks>
            <para>
            This method will be called only when the SDK needs the latest state, so it should not be cached.
            </para>
            <para>
            If the store is working, but no metadata has been stored in it yet, the method should return
            <see langword="null"/>. It should not throw an exception unless there is an unexpected database
            error or the retrieved data is malformed.
            </para>
            </remarks>
            <returns>the store metadata or null</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer`1">
            <summary>
            The common interface for SDK component factories and configuration builders. Applications should not
            need to implement this interface.
            </summary>
            <typeparam name="T">the type of SDK component or configuration object being constructed</typeparam>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer`1.Build(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <summary>
            Called internally by the SDK to create an implementation instance. Applications should not need
            to call this method.
            </summary>
            <param name="context">provides configuration properties and other components from the current
            SDK client instance</param>
            <returns>a instance of the component type</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSource">
            <summary>
            Interface for an object that receives updates to feature flags, user segments, and anything
            else that might come from LaunchDarkly.
            </summary>
            <remarks>
            This component uses a push model. When it is created, the SDK will provide a reference to an
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates"/> component, which is a write-only abstraction of the data store.
            The SDK never requests feature flag data from the <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSource"/>, it only looks at
            the last known data that was previously put into the store.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDataSource.Start">
            <summary>
            Initializes the data source. This is called once from the <see cref="T:LaunchDarkly.Sdk.Server.LdClient"/> constructor.
            </summary>
            <returns>a <c>Task</c> which is completed once the data source has finished starting up</returns>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.IDataSource.Initialized">
            <summary>
            Checks whether the data source has finished initializing.
            </summary>
            <remarks>
            This is true if it has received at least one full set of feature flag data from LaunchDarkly,
            or if it is never going to do so because we are deliberately offline.
            </remarks>
            <value>true if fully initialized</value>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates">
            <summary>
            Interface that an implementation of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSource"/> will use to push data into the SDK.
            </summary>
            <remarks>
            <para>
            The data source interacts with this object, rather than manipulating the data store directly, so
            that the SDK can perform any other necessary operations that must happen when data is updated. This
            object also provides a mechanism to report status changes.
            </para>
            <para>
            Component factories for <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSource"/> implementations will receive an implementation of this
            interface in the <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.DataSourceUpdates"/> property of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext"/>.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates.DataStoreStatusProvider">
            <summary>
            An object that provides status tracking for the data store, if applicable.
            </summary>
            <remarks>
            This may be useful if the data source needs to be aware of storage problems that might require it
            to take some special action: for instance, if a database outage may have caused some data to be
            lost and therefore the data should be re-requested from LaunchDarkly.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates.Init(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet{LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor})">
            <summary>
            Completely overwrites the current contents of the data store with a set of items for each collection.
            </summary>
            <param name="allData">a list of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/> instances and their
            corresponding data sets</param>
            <returns>true if the update succeeded, false if it failed</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates.Upsert(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,System.String,LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor)">
            <summary>
            Updates or inserts an item in the specified collection. For updates, the object will only be
            updated if the existing version is less than the new version.
            </summary>
            <remarks>
            The <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor"/> may contain a null, to represent a placeholder for a deleted item.
            </remarks>
            <param name="kind">specifies which collection to use</param>
            <param name="key">the unique key for the item within that collection</param>
            <param name="item">the item to insert or update</param>
            <returns>true if the update succeeded, false if it failed</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates.UpdateStatus(LaunchDarkly.Sdk.Server.Interfaces.DataSourceState,System.Nullable{LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo})">
            <summary>
            Informs the SDK of a change in the data source's status.
            </summary>
            <remarks>
            <para>
            Data source implementations should use this method if they have any concept of being in a valid
            state, a temporarily disconnected state, or a permanently stopped state.
            </para>
            <para>
            If <paramref name="newState"/> is different from the previous state, and/or <paramref name="newError"/>
            is non-null, the SDK will start returning the new status(adding a timestamp for the change) from
            <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.Status"/>, and will trigger status change events to any
            registered listeners.
            </para>
            <para>
            A special case is that if <paramref name="newState"/> is <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Interrupted"/>,
            but the previous state was <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Initializing"/>, the state will
            remain at <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Initializing"/> because
            <see cref="F:LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.Interrupted"/> is only meaningful after a successful startup.
            </para>
            </remarks>
            <param name="newState">the data source state</param>
            <param name="newError">information about a new error, if any</param>
            <seealso cref="T:LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider"/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore">
            <summary>
            Interface for a data store that holds feature flags and related data received by the SDK.
            </summary>
            <remarks>
            <para>
            Ordinarily, the only implementation of this interface is the default in-memory
            implementation, which holds references to actual SDK data model objects. Any data store
            implementation that uses an external store, such as a database, should instead use
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/> or <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync"/>.
            </para>
            <para>
            Implementations must be thread-safe.
            </para>
            </remarks>
            <seealso cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/>
            <seealso cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.IDataStore.StatusMonitoringEnabled">
            <summary>
            True if this data store implementation supports status monitoring.
            </summary>
            <remarks>
            <para>
            This is normally only true for persistent data stores created with
            <see cref="M:LaunchDarkly.Sdk.Server.Components.PersistentDataStore(LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer{LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore})"/>, but it could
            also be true for any custom <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/> implementation that makes use of the
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStoreUpdates"/> mechanism. Returning true means that the store guarantees
            that if it ever enters an invalid state (that is, an operation has failed or it knows
            that operations cannot succeed at the moment), it will publish a status update, and will
            then publish another status update once it has returned to a valid state.
            </para>
            <para>
            The same value will be returned from
            <see cref="P:LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider.StatusMonitoringEnabled"/>.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDataStore.Init(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet{LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor})">
            <summary>
            Overwrites the store's contents with a set of items for each collection.
            </summary>
            <remarks>
            <para>
            All previous data should be discarded, regardless of versioning.
            </para>
            <para>
            The update should be done atomically. If it cannot be done atomically, then the store
            must first add or update each item in the same order that they are given in the input
            data, and then delete any previously stored items that were not in the input data.
            </para>
            </remarks>
            <param name="allData">a list of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/> instances and their
            corresponding data sets</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDataStore.Get(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,System.String)">
            <summary>
            Retrieves an item from the specified collection, if available.
            </summary>
            <remarks>
            If the item has been deleted and the store contains a placeholder, it should
            return that placeholder rather than null.
            </remarks>
            <param name="kind">specifies which collection to use</param>
            <param name="key">the unique key of the item within that collection</param>
            <returns>a versioned item that contains the stored data (or placeholder for
            deleted data); null if the key is unknown</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDataStore.GetAll(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind)">
            <summary>
            Retrieves all items from the specified collection.
            </summary>
            <remarks>
            If the store contains placeholders for deleted items, it should include them in
            the results, not filter them out.
            </remarks>
            <param name="kind">specifies which collection to use</param>
            <returns>a collection of key-value pairs; the ordering is not significant</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDataStore.Upsert(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,System.String,LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor)">
            <summary>
            Updates or inserts an item in the specified collection. For updates, the object will only be
            updated if the existing version is less than the new version.
            </summary>
            <remarks>
            The SDK may pass an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor"/> that contains a null, to
            represent a placeholder for a deleted item. In that case, assuming the version
            is greater than any existing version of that item, the store should retain that
            placeholder rather than simply not storing anything.
            </remarks>
            <param name="kind">specifies which collection to use</param>
            <param name="key">the unique key for the item within that collection</param>
            <param name="item">the item to insert or update</param>
            <returns>true if the item was updated; false if it was not updated because the
            store contains an equal or greater version</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDataStore.Initialized">
            <summary>
            Checks whether this store has been initialized with any data yet.
            </summary>
            <remarks>
            This is defined as a method rather than a property to emphasize that it may be an
            operation that involves I/O; some data stores need to do a database query to see if
            there is existing data.
            </remarks>
            <returns>true if the store contains data</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStoreUpdates">
            <summary>
            Interface that an implementation of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/> can use to report
            information back to the SDK.
            </summary>
            <remarks>
            Component factories for <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/> implementations will receive an implementation of this
            interface in the <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.DataStoreUpdates"/> property of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext"/>.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDataStoreUpdates.UpdateStatus(LaunchDarkly.Sdk.Server.Interfaces.DataStoreStatus)">
            <summary>
            Reports a change in the data store's operational status.
            </summary>
            <remarks>
            This is what makes the status monitoring mechanisms in
            <see cref="T:LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider"/> work.
            </remarks>
            <param name="newStatus">the updated status properties</param>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.IDiagnosticDescription">
            <summary>
            Optional interface for components to describe their own configuration.
            </summary>
            <remarks>
            <para>
            The SDK uses a simplified JSON representation of its configuration when recording diagnostics data.
            Any configuration/component builder class that implements <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer`1"/> may
            choose to contribute values to this representation, although the SDK may or may not use them.
            </para>
            <para>
            The <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IDiagnosticDescription.DescribeConfiguration(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)"/> method should return either <see cref="P:LaunchDarkly.Sdk.LdValue.Null"/>or a
            JSON value. For custom components, the value must be a string that describes the basic nature of
            this component implementation (e.g. "Redis"). Built-in LaunchDarkly components may instead return a
            JSON object containing multiple properties specific to the LaunchDarkly diagnostic schema.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IDiagnosticDescription.DescribeConfiguration(LaunchDarkly.Sdk.Server.Subsystems.LdClientContext)">
            <summary>
            Called internally by the SDK to inspect the configuration. Applications do not need to call
            this method.
            </summary>
            <param name="context">SDK configuration/component information</param>
            <returns>a JSON value</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor">
            <summary>
            Interface for an object that can send or store analytics events.
            </summary>
            <remarks>
            <para>
            Application code normally does not need to interact with <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor"/> or its
            related parameter types. They are provided to allow a custom implementation or test fixture to be
            substituted for the SDK's normal analytics event logic.
            </para>
            <para>
            All of the <c>Record</c> methods must return as soon as possible without waiting for events to be
            delivered; event delivery is done asynchronously by a background task.
            </para>
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor.RecordEvaluationEvent(LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent)">
            <summary>
            Records the action of evaluating a feature flag.
            </summary>
            <remarks>
            Depending on the feature flag properties and event properties, this may be transmitted to the
            events service as an individual event, or may only be added into summary data.
            </remarks>
            <param name="e">parameters for an evaluation event</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor.RecordIdentifyEvent(LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.IdentifyEvent)">
            <summary>
            Records a set of user properties.
            </summary>
            <param name="e">parameters for an identify event</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor.RecordCustomEvent(LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.CustomEvent)">
            <summary>
            Records a custom event.
            </summary>
            <param name="e">parameters for a custom event</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor.Flush">
            <summary>
            Specifies that any buffered events should be sent as soon as possible, rather than waiting
            for the next flush interval.
            </summary>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.Flush"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor.FlushAndWait(System.TimeSpan)">
            <summary>
            Specifies that any buffered events should be sent synchronously now.
            </summary>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Interfaces.ILdClient.FlushAndWait(System.TimeSpan)"/>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore">
            <summary>
            Interface for a data store that holds feature flags and related data in a
            serialized form.
            </summary>
            <remarks>
            <para>
            This interface should be used for database integrations, or any other data store
            implementation that stores data in some external service. The SDK will take care of
            converting between its own internal data model and a serialized string form; the
            data store interacts only with the serialized form.
            </para>
            <para>
            The SDK will also provide its own caching layer on top of the persistent data
            store; the data store implementation should not provide caching, but simply do
            every query or update that the SDK tells it to do.
            </para>
            <para>
            Implementations must be thread-safe.
            </para>
            <para>
            Implementations that use a task-based asynchronous pattern can use
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync"/> instead.
            </para>
            <para>
            Conceptually, each item in the store is a <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor"/> which
            always has a version number, and can represent either a serialized object or a
            placeholder (tombstone) for a deleted item. There are two approaches a persistent store
            implementation can use for persisting this data:
            </para>
            <list type="number">
            <item><description>
            Preferably, it should store the version number and the <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.Deleted"/>
            state separately so that the object does not need to be fully deserialized to read
            them. In this case, deleted item placeholders can ignore the value of
            <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.SerializedItem"/> on writes and can set it to
            null on reads. The store should never call <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind.Deserialize(System.String)"/>
            or <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind.Serialize(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor)"/> in this case.
            </description></item>
            <item><description>
            If that isn't possible, then the store should simply persist the exact string from
            <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.SerializedItem"/> on writes, and return the persisted
            string on reads -- setting <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.Version"/> to zero and
            <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.Deleted"/> to false. The string is guaranteed to
            provide the SDK with enough information to infer the version and the deleted state.
            On updates, the store will have to call <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind.Deserialize(System.String)"/> in
            order to inspect the version number of the existing item if any.
            </description></item>
            </list>
            <para>
            Error handling is defined as follows: if any data store operation encounters a database
            error, or is otherwise unable to complete its task, it should throw an exception to make
            the SDK aware of this. The SDK will log the exception and will assume that the data store
            is now in a non-operational state; the SDK will then start polling <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.IsStoreAvailable"/>
            to determine when the store has started working again.
            </para>
            </remarks>
            <seealso cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync"/>
            <seealso cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.Init(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet{LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor})">
            <summary>
            Overwrites the store's contents with a set of items for each collection.
            </summary>
            <remarks>
            <para>
            All previous data should be discarded, regardless of versioning.
            </para>
            <para>
            The update should be done atomically. If it cannot be done atomically, then the store
            must first add or update each item in the same order that they are given in the input
            data, and then delete any previously stored items that were not in the input data.
            </para>
            </remarks>
            <param name="allData">a list of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/> instances and their
            corresponding data sets</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.Get(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,System.String)">
            <summary>
            Retrieves an item from the specified collection, if available.
            </summary>
            <remarks>
            <para>
            If the key is not known at all, the method should return null. Otherwise, it should return
            a <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor"/> as follows:
            </para>
            <list type="number">
            <item><description>
            If the version number and deletion state can be determined without fully deserializing
            the item, then the store should set those properties in the <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor"/>
            (and can set <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.SerializedItem"/> to null for deleted items).
            </description></item>
            <item><description>
            Otherwise, it should simply set <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.SerializedItem"/> to
            the exact string that was persisted, and can leave the other properties as zero/false. The
            SDK will inspect the properties of the item after deserializing it to fill in the rest of
            the information.
            </description></item>
            </list>
            </remarks>
            <param name="kind">specifies which collection to use</param>
            <param name="key">the unique key of the item within that collection</param>
            <returns>a versioned item that contains the stored data (or placeholder for
            deleted data); null if the key is unknown</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.GetAll(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind)">
            <summary>
            Retrieves all items from the specified collection.
            </summary>
            <remarks>
            If the store contains placeholders for deleted items, it should include them in
            the results, not filter them out. See <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.Get(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,System.String)"/> for how to set
            the properties of the <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor"/> for each item.
            </remarks>
            <param name="kind">specifies which collection to use</param>
            <returns>a collection of key-value pairs; the ordering is not significant</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.Upsert(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,System.String,LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor)">
            <summary>
            Updates or inserts an item in the specified collection. For updates, the object will only be
            updated if the existing version is less than the new version.
            </summary>
            <remarks>
            The SDK may pass an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor"/> that contains a null, to
            represent a placeholder for a deleted item. In that case, assuming the version
            is greater than any existing version of that item, the store should retain that
            placeholder rather than simply not storing anything.
            </remarks>
            <param name="kind">specifies which collection to use</param>
            <param name="key">the unique key for the item within that collection</param>
            <param name="item">the item to insert or update</param>
            <returns>true if the item was updated; false if it was not updated because the
            store contains an equal or greater version</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.Initialized">
            <summary>
            Returns true if this store has been initialized.
            </summary>
            <remarks>
            In a shared data store, the implementation should be able to detect this
            state even if <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.Init(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet{LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor})"/> was called in a
            different process, i.e. it must query the underlying data store in some way. The method
            does not need to worry about caching this value; the SDK will call it rarely.
            </remarks>
            <returns>true if the store has been initialized</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.IsStoreAvailable">
            <summary>
            Tests whether the data store seems to be functioning normally.
            </summary>
            <remarks>
            <para>
            This should not be a detailed test of different kinds of operations, but just the smallest
            possible operation to determine whether (for instance) we can reach the database.
            </para>
            <para>
            Whenever one of the store's other methods throws an exception, the SDK will assume that it
            may have become unavailable (e.g. the database connection was lost). The SDK will then call
            <c>IsStoreAvailable()</c> at intervals until it returns true.
            </para>
            </remarks>
            <returns>true if the underlying data store is reachable</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync">
            <summary>
            Interface for a data store that holds feature flags and related data in a
            serialized form.
            </summary>
            <remarks>
            This is exactly equivalent to <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore"/>, but for
            implementations that use a task-based asynchronous pattern.
            </remarks>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync.InitAsync(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet{LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor})">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.Init(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet{LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor})"/>.
            </summary>
            <param name="allData">a list of <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind"/> instances and their
            corresponding data sets</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync.GetAsync(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,System.String)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.Get(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,System.String)"/>.
            </summary>
            <param name="kind">specifies which collection to use</param>
            <param name="key">the unique key of the item within that collection</param>
            <returns>a versioned item that contains the stored data (or placeholder for
            deleted data); null if the key is unknown</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync.GetAllAsync(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.GetAll(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind)"/>.
            </summary>
            <param name="kind">specifies which collection to use</param>
            <returns>a collection of key-value pairs; the ordering is not significant</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync.UpsertAsync(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,System.String,LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor)">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.Upsert(LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind,System.String,LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor)"/>.
            </summary>
            <param name="kind">specifies which collection to use</param>
            <param name="key">the unique key for the item within that collection</param>
            <param name="item">the item to insert or update</param>
            <returns>true if the item was updated; false if it was not updated because the
            store contains an equal or greater version</returns>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync.InitializedAsync">
            <summary>
            Equivalent to <see cref="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.Initialized"/>.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync.IsStoreAvailableAsync">
            <summary>
            Tests whether the data store seems to be functioning normally.
            </summary>
            <remarks>
            <para>
            This should not be a detailed test of different kinds of operations, but just the smallest
            possible operation to determine whether (for instance) we can reach the database.
            </para>
            <para>
            Whenever one of the store's other methods throws an exception, the SDK will assume that it
            may have become unavailable (e.g. the database connection was lost). The SDK will then call
            <c>IsStoreAvailable()</c> at intervals until it returns true.
            </para>
            </remarks>
            <returns>true if the underlying data store is reachable</returns>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext">
            <summary>
            Encapsulates SDK client context when creating components.
            </summary>
            <remarks>
            <para>
            The SDK passes this object to component factories/configuration builders that implement the
            <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer`1"/> interface, to provide them with necessary configuration
            properties, as well as references to other components that they may need to access.
            </para>
            <para>
            This class also has non-public properties that are relevant only to internal SDK implementation
            code and are not accessible to custom components.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.DataSourceUpdates">
            <summary>
            A component that <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSource"/> implementations use to deliver data and status
            updates to the SDK.
            </summary>
            <remarks>
            This property is only set when the SDK is calling an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataSource"/> factory.
            Otherwise it is null.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.DataStoreUpdates">
            <summary>
            A component that <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/> implementations use to deliver status updates to
            the SDK.
            </summary>
            <remarks>
            This property is only set when the SDK is calling an <see cref="T:LaunchDarkly.Sdk.Server.Subsystems.IDataStore"/> factory.
            Otherwise it is null.
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.Http">
            <summary>
            The HTTP configuration for the current client instance.
            </summary>
            <remarks>
            <para>
            All SDK components that make HTTP requests must use this configuration unless there is a specific
            reason they cannot (for instance, streaming connections cannot use the ConnectTimeout property).
            </para>
            <para>
            This property is null during early stages of SDK initialization where the HTTP configuration has
            not yet been created.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.Logger">
            <summary>
            The base logger for all SDK components to use.
            </summary>
            <remarks>
            <para>
            Components should use the methods of the <a href="https://github.com/launchdarkly/dotnet-logging">LaunchDarkly.Logging</a>
            API to write log messages which will be output or discarded as appropriate by the logging
            framework. This is the main logger for the SDK; components that want to tag their log messages
            with a more specific logger name can use the <c>SubLogger</c> method: for instance, if the
            base logger's name is "LaunchDarkly.Sdk", an event-processing component could use
            <c>SubLogger("Events")</c> to get a logger whose name is "LaunchDarkly.Sdk.Events".
            </para>
            <para>
            This property will never be null; if logging is disabled, it will be set to a stub logger
            that produces no output.
            </para>
            </remarks>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.Offline">
            <summary>
            True if the SDK was configured to be completely offline.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.SdkKey">
            <summary>
            The configured SDK key.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.ServiceEndpoints">
            <summary>
            Defines the base service URIs used by SDK components.
            </summary>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.#ctor(System.String,LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates,LaunchDarkly.Sdk.Server.Subsystems.IDataStoreUpdates,LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration,LaunchDarkly.Logging.Logger,System.Boolean,LaunchDarkly.Sdk.Server.Interfaces.ServiceEndpoints)">
            <summary>
            Constructs a new instance with only the public properties.
            </summary>
            <remarks>
            This constructor is only for convenience in testing. It does not set internal properties that
            are normally computed in the LdClient constructor.
            </remarks>
            <param name="sdkKey">the SDK key</param>
            <param name="dataSourceUpdates">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.DataSourceUpdates"/>, normally null</param>
            <param name="dataStoreUpdates">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.DataStoreUpdates"/>, normally null</param>
            <param name="http">the HTTP configuration; if null, a default configuration is used</param>
            <param name="logger">the base logger; if null, logging is disabled</param>
            <param name="offline">true if the SDK should be entirely offline</param>
            <param name="serviceEndpoints">custom service endpoints; if null, defaults are used</param>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.#ctor(System.String)">
            <summary>
            Basic constructor that sets only the SDK key and uses defaults for all other properties.
            </summary>
            <param name="sdkKey">the SDK key</param>
        </member>
        <member name="T:LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration">
            <summary>
            Encapsulates the SDK's general logging configuration.
            </summary>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration.BaseLoggerName">
            <summary>
            The configured base logger name, or <c>null</c> to use the default.
            </summary>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.BaseLoggerName(System.String)"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration.LogAdapter">
            <summary>
            The implementation of logging that the SDK will use.
            </summary>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.Adapter(LaunchDarkly.Logging.ILogAdapter)"/>
        </member>
        <member name="P:LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration.LogDataSourceOutageAsErrorAfter">
            <summary>
            The time threshold, if any, after which the SDK will log a data source outage at <c>Error</c> level
            instead of <c>Warn</c> level.
            </summary>
            <seealso cref="M:LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.LogDataSourceOutageAsErrorAfter(System.Nullable{System.TimeSpan})"/>
        </member>
        <member name="M:LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration.#ctor(System.String,LaunchDarkly.Logging.ILogAdapter,System.Nullable{System.TimeSpan})">
            <summary>
            Constructs a new instance.
            </summary>
            <param name="baseLoggerName">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration.BaseLoggerName"/></param>
            <param name="logAdapter">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration.LogAdapter"/></param>
            <param name="logDataSourceOutageAsErrorAfter">value for <see cref="P:LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration.LogDataSourceOutageAsErrorAfter"/></param>
        </member>
    </members>
</doc>
